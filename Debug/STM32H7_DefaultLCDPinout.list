
STM32H7_DefaultLCDPinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf28  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800c1d8  0800c1d8  0001c1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c258  0800c258  0001c258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c260  0800c260  0001c260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c264  0800c264  0001c264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800c268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000448f0  24000014  0800c27c  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00001604  24044904  0800c27c  00024904  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002d7bf  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004f63  00000000  00000000  0004d844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000023b8  00000000  00000000  000527a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001bed  00000000  00000000  00054b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000065a0  00000000  00000000  0005674d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002cb43  00000000  00000000  0005cced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00166758  00000000  00000000  00089830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009b10  00000000  00000000  001eff88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008f  00000000  00000000  001f9a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000014 	.word	0x24000014
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800c1c0 	.word	0x0800c1c0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000018 	.word	0x24000018
 80002ec:	0800c1c0 	.word	0x0800c1c0

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f001 fb40 	bl	8001c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f832 	bl	800065c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005f8:	f000 f8b2 	bl	8000760 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 fb5c 	bl	8000cb8 <MX_GPIO_Init>
  MX_FMC_Init();
 8000600:	f000 fb0c 	bl	8000c1c <MX_FMC_Init>
  MX_I2C4_Init();
 8000604:	f000 f8de 	bl	80007c4 <MX_I2C4_Init>
  MX_I2S6_Init();
 8000608:	f000 f91c 	bl	8000844 <MX_I2S6_Init>
  MX_LTDC_Init();
 800060c:	f000 f94e 	bl	80008ac <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 8000610:	f000 f9d4 	bl	80009bc <MX_OCTOSPI1_Init>
  MX_RTC_Init();
 8000614:	f000 fa34 	bl	8000a80 <MX_RTC_Init>
  MX_SPI2_Init();
 8000618:	f000 fa5c 	bl	8000ad4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800061c:	f000 fab2 	bl	8000b84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_LTDC_SetAddress(&hltdc, (uint32_t)framebuffer, LTDC_LAYER_1);
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <main+0x5c>)
 8000622:	2200      	movs	r2, #0
 8000624:	4619      	mov	r1, r3
 8000626:	4809      	ldr	r0, [pc, #36]	; (800064c <main+0x60>)
 8000628:	f002 fa6c 	bl	8002b04 <HAL_LTDC_SetAddress>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800062c:	f009 f83c 	bl	80096a8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000630:	4a07      	ldr	r2, [pc, #28]	; (8000650 <main+0x64>)
 8000632:	2100      	movs	r1, #0
 8000634:	4807      	ldr	r0, [pc, #28]	; (8000654 <main+0x68>)
 8000636:	f009 f881 	bl	800973c <osThreadNew>
 800063a:	4603      	mov	r3, r0
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <main+0x6c>)
 800063e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000640:	f009 f856 	bl	80096f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0x58>
 8000646:	bf00      	nop
 8000648:	24000358 	.word	0x24000358
 800064c:	240000d8 	.word	0x240000d8
 8000650:	0800c1fc 	.word	0x0800c1fc
 8000654:	08000f9d 	.word	0x08000f9d
 8000658:	24000354 	.word	0x24000354

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b09c      	sub	sp, #112	; 0x70
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000666:	224c      	movs	r2, #76	; 0x4c
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f00b fd6e 	bl	800c14c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2220      	movs	r2, #32
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f00b fd68 	bl	800c14c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800067c:	4b36      	ldr	r3, [pc, #216]	; (8000758 <SystemClock_Config+0xfc>)
 800067e:	f04f 32ff 	mov.w	r2, #4294967295
 8000682:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000686:	2004      	movs	r0, #4
 8000688:	f003 faea 	bl	8003c60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800068c:	2300      	movs	r3, #0
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	4b32      	ldr	r3, [pc, #200]	; (800075c <SystemClock_Config+0x100>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a31      	ldr	r2, [pc, #196]	; (800075c <SystemClock_Config+0x100>)
 8000696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b2f      	ldr	r3, [pc, #188]	; (800075c <SystemClock_Config+0x100>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a8:	bf00      	nop
 80006aa:	4b2c      	ldr	r3, [pc, #176]	; (800075c <SystemClock_Config+0x100>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006b6:	d1f8      	bne.n	80006aa <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80006b8:	230b      	movs	r3, #11
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006c6:	2340      	movs	r3, #64	; 0x40
 80006c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006ca:	2301      	movs	r3, #1
 80006cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006d6:	230c      	movs	r3, #12
 80006d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 200;
 80006da:	23c8      	movs	r3, #200	; 0xc8
 80006dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006e2:	2303      	movs	r3, #3
 80006e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006ea:	2304      	movs	r3, #4
 80006ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fb0a 	bl	8003d14 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000706:	f000 fcd5 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	233f      	movs	r3, #63	; 0x3f
 800070c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2303      	movs	r3, #3
 8000710:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800071a:	2340      	movs	r3, #64	; 0x40
 800071c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 800071e:	2350      	movs	r3, #80	; 0x50
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000726:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000728:	2340      	movs	r3, #64	; 0x40
 800072a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2104      	movs	r1, #4
 8000730:	4618      	mov	r0, r3
 8000732:	f003 ff21 	bl	8004578 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800073c:	f000 fcba 	bl	80010b4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000740:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000744:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8000748:	2000      	movs	r0, #0
 800074a:	f004 f8cb 	bl	80048e4 <HAL_RCC_MCOConfig>
}
 800074e:	bf00      	nop
 8000750:	3770      	adds	r7, #112	; 0x70
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	58024400 	.word	0x58024400
 800075c:	58024800 	.word	0x58024800

08000760 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b0b0      	sub	sp, #192	; 0xc0
 8000764:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	22c0      	movs	r2, #192	; 0xc0
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f00b fced 	bl	800c14c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_OSPI
 8000772:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8000776:	f04f 0300 	mov.w	r3, #0
 800077a:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 12;
 800077e:	230c      	movs	r3, #12
 8000780:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000782:	23c8      	movs	r3, #200	; 0xc8
 8000784:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000786:	2302      	movs	r3, #2
 8000788:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 4;
 800078e:	2304      	movs	r3, #4
 8000790:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000792:	2340      	movs	r3, #64	; 0x40
 8000794:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 800079e:	2302      	movs	r3, #2
 80007a0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 80007a2:	2320      	movs	r3, #32
 80007a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80007a6:	2300      	movs	r3, #0
 80007a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007aa:	463b      	mov	r3, r7
 80007ac:	4618      	mov	r0, r3
 80007ae:	f004 fb1b 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80007b8:	f000 fc7c 	bl	80010b4 <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	37c0      	adds	r7, #192	; 0xc0
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_I2C4_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_I2C4_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_I2C4_Init+0x74>)
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <MX_I2C4_Init+0x7c>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_I2C4_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_I2C4_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_I2C4_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_I2C4_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2C4_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_I2C4_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2C4_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80007fe:	480e      	ldr	r0, [pc, #56]	; (8000838 <MX_I2C4_Init+0x74>)
 8000800:	f001 fd58 	bl	80022b4 <HAL_I2C_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800080a:	f000 fc53 	bl	80010b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <MX_I2C4_Init+0x74>)
 8000812:	f001 fddf 	bl	80023d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800081c:	f000 fc4a 	bl	80010b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000820:	2100      	movs	r1, #0
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_I2C4_Init+0x74>)
 8000824:	f001 fe21 	bl	800246a <HAL_I2CEx_ConfigDigitalFilter>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 fc41 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	24000030 	.word	0x24000030
 800083c:	58001c00 	.word	0x58001c00
 8000840:	10c0ecff 	.word	0x10c0ecff

08000844 <MX_I2S6_Init>:
  * @brief I2S6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S6_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2S6_Init 0 */

  /* USER CODE BEGIN I2S6_Init 1 */

  /* USER CODE END I2S6_Init 1 */
  hi2s6.Instance = SPI6;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_I2S6_Init+0x60>)
 800084a:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <MX_I2S6_Init+0x64>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2s6.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_I2S6_Init+0x60>)
 8000850:	220a      	movs	r2, #10
 8000852:	605a      	str	r2, [r3, #4]
  hi2s6.Init.Standard = I2S_STANDARD_PHILIPS;
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_I2S6_Init+0x60>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2s6.Init.DataFormat = I2S_DATAFORMAT_16B;
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_I2S6_Init+0x60>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hi2s6.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_I2S6_Init+0x60>)
 8000862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000866:	611a      	str	r2, [r3, #16]
  hi2s6.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_I2S6_Init+0x60>)
 800086a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800086e:	615a      	str	r2, [r3, #20]
  hi2s6.Init.CPOL = I2S_CPOL_LOW;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_I2S6_Init+0x60>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2s6.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_I2S6_Init+0x60>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2s6.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_I2S6_Init+0x60>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  hi2s6.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_I2S6_Init+0x60>)
 8000884:	2200      	movs	r2, #0
 8000886:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s6.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_I2S6_Init+0x60>)
 800088a:	2200      	movs	r2, #0
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s6) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_I2S6_Init+0x60>)
 8000890:	f001 fe38 	bl	8002504 <HAL_I2S_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2S6_Init+0x5a>
  {
    Error_Handler();
 800089a:	f000 fc0b 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S6_Init 2 */

  /* USER CODE END I2S6_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	24000084 	.word	0x24000084
 80008a8:	58001400 	.word	0x58001400

080008ac <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08e      	sub	sp, #56	; 0x38
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2234      	movs	r2, #52	; 0x34
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f00b fc47 	bl	800c14c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008be:	4b3d      	ldr	r3, [pc, #244]	; (80009b4 <MX_LTDC_Init+0x108>)
 80008c0:	4a3d      	ldr	r2, [pc, #244]	; (80009b8 <MX_LTDC_Init+0x10c>)
 80008c2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008c4:	4b3b      	ldr	r3, [pc, #236]	; (80009b4 <MX_LTDC_Init+0x108>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008ca:	4b3a      	ldr	r3, [pc, #232]	; (80009b4 <MX_LTDC_Init+0x108>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008d0:	4b38      	ldr	r3, [pc, #224]	; (80009b4 <MX_LTDC_Init+0x108>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008d6:	4b37      	ldr	r3, [pc, #220]	; (80009b4 <MX_LTDC_Init+0x108>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80008dc:	4b35      	ldr	r3, [pc, #212]	; (80009b4 <MX_LTDC_Init+0x108>)
 80008de:	2228      	movs	r2, #40	; 0x28
 80008e0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80008e2:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <MX_LTDC_Init+0x108>)
 80008e4:	2209      	movs	r2, #9
 80008e6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80008e8:	4b32      	ldr	r3, [pc, #200]	; (80009b4 <MX_LTDC_Init+0x108>)
 80008ea:	2235      	movs	r2, #53	; 0x35
 80008ec:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80008ee:	4b31      	ldr	r3, [pc, #196]	; (80009b4 <MX_LTDC_Init+0x108>)
 80008f0:	220b      	movs	r2, #11
 80008f2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80008f4:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <MX_LTDC_Init+0x108>)
 80008f6:	f240 2215 	movw	r2, #533	; 0x215
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80008fc:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <MX_LTDC_Init+0x108>)
 80008fe:	f240 121b 	movw	r2, #283	; 0x11b
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000904:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_LTDC_Init+0x108>)
 8000906:	f240 2235 	movw	r2, #565	; 0x235
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800090c:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <MX_LTDC_Init+0x108>)
 800090e:	f240 121d 	movw	r2, #285	; 0x11d
 8000912:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <MX_LTDC_Init+0x108>)
 8000916:	2200      	movs	r2, #0
 8000918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800091c:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <MX_LTDC_Init+0x108>)
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000924:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MX_LTDC_Init+0x108>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800092c:	4821      	ldr	r0, [pc, #132]	; (80009b4 <MX_LTDC_Init+0x108>)
 800092e:	f001 ff19 	bl	8002764 <HAL_LTDC_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000938:	f000 fbbc 	bl	80010b4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000940:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000944:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800094a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800094e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000950:	2302      	movs	r3, #2
 8000952:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000954:	23ff      	movs	r3, #255	; 0xff
 8000956:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800095c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000960:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000962:	2307      	movs	r3, #7
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000966:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800096c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000972:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	4619      	mov	r1, r3
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <MX_LTDC_Init+0x108>)
 8000992:	f002 f879 	bl	8002a88 <HAL_LTDC_ConfigLayer>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800099c:	f000 fb8a 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  LTDC->IER |= LTDC_IER_LIE; // Enable LTDC interrupts
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <MX_LTDC_Init+0x10c>)
 80009a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <MX_LTDC_Init+0x10c>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6353      	str	r3, [r2, #52]	; 0x34
  /* USER CODE END LTDC_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3738      	adds	r7, #56	; 0x38
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	240000d8 	.word	0x240000d8
 80009b8:	50001000 	.word	0x50001000

080009bc <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
 80009d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 80009d4:	4a28      	ldr	r2, [pc, #160]	; (8000a78 <MX_OCTOSPI1_Init+0xbc>)
 80009d6:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80009d8:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 80009da:	2201      	movs	r2, #1
 80009dc:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80009de:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 80009e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009ea:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80009ec:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 80009ee:	2220      	movs	r2, #32
 80009f0:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 8000a24:	2208      	movs	r2, #8
 8000a26:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000a34:	480f      	ldr	r0, [pc, #60]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 8000a36:	f002 fa6d 	bl	8002f14 <HAL_OSPI_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8000a40:	f000 fb38 	bl	80010b4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <MX_OCTOSPI1_Init+0xc0>)
 8000a52:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_OCTOSPI1_Init+0xb8>)
 8000a5e:	f002 fb25 	bl	80030ac <HAL_OSPIM_Config>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_OCTOSPI1_Init+0xb0>
  {
    Error_Handler();
 8000a68:	f000 fb24 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	24000180 	.word	0x24000180
 8000a78:	52005000 	.word	0x52005000
 8000a7c:	01000001 	.word	0x01000001

08000a80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_RTC_Init+0x4c>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <MX_RTC_Init+0x50>)
 8000a88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <MX_RTC_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_RTC_Init+0x4c>)
 8000a92:	227f      	movs	r2, #127	; 0x7f
 8000a94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <MX_RTC_Init+0x4c>)
 8000a98:	22ff      	movs	r2, #255	; 0xff
 8000a9a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_RTC_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <MX_RTC_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_RTC_Init+0x4c>)
 8000aaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aae:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_RTC_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_RTC_Init+0x4c>)
 8000ab8:	f006 fda0 	bl	80075fc <HAL_RTC_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000ac2:	f000 faf7 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	240001dc 	.word	0x240001dc
 8000ad0:	58004000 	.word	0x58004000

08000ad4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ad8:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000ada:	4a29      	ldr	r2, [pc, #164]	; (8000b80 <MX_SPI2_Init+0xac>)
 8000adc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ade:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000ae0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ae4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae6:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aec:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000aee:	2207      	movs	r2, #7
 8000af0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000af4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000af8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000afa:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000afc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b2e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_SPI2_Init+0xa8>)
 8000b68:	f006 fea2 	bl	80078b0 <HAL_SPI_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000b72:	f000 fa9f 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	24000204 	.word	0x24000204
 8000b80:	40003800 	.word	0x40003800

08000b84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b88:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <MX_USART1_UART_Init+0x90>)
 8000b8a:	4a23      	ldr	r2, [pc, #140]	; (8000c18 <MX_USART1_UART_Init+0x94>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b8e:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <MX_USART1_UART_Init+0x90>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <MX_USART1_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_USART1_UART_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <MX_USART1_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_USART1_UART_Init+0x90>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_USART1_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_USART1_UART_Init+0x90>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bba:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_USART1_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_USART1_UART_Init+0x90>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_USART1_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bcc:	4811      	ldr	r0, [pc, #68]	; (8000c14 <MX_USART1_UART_Init+0x90>)
 8000bce:	f007 fa87 	bl	80080e0 <HAL_UART_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bd8:	f000 fa6c 	bl	80010b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bdc:	2100      	movs	r1, #0
 8000bde:	480d      	ldr	r0, [pc, #52]	; (8000c14 <MX_USART1_UART_Init+0x90>)
 8000be0:	f008 fb8d 	bl	80092fe <HAL_UARTEx_SetTxFifoThreshold>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bea:	f000 fa63 	bl	80010b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4808      	ldr	r0, [pc, #32]	; (8000c14 <MX_USART1_UART_Init+0x90>)
 8000bf2:	f008 fbc2 	bl	800937a <HAL_UARTEx_SetRxFifoThreshold>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bfc:	f000 fa5a 	bl	80010b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <MX_USART1_UART_Init+0x90>)
 8000c02:	f008 fb43 	bl	800928c <HAL_UARTEx_DisableFifoMode>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c0c:	f000 fa52 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2400028c 	.word	0x2400028c
 8000c18:	40011000 	.word	0x40011000

08000c1c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
 8000c30:	615a      	str	r2, [r3, #20]
 8000c32:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <MX_FMC_Init+0x94>)
 8000c36:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <MX_FMC_Init+0x98>)
 8000c38:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_FMC_Init+0x94>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <MX_FMC_Init+0x94>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_FMC_Init+0x94>)
 8000c48:	2204      	movs	r2, #4
 8000c4a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <MX_FMC_Init+0x94>)
 8000c4e:	2210      	movs	r2, #16
 8000c50:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_FMC_Init+0x94>)
 8000c54:	2240      	movs	r2, #64	; 0x40
 8000c56:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_FMC_Init+0x94>)
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_FMC_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_FMC_Init+0x94>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_FMC_Init+0x94>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_FMC_Init+0x94>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000c76:	2310      	movs	r3, #16
 8000c78:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000c7a:	2310      	movs	r3, #16
 8000c7c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000c7e:	2310      	movs	r3, #16
 8000c80:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000c82:	2310      	movs	r3, #16
 8000c84:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000c86:	2310      	movs	r3, #16
 8000c88:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000c8a:	2310      	movs	r3, #16
 8000c8c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000c8e:	2310      	movs	r3, #16
 8000c90:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4619      	mov	r1, r3
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <MX_FMC_Init+0x94>)
 8000c98:	f006 fdce 	bl	8007838 <HAL_SDRAM_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000ca2:	f000 fa07 	bl	80010b4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3720      	adds	r7, #32
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	24000320 	.word	0x24000320
 8000cb4:	52004140 	.word	0x52004140

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b090      	sub	sp, #64	; 0x40
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cce:	4bac      	ldr	r3, [pc, #688]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000cd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cd4:	4aaa      	ldr	r2, [pc, #680]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cda:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cde:	4ba8      	ldr	r3, [pc, #672]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000ce0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cec:	4ba4      	ldr	r3, [pc, #656]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000cee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cf2:	4aa3      	ldr	r2, [pc, #652]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cfc:	4ba0      	ldr	r3, [pc, #640]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000cfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d0a:	4b9d      	ldr	r3, [pc, #628]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000d0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d10:	4a9b      	ldr	r2, [pc, #620]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d1a:	4b99      	ldr	r3, [pc, #612]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000d1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d24:	623b      	str	r3, [r7, #32]
 8000d26:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d28:	4b95      	ldr	r3, [pc, #596]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000d2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d2e:	4a94      	ldr	r2, [pc, #592]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d38:	4b91      	ldr	r3, [pc, #580]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000d3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	61fb      	str	r3, [r7, #28]
 8000d44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	4b8e      	ldr	r3, [pc, #568]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000d48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d4c:	4a8c      	ldr	r2, [pc, #560]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d56:	4b8a      	ldr	r3, [pc, #552]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000d58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
 8000d62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d64:	4b86      	ldr	r3, [pc, #536]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000d66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d6a:	4a85      	ldr	r2, [pc, #532]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000d6c:	f043 0310 	orr.w	r3, r3, #16
 8000d70:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d74:	4b82      	ldr	r3, [pc, #520]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000d76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4b7f      	ldr	r3, [pc, #508]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000d84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d88:	4a7d      	ldr	r2, [pc, #500]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000d8a:	f043 0302 	orr.w	r3, r3, #2
 8000d8e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d92:	4b7b      	ldr	r3, [pc, #492]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000d94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000da0:	4b77      	ldr	r3, [pc, #476]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000da2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000da6:	4a76      	ldr	r2, [pc, #472]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000db0:	4b73      	ldr	r3, [pc, #460]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000db2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b70      	ldr	r3, [pc, #448]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000dc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dc4:	4a6e      	ldr	r2, [pc, #440]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dce:	4b6c      	ldr	r3, [pc, #432]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000dd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ddc:	4b68      	ldr	r3, [pc, #416]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000dde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000de2:	4a67      	ldr	r2, [pc, #412]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000de4:	f043 0320 	orr.w	r3, r3, #32
 8000de8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dec:	4b64      	ldr	r3, [pc, #400]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000dee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000df2:	f003 0320 	and.w	r3, r3, #32
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfa:	4b61      	ldr	r3, [pc, #388]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000dfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e00:	4a5f      	ldr	r2, [pc, #380]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e06:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e0a:	4b5d      	ldr	r3, [pc, #372]	; (8000f80 <MX_GPIO_Init+0x2c8>)
 8000e0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	210e      	movs	r1, #14
 8000e1c:	4859      	ldr	r0, [pc, #356]	; (8000f84 <MX_GPIO_Init+0x2cc>)
 8000e1e:	f001 fa15 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f640 0104 	movw	r1, #2052	; 0x804
 8000e28:	4857      	ldr	r0, [pc, #348]	; (8000f88 <MX_GPIO_Init+0x2d0>)
 8000e2a:	f001 fa0f 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e34:	4855      	ldr	r0, [pc, #340]	; (8000f8c <MX_GPIO_Init+0x2d4>)
 8000e36:	f001 fa09 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2108      	movs	r1, #8
 8000e3e:	4852      	ldr	r0, [pc, #328]	; (8000f88 <MX_GPIO_Init+0x2d0>)
 8000e40:	f001 fa04 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2106      	movs	r1, #6
 8000e48:	4850      	ldr	r0, [pc, #320]	; (8000f8c <MX_GPIO_Init+0x2d4>)
 8000e4a:	f001 f9ff 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_GPIO_Pin WIFI_DATRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000e4e:	2330      	movs	r3, #48	; 0x30
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e60:	4619      	mov	r1, r3
 8000e62:	4848      	ldr	r0, [pc, #288]	; (8000f84 <MX_GPIO_Init+0x2cc>)
 8000e64:	f001 f842 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D1_Pin
                           SDIO1_D0_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D1_Pin
 8000e68:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e82:	4619      	mov	r1, r3
 8000e84:	4842      	ldr	r0, [pc, #264]	; (8000f90 <MX_GPIO_Init+0x2d8>)
 8000e86:	f001 f831 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_BOOT_Pin WIFI_WKUP_Pin WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000e8a:	230e      	movs	r3, #14
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4838      	ldr	r0, [pc, #224]	; (8000f84 <MX_GPIO_Init+0x2cc>)
 8000ea2:	f001 f823 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED1_Pin AUDIO_NRST_Pin USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000ea6:	f640 030c 	movw	r3, #2060	; 0x80c
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4832      	ldr	r0, [pc, #200]	; (8000f88 <MX_GPIO_Init+0x2d0>)
 8000ec0:	f001 f814 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000edc:	4619      	mov	r1, r3
 8000ede:	482d      	ldr	r0, [pc, #180]	; (8000f94 <MX_GPIO_Init+0x2dc>)
 8000ee0:	f001 f804 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4822      	ldr	r0, [pc, #136]	; (8000f84 <MX_GPIO_Init+0x2cc>)
 8000efc:	f000 fff6 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LCD_BL_CTRL_Pin LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000f00:	f640 0306 	movw	r3, #2054	; 0x806
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f16:	4619      	mov	r1, r3
 8000f18:	481c      	ldr	r0, [pc, #112]	; (8000f8c <MX_GPIO_Init+0x2d4>)
 8000f1a:	f000 ffe7 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8000f1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f32:	4619      	mov	r1, r3
 8000f34:	4816      	ldr	r0, [pc, #88]	; (8000f90 <MX_GPIO_Init+0x2d8>)
 8000f36:	f000 ffd9 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f54:	4619      	mov	r1, r3
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <MX_GPIO_Init+0x2d4>)
 8000f58:	f000 ffc8 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4809      	ldr	r0, [pc, #36]	; (8000f98 <MX_GPIO_Init+0x2e0>)
 8000f72:	f000 ffbb 	bl	8001eec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f76:	bf00      	nop
 8000f78:	3740      	adds	r7, #64	; 0x40
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	58024400 	.word	0x58024400
 8000f84:	58022000 	.word	0x58022000
 8000f88:	58021800 	.word	0x58021800
 8000f8c:	58020000 	.word	0x58020000
 8000f90:	58020800 	.word	0x58020800
 8000f94:	58020c00 	.word	0x58020c00
 8000f98:	58021c00 	.word	0x58021c00

08000f9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  uint8_t r    = 0xff, g = 0x00, b = 0x00;             // Solid red
 8000fa4:	23ff      	movs	r3, #255	; 0xff
 8000fa6:	75fb      	strb	r3, [r7, #23]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	75bb      	strb	r3, [r7, #22]
 8000fac:	2300      	movs	r3, #0
 8000fae:	757b      	strb	r3, [r7, #21]
	  uint16_t col = ((r>>3)<<11) | ((g>>2)<<5) | (b>>3);  // Convert colors to RGB565
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	08db      	lsrs	r3, r3, #3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	02db      	lsls	r3, r3, #11
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	7dbb      	ldrb	r3, [r7, #22]
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	015b      	lsls	r3, r3, #5
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	7d7b      	ldrb	r3, [r7, #21]
 8000fca:	08db      	lsrs	r3, r3, #3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	817b      	strh	r3, [r7, #10]
	  int  cnt = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {

	  switch(cnt)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d017      	beq.n	8001010 <StartDefaultTask+0x74>
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	dc1b      	bgt.n	800101e <StartDefaultTask+0x82>
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <StartDefaultTask+0x58>
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d007      	beq.n	8001002 <StartDefaultTask+0x66>
 8000ff2:	e014      	b.n	800101e <StartDefaultTask+0x82>
	  {
		  case 0:
			  r = 0xff;
 8000ff4:	23ff      	movs	r3, #255	; 0xff
 8000ff6:	75fb      	strb	r3, [r7, #23]
			  g = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	75bb      	strb	r3, [r7, #22]
			  b = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	757b      	strb	r3, [r7, #21]
			 break;
 8001000:	e00d      	b.n	800101e <StartDefaultTask+0x82>
		  case 1:
			  r = 0x00;
 8001002:	2300      	movs	r3, #0
 8001004:	75fb      	strb	r3, [r7, #23]
			  g = 0xff;
 8001006:	23ff      	movs	r3, #255	; 0xff
 8001008:	75bb      	strb	r3, [r7, #22]
			  b = 0x00;
 800100a:	2300      	movs	r3, #0
 800100c:	757b      	strb	r3, [r7, #21]
			 break;
 800100e:	e006      	b.n	800101e <StartDefaultTask+0x82>
		  case 2:
			  r = 0x00;
 8001010:	2300      	movs	r3, #0
 8001012:	75fb      	strb	r3, [r7, #23]
			  g = 0x00;
 8001014:	2300      	movs	r3, #0
 8001016:	75bb      	strb	r3, [r7, #22]
			  b = 0xff;
 8001018:	23ff      	movs	r3, #255	; 0xff
 800101a:	757b      	strb	r3, [r7, #21]
			 break;
 800101c:	bf00      	nop
	  }

	  col = ((r>>3)<<11) | ((g>>2)<<5) | (b>>3);
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	02db      	lsls	r3, r3, #11
 8001026:	b21a      	sxth	r2, r3
 8001028:	7dbb      	ldrb	r3, [r7, #22]
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	b2db      	uxtb	r3, r3
 800102e:	015b      	lsls	r3, r3, #5
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21a      	sxth	r2, r3
 8001036:	7d7b      	ldrb	r3, [r7, #21]
 8001038:	08db      	lsrs	r3, r3, #3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21b      	sxth	r3, r3
 8001042:	817b      	strh	r3, [r7, #10]
	  // Put colors into the framebuffer
	  for(int i = 0; i < 470*272; i++)
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	e007      	b.n	800105a <StartDefaultTask+0xbe>
	  {
	    framebuffer[i] = col;
 800104a:	490e      	ldr	r1, [pc, #56]	; (8001084 <StartDefaultTask+0xe8>)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	897a      	ldrh	r2, [r7, #10]
 8001050:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  for(int i = 0; i < 470*272; i++)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <StartDefaultTask+0xec>)
 800105e:	4293      	cmp	r3, r2
 8001060:	ddf3      	ble.n	800104a <StartDefaultTask+0xae>
	  }

	  cnt++;
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	3301      	adds	r3, #1
 8001066:	613b      	str	r3, [r7, #16]
	  if(cnt > 2)(cnt = 0);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	2b02      	cmp	r3, #2
 800106c:	dd01      	ble.n	8001072 <StartDefaultTask+0xd6>
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]


	  HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
 8001072:	2104      	movs	r1, #4
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <StartDefaultTask+0xf0>)
 8001076:	f001 f902 	bl	800227e <HAL_GPIO_TogglePin>
    osDelay(1000);
 800107a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107e:	f008 fbef 	bl	8009860 <osDelay>
	  switch(cnt)
 8001082:	e7aa      	b.n	8000fda <StartDefaultTask+0x3e>
 8001084:	24000358 	.word	0x24000358
 8001088:	0001f35f 	.word	0x0001f35f
 800108c:	58021800 	.word	0x58021800

08001090 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010a2:	f000 fe23 	bl	8001cec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40001000 	.word	0x40001000

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	e7fe      	b.n	80010bc <Error_Handler+0x8>
	...

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HAL_MspInit+0x38>)
 80010c8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_MspInit+0x38>)
 80010ce:	f043 0302 	orr.w	r3, r3, #2
 80010d2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_MspInit+0x38>)
 80010d8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	210f      	movs	r1, #15
 80010e8:	f06f 0001 	mvn.w	r0, #1
 80010ec:	f000 fed6 	bl	8001e9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	58024400 	.word	0x58024400

080010fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0ba      	sub	sp, #232	; 0xe8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	22c0      	movs	r2, #192	; 0xc0
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f00b f815 	bl	800c14c <memset>
  if(hi2c->Instance==I2C4)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a27      	ldr	r2, [pc, #156]	; (80011c4 <HAL_I2C_MspInit+0xc8>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d146      	bne.n	80011ba <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800112c:	f04f 0210 	mov.w	r2, #16
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	4618      	mov	r0, r3
 8001144:	f003 fe50 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800114e:	f7ff ffb1 	bl	80010b4 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HAL_I2C_MspInit+0xcc>)
 8001154:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001158:	4a1b      	ldr	r2, [pc, #108]	; (80011c8 <HAL_I2C_MspInit+0xcc>)
 800115a:	f043 0308 	orr.w	r3, r3, #8
 800115e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_I2C_MspInit+0xcc>)
 8001164:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8001170:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001174:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001178:	2312      	movs	r3, #18
 800117a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117e:	2301      	movs	r3, #1
 8001180:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800118a:	2304      	movs	r3, #4
 800118c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001190:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001194:	4619      	mov	r1, r3
 8001196:	480d      	ldr	r0, [pc, #52]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 8001198:	f000 fea8 	bl	8001eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_I2C_MspInit+0xcc>)
 800119e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011a2:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <HAL_I2C_MspInit+0xcc>)
 80011a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_I2C_MspInit+0xcc>)
 80011ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80011ba:	bf00      	nop
 80011bc:	37e8      	adds	r7, #232	; 0xe8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	58001c00 	.word	0x58001c00
 80011c8:	58024400 	.word	0x58024400
 80011cc:	58020c00 	.word	0x58020c00

080011d0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0bc      	sub	sp, #240	; 0xf0
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	22c0      	movs	r2, #192	; 0xc0
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00a ffab 	bl	800c14c <memset>
  if(hi2s->Instance==SPI6)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a39      	ldr	r2, [pc, #228]	; (80012e0 <HAL_I2S_MspInit+0x110>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d16a      	bne.n	80012d6 <HAL_I2S_MspInit+0x106>

  /* USER CODE END SPI6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8001200:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001204:	f04f 0300 	mov.w	r3, #0
 8001208:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001212:	f107 0318 	add.w	r3, r7, #24
 8001216:	4618      	mov	r0, r3
 8001218:	f003 fde6 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8001222:	f7ff ff47 	bl	80010b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <HAL_I2S_MspInit+0x114>)
 8001228:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800122c:	4a2d      	ldr	r2, [pc, #180]	; (80012e4 <HAL_I2S_MspInit+0x114>)
 800122e:	f043 0320 	orr.w	r3, r3, #32
 8001232:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001236:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <HAL_I2S_MspInit+0x114>)
 8001238:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800123c:	f003 0320 	and.w	r3, r3, #32
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <HAL_I2S_MspInit+0x114>)
 8001246:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800124a:	4a26      	ldr	r2, [pc, #152]	; (80012e4 <HAL_I2S_MspInit+0x114>)
 800124c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001250:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <HAL_I2S_MspInit+0x114>)
 8001256:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800125a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <HAL_I2S_MspInit+0x114>)
 8001264:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001268:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <HAL_I2S_MspInit+0x114>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_I2S_MspInit+0x114>)
 8001274:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> I2S6_SDI
    PG13     ------> I2S6_CK
    PA0     ------> I2S6_WS
    PA3     ------> I2S6_MCK
    */
    GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8001280:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001284:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800129a:	2305      	movs	r3, #5
 800129c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012a4:	4619      	mov	r1, r3
 80012a6:	4810      	ldr	r0, [pc, #64]	; (80012e8 <HAL_I2S_MspInit+0x118>)
 80012a8:	f000 fe20 	bl	8001eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 80012ac:	2309      	movs	r3, #9
 80012ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80012c4:	2305      	movs	r3, #5
 80012c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ce:	4619      	mov	r1, r3
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <HAL_I2S_MspInit+0x11c>)
 80012d2:	f000 fe0b 	bl	8001eec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 80012d6:	bf00      	nop
 80012d8:	37f0      	adds	r7, #240	; 0xf0
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	58001400 	.word	0x58001400
 80012e4:	58024400 	.word	0x58024400
 80012e8:	58021800 	.word	0x58021800
 80012ec:	58020000 	.word	0x58020000

080012f0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0bc      	sub	sp, #240	; 0xf0
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001308:	f107 0318 	add.w	r3, r7, #24
 800130c:	22c0      	movs	r2, #192	; 0xc0
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f00a ff1b 	bl	800c14c <memset>
  if(hltdc->Instance==LTDC)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a56      	ldr	r2, [pc, #344]	; (8001474 <HAL_LTDC_MspInit+0x184>)
 800131c:	4293      	cmp	r3, r2
 800131e:	f040 80a5 	bne.w	800146c <HAL_LTDC_MspInit+0x17c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001322:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 800132e:	2318      	movs	r3, #24
 8001330:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001332:	23c0      	movs	r3, #192	; 0xc0
 8001334:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 8001336:	2311      	movs	r3, #17
 8001338:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800133a:	2302      	movs	r3, #2
 800133c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 20;
 800133e:	2314      	movs	r3, #20
 8001340:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001342:	2300      	movs	r3, #0
 8001344:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001346:	2300      	movs	r3, #0
 8001348:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134e:	f107 0318 	add.w	r3, r7, #24
 8001352:	4618      	mov	r0, r3
 8001354:	f003 fd48 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_LTDC_MspInit+0x72>
    {
      Error_Handler();
 800135e:	f7ff fea9 	bl	80010b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001362:	4b45      	ldr	r3, [pc, #276]	; (8001478 <HAL_LTDC_MspInit+0x188>)
 8001364:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001368:	4a43      	ldr	r2, [pc, #268]	; (8001478 <HAL_LTDC_MspInit+0x188>)
 800136a:	f043 0308 	orr.w	r3, r3, #8
 800136e:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8001372:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_LTDC_MspInit+0x188>)
 8001374:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001380:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <HAL_LTDC_MspInit+0x188>)
 8001382:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001386:	4a3c      	ldr	r2, [pc, #240]	; (8001478 <HAL_LTDC_MspInit+0x188>)
 8001388:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001390:	4b39      	ldr	r3, [pc, #228]	; (8001478 <HAL_LTDC_MspInit+0x188>)
 8001392:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800139e:	4b36      	ldr	r3, [pc, #216]	; (8001478 <HAL_LTDC_MspInit+0x188>)
 80013a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013a4:	4a34      	ldr	r2, [pc, #208]	; (8001478 <HAL_LTDC_MspInit+0x188>)
 80013a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013ae:	4b32      	ldr	r3, [pc, #200]	; (8001478 <HAL_LTDC_MspInit+0x188>)
 80013b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80013bc:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <HAL_LTDC_MspInit+0x188>)
 80013be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013c2:	4a2d      	ldr	r2, [pc, #180]	; (8001478 <HAL_LTDC_MspInit+0x188>)
 80013c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013cc:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <HAL_LTDC_MspInit+0x188>)
 80013ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 80013da:	23ff      	movs	r3, #255	; 0xff
 80013dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013f2:	230e      	movs	r3, #14
 80013f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80013f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013fc:	4619      	mov	r1, r3
 80013fe:	481f      	ldr	r0, [pc, #124]	; (800147c <HAL_LTDC_MspInit+0x18c>)
 8001400:	f000 fd74 	bl	8001eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 8001404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001408:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800141e:	230e      	movs	r3, #14
 8001420:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001424:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001428:	4619      	mov	r1, r3
 800142a:	4815      	ldr	r0, [pc, #84]	; (8001480 <HAL_LTDC_MspInit+0x190>)
 800142c:	f000 fd5e 	bl	8001eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 8001430:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001434:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800144a:	230e      	movs	r3, #14
 800144c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001450:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001454:	4619      	mov	r1, r3
 8001456:	480b      	ldr	r0, [pc, #44]	; (8001484 <HAL_LTDC_MspInit+0x194>)
 8001458:	f000 fd48 	bl	8001eec <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2105      	movs	r1, #5
 8001460:	2058      	movs	r0, #88	; 0x58
 8001462:	f000 fd1b 	bl	8001e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001466:	2058      	movs	r0, #88	; 0x58
 8001468:	f000 fd32 	bl	8001ed0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800146c:	bf00      	nop
 800146e:	37f0      	adds	r7, #240	; 0xf0
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	50001000 	.word	0x50001000
 8001478:	58024400 	.word	0x58024400
 800147c:	58022800 	.word	0x58022800
 8001480:	58022400 	.word	0x58022400
 8001484:	58022000 	.word	0x58022000

08001488 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	; 0x38
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a68      	ldr	r2, [pc, #416]	; (8001648 <HAL_OSPI_MspInit+0x1c0>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	f040 80ca 	bne.w	8001640 <HAL_OSPI_MspInit+0x1b8>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80014ac:	4b67      	ldr	r3, [pc, #412]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 80014ae:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80014b2:	4a66      	ldr	r2, [pc, #408]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 80014b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80014bc:	4b63      	ldr	r3, [pc, #396]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 80014be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80014c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c6:	623b      	str	r3, [r7, #32]
 80014c8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80014ca:	4b60      	ldr	r3, [pc, #384]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 80014cc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80014d0:	4a5e      	ldr	r2, [pc, #376]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 80014d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80014da:	4b5c      	ldr	r3, [pc, #368]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 80014dc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80014e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014e8:	4b58      	ldr	r3, [pc, #352]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 80014ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014ee:	4a57      	ldr	r2, [pc, #348]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 80014f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014f4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014f8:	4b54      	ldr	r3, [pc, #336]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 80014fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	4b51      	ldr	r3, [pc, #324]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 8001508:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800150c:	4a4f      	ldr	r2, [pc, #316]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 800150e:	f043 0308 	orr.w	r3, r3, #8
 8001512:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001516:	4b4d      	ldr	r3, [pc, #308]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 8001518:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	4b49      	ldr	r3, [pc, #292]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 8001526:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800152a:	4a48      	ldr	r2, [pc, #288]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001534:	4b45      	ldr	r3, [pc, #276]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 8001536:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	4b42      	ldr	r3, [pc, #264]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 8001544:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001548:	4a40      	ldr	r2, [pc, #256]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 800154a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001552:	4b3e      	ldr	r3, [pc, #248]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 8001554:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001560:	4b3a      	ldr	r3, [pc, #232]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 8001562:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001566:	4a39      	ldr	r2, [pc, #228]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001570:	4b36      	ldr	r3, [pc, #216]	; (800164c <HAL_OSPI_MspInit+0x1c4>)
 8001572:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> OCTOSPIM_P1_IO4
    PH3     ------> OCTOSPIM_P1_IO5
    PC5     ------> OCTOSPIM_P1_DQS
    PB2     ------> OCTOSPIM_P1_CLK
    */
    GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 800157e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001590:	2309      	movs	r3, #9
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	4619      	mov	r1, r3
 800159a:	482d      	ldr	r0, [pc, #180]	; (8001650 <HAL_OSPI_MspInit+0x1c8>)
 800159c:	f000 fca6 	bl	8001eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80015b0:	230a      	movs	r3, #10
 80015b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	4826      	ldr	r0, [pc, #152]	; (8001654 <HAL_OSPI_MspInit+0x1cc>)
 80015bc:	f000 fc96 	bl	8001eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 80015c0:	2340      	movs	r3, #64	; 0x40
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80015d0:	230a      	movs	r3, #10
 80015d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	481d      	ldr	r0, [pc, #116]	; (8001650 <HAL_OSPI_MspInit+0x1c8>)
 80015dc:	f000 fc86 	bl	8001eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 80015e0:	2322      	movs	r3, #34	; 0x22
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80015f0:	230a      	movs	r3, #10
 80015f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	4619      	mov	r1, r3
 80015fa:	4817      	ldr	r0, [pc, #92]	; (8001658 <HAL_OSPI_MspInit+0x1d0>)
 80015fc:	f000 fc76 	bl	8001eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8001600:	2308      	movs	r3, #8
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160c:	2303      	movs	r3, #3
 800160e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001610:	2309      	movs	r3, #9
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8001614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001618:	4619      	mov	r1, r3
 800161a:	4810      	ldr	r0, [pc, #64]	; (800165c <HAL_OSPI_MspInit+0x1d4>)
 800161c:	f000 fc66 	bl	8001eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8001620:	2304      	movs	r3, #4
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001630:	2309      	movs	r3, #9
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	4619      	mov	r1, r3
 800163a:	4809      	ldr	r0, [pc, #36]	; (8001660 <HAL_OSPI_MspInit+0x1d8>)
 800163c:	f000 fc56 	bl	8001eec <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	3738      	adds	r7, #56	; 0x38
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	52005000 	.word	0x52005000
 800164c:	58024400 	.word	0x58024400
 8001650:	58021800 	.word	0x58021800
 8001654:	58020c00 	.word	0x58020c00
 8001658:	58020800 	.word	0x58020800
 800165c:	58021c00 	.word	0x58021c00
 8001660:	58020400 	.word	0x58020400

08001664 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b0b2      	sub	sp, #200	; 0xc8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	22c0      	movs	r2, #192	; 0xc0
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f00a fd69 	bl	800c14c <memset>
  if(hrtc->Instance==RTC)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <HAL_RTC_MspInit+0x5c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d119      	bne.n	80016b8 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001684:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001694:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	4618      	mov	r0, r3
 800169e:	f003 fba3 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80016a8:	f7ff fd04 	bl	80010b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_RTC_MspInit+0x60>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <HAL_RTC_MspInit+0x60>)
 80016b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b6:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016b8:	bf00      	nop
 80016ba:	37c8      	adds	r7, #200	; 0xc8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	58004000 	.word	0x58004000
 80016c4:	58024400 	.word	0x58024400

080016c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0bc      	sub	sp, #240	; 0xf0
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e0:	f107 0318 	add.w	r3, r7, #24
 80016e4:	22c0      	movs	r2, #192	; 0xc0
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f00a fd2f 	bl	800c14c <memset>
  if(hspi->Instance==SPI2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a39      	ldr	r2, [pc, #228]	; (80017d8 <HAL_SPI_MspInit+0x110>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d16a      	bne.n	80017ce <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80016f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001704:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001708:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800170a:	f107 0318 	add.w	r3, r7, #24
 800170e:	4618      	mov	r0, r3
 8001710:	f003 fb6a 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800171a:	f7ff fccb 	bl	80010b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800171e:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <HAL_SPI_MspInit+0x114>)
 8001720:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001724:	4a2d      	ldr	r2, [pc, #180]	; (80017dc <HAL_SPI_MspInit+0x114>)
 8001726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800172e:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_SPI_MspInit+0x114>)
 8001730:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_SPI_MspInit+0x114>)
 800173e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001742:	4a26      	ldr	r2, [pc, #152]	; (80017dc <HAL_SPI_MspInit+0x114>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800174c:	4b23      	ldr	r3, [pc, #140]	; (80017dc <HAL_SPI_MspInit+0x114>)
 800174e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <HAL_SPI_MspInit+0x114>)
 800175c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001760:	4a1e      	ldr	r2, [pc, #120]	; (80017dc <HAL_SPI_MspInit+0x114>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_SPI_MspInit+0x114>)
 800176c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA12     ------> SPI2_SCK
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8001778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001792:	2305      	movs	r3, #5
 8001794:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800179c:	4619      	mov	r1, r3
 800179e:	4810      	ldr	r0, [pc, #64]	; (80017e0 <HAL_SPI_MspInit+0x118>)
 80017a0:	f000 fba4 	bl	8001eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 80017a4:	230c      	movs	r3, #12
 80017a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017bc:	2305      	movs	r3, #5
 80017be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017c6:	4619      	mov	r1, r3
 80017c8:	4806      	ldr	r0, [pc, #24]	; (80017e4 <HAL_SPI_MspInit+0x11c>)
 80017ca:	f000 fb8f 	bl	8001eec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017ce:	bf00      	nop
 80017d0:	37f0      	adds	r7, #240	; 0xf0
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40003800 	.word	0x40003800
 80017dc:	58024400 	.word	0x58024400
 80017e0:	58020000 	.word	0x58020000
 80017e4:	58020800 	.word	0x58020800

080017e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0ba      	sub	sp, #232	; 0xe8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	22c0      	movs	r2, #192	; 0xc0
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f00a fc9f 	bl	800c14c <memset>
  if(huart->Instance==USART1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a27      	ldr	r2, [pc, #156]	; (80018b0 <HAL_UART_MspInit+0xc8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d146      	bne.n	80018a6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001818:	f04f 0201 	mov.w	r2, #1
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001824:	2300      	movs	r3, #0
 8001826:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800182a:	f107 0310 	add.w	r3, r7, #16
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fada 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800183a:	f7ff fc3b 	bl	80010b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800183e:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <HAL_UART_MspInit+0xcc>)
 8001840:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001844:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <HAL_UART_MspInit+0xcc>)
 8001846:	f043 0310 	orr.w	r3, r3, #16
 800184a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_UART_MspInit+0xcc>)
 8001850:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_UART_MspInit+0xcc>)
 800185e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001862:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <HAL_UART_MspInit+0xcc>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_UART_MspInit+0xcc>)
 800186e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800187a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800187e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001894:	2307      	movs	r3, #7
 8001896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <HAL_UART_MspInit+0xd0>)
 80018a2:	f000 fb23 	bl	8001eec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018a6:	bf00      	nop
 80018a8:	37e8      	adds	r7, #232	; 0xe8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40011000 	.word	0x40011000
 80018b4:	58024400 	.word	0x58024400
 80018b8:	58020000 	.word	0x58020000

080018bc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80018d0:	4b34      	ldr	r3, [pc, #208]	; (80019a4 <HAL_FMC_MspInit+0xe8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d161      	bne.n	800199c <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 80018d8:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <HAL_FMC_MspInit+0xe8>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80018de:	4b32      	ldr	r3, [pc, #200]	; (80019a8 <HAL_FMC_MspInit+0xec>)
 80018e0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80018e4:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <HAL_FMC_MspInit+0xec>)
 80018e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018ea:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_FMC_MspInit+0xec>)
 80018f0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80018f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]
  PG0   ------> FMC_A10
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 80018fc:	f248 1333 	movw	r3, #33075	; 0x8133
 8001900:	607b      	str	r3, [r7, #4]
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800190e:	230c      	movs	r3, #12
 8001910:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4619      	mov	r1, r3
 8001916:	4825      	ldr	r0, [pc, #148]	; (80019ac <HAL_FMC_MspInit+0xf0>)
 8001918:	f000 fae8 	bl	8001eec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 800191c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001920:	607b      	str	r3, [r7, #4]
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800192e:	230c      	movs	r3, #12
 8001930:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	4619      	mov	r1, r3
 8001936:	481e      	ldr	r0, [pc, #120]	; (80019b0 <HAL_FMC_MspInit+0xf4>)
 8001938:	f000 fad8 	bl	8001eec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 800193c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001940:	607b      	str	r3, [r7, #4]
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800194e:	230c      	movs	r3, #12
 8001950:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	4619      	mov	r1, r3
 8001956:	4817      	ldr	r0, [pc, #92]	; (80019b4 <HAL_FMC_MspInit+0xf8>)
 8001958:	f000 fac8 	bl	8001eec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 800195c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001960:	607b      	str	r3, [r7, #4]
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800196e:	230c      	movs	r3, #12
 8001970:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4810      	ldr	r0, [pc, #64]	; (80019b8 <HAL_FMC_MspInit+0xfc>)
 8001978:	f000 fab8 	bl	8001eec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 800197c:	23e0      	movs	r3, #224	; 0xe0
 800197e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800198c:	230c      	movs	r3, #12
 800198e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4619      	mov	r1, r3
 8001994:	4809      	ldr	r0, [pc, #36]	; (80019bc <HAL_FMC_MspInit+0x100>)
 8001996:	f000 faa9 	bl	8001eec <HAL_GPIO_Init>
 800199a:	e000      	b.n	800199e <HAL_FMC_MspInit+0xe2>
    return;
 800199c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	2403ff58 	.word	0x2403ff58
 80019a8:	58024400 	.word	0x58024400
 80019ac:	58021800 	.word	0x58021800
 80019b0:	58020c00 	.word	0x58020c00
 80019b4:	58021000 	.word	0x58021000
 80019b8:	58021400 	.word	0x58021400
 80019bc:	58021c00 	.word	0x58021c00

080019c0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80019c8:	f7ff ff78 	bl	80018bc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b090      	sub	sp, #64	; 0x40
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b0f      	cmp	r3, #15
 80019e0:	d827      	bhi.n	8001a32 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80019e2:	2200      	movs	r2, #0
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	2036      	movs	r0, #54	; 0x36
 80019e8:	f000 fa58 	bl	8001e9c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019ec:	2036      	movs	r0, #54	; 0x36
 80019ee:	f000 fa6f 	bl	8001ed0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80019f2:	4a29      	ldr	r2, [pc, #164]	; (8001a98 <HAL_InitTick+0xc4>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <HAL_InitTick+0xc8>)
 80019fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80019fe:	4a27      	ldr	r2, [pc, #156]	; (8001a9c <HAL_InitTick+0xc8>)
 8001a00:	f043 0310 	orr.w	r3, r3, #16
 8001a04:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_InitTick+0xc8>)
 8001a0a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a16:	f107 0210 	add.w	r2, r7, #16
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 f99f 	bl	8004d64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a28:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d106      	bne.n	8001a3e <HAL_InitTick+0x6a>
 8001a30:	e001      	b.n	8001a36 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e02b      	b.n	8001a8e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a36:	f003 f969 	bl	8004d0c <HAL_RCC_GetPCLK1Freq>
 8001a3a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001a3c:	e004      	b.n	8001a48 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a3e:	f003 f965 	bl	8004d0c <HAL_RCC_GetPCLK1Freq>
 8001a42:	4603      	mov	r3, r0
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a4a:	4a15      	ldr	r2, [pc, #84]	; (8001aa0 <HAL_InitTick+0xcc>)
 8001a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a50:	0c9b      	lsrs	r3, r3, #18
 8001a52:	3b01      	subs	r3, #1
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_InitTick+0xd0>)
 8001a58:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <HAL_InitTick+0xd4>)
 8001a5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_InitTick+0xd0>)
 8001a5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a62:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a64:	4a0f      	ldr	r2, [pc, #60]	; (8001aa4 <HAL_InitTick+0xd0>)
 8001a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a68:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_InitTick+0xd0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_InitTick+0xd0>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a76:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <HAL_InitTick+0xd0>)
 8001a78:	f006 f859 	bl	8007b2e <HAL_TIM_Base_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d104      	bne.n	8001a8c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001a82:	4808      	ldr	r0, [pc, #32]	; (8001aa4 <HAL_InitTick+0xd0>)
 8001a84:	f006 f8b4 	bl	8007bf0 <HAL_TIM_Base_Start_IT>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	e000      	b.n	8001a8e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3740      	adds	r7, #64	; 0x40
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	24000008 	.word	0x24000008
 8001a9c:	58024400 	.word	0x58024400
 8001aa0:	431bde83 	.word	0x431bde83
 8001aa4:	2403ff5c 	.word	0x2403ff5c
 8001aa8:	40001000 	.word	0x40001000

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <MemManage_Handler+0x4>

08001abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <TIM6_DAC_IRQHandler+0x10>)
 8001ade:	f006 f8ff 	bl	8007ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2403ff5c 	.word	0x2403ff5c

08001aec <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */
	 int now = HAL_GetTick();
 8001af2:	f000 f90f 	bl	8001d14 <HAL_GetTick>
 8001af6:	4603      	mov	r3, r0
 8001af8:	607b      	str	r3, [r7, #4]
	  diff = now - last;
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <LTDC_IRQHandler+0x38>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <LTDC_IRQHandler+0x3c>)
 8001b04:	6013      	str	r3, [r2, #0]
	  last = now;
 8001b06:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <LTDC_IRQHandler+0x38>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6013      	str	r3, [r2, #0]
  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001b0c:	4807      	ldr	r0, [pc, #28]	; (8001b2c <LTDC_IRQHandler+0x40>)
 8001b0e:	f000 fef9 	bl	8002904 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */
  HAL_LTDC_ProgramLineEvent(&hltdc,0);
 8001b12:	2100      	movs	r1, #0
 8001b14:	4805      	ldr	r0, [pc, #20]	; (8001b2c <LTDC_IRQHandler+0x40>)
 8001b16:	f001 f82b 	bl	8002b70 <HAL_LTDC_ProgramLineEvent>
  /* USER CODE END LTDC_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2403ffa8 	.word	0x2403ffa8
 8001b28:	2403ffac 	.word	0x2403ffac
 8001b2c:	240000d8 	.word	0x240000d8

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b34:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <SystemInit+0xd0>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a31      	ldr	r2, [pc, #196]	; (8001c00 <SystemInit+0xd0>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b44:	4b2f      	ldr	r3, [pc, #188]	; (8001c04 <SystemInit+0xd4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d807      	bhi.n	8001b60 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b50:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <SystemInit+0xd4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 030f 	bic.w	r3, r3, #15
 8001b58:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <SystemInit+0xd4>)
 8001b5a:	f043 0303 	orr.w	r3, r3, #3
 8001b5e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <SystemInit+0xd8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a28      	ldr	r2, [pc, #160]	; (8001c08 <SystemInit+0xd8>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b6c:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <SystemInit+0xd8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b72:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <SystemInit+0xd8>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4924      	ldr	r1, [pc, #144]	; (8001c08 <SystemInit+0xd8>)
 8001b78:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <SystemInit+0xdc>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <SystemInit+0xd4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <SystemInit+0xd4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 030f 	bic.w	r3, r3, #15
 8001b92:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <SystemInit+0xd4>)
 8001b94:	f043 0303 	orr.w	r3, r3, #3
 8001b98:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <SystemInit+0xd8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <SystemInit+0xd8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <SystemInit+0xd8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <SystemInit+0xd8>)
 8001bae:	4a18      	ldr	r2, [pc, #96]	; (8001c10 <SystemInit+0xe0>)
 8001bb0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <SystemInit+0xd8>)
 8001bb4:	4a17      	ldr	r2, [pc, #92]	; (8001c14 <SystemInit+0xe4>)
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <SystemInit+0xd8>)
 8001bba:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <SystemInit+0xe8>)
 8001bbc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <SystemInit+0xd8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <SystemInit+0xd8>)
 8001bc6:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <SystemInit+0xe8>)
 8001bc8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <SystemInit+0xd8>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <SystemInit+0xd8>)
 8001bd2:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <SystemInit+0xe8>)
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <SystemInit+0xd8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <SystemInit+0xd8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <SystemInit+0xd8>)
 8001be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <SystemInit+0xd8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <SystemInit+0xec>)
 8001bf0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001bf4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00
 8001c04:	52002000 	.word	0x52002000
 8001c08:	58024400 	.word	0x58024400
 8001c0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c10:	02020200 	.word	0x02020200
 8001c14:	01ff0000 	.word	0x01ff0000
 8001c18:	01010280 	.word	0x01010280
 8001c1c:	52004000 	.word	0x52004000

08001c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c24:	f7ff ff84 	bl	8001b30 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c2a:	490d      	ldr	r1, [pc, #52]	; (8001c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c40:	4c0a      	ldr	r4, [pc, #40]	; (8001c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c4e:	f00a fa85 	bl	800c15c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c52:	f7fe fccb 	bl	80005ec <main>
  bx  lr
 8001c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c58:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001c5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c60:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001c64:	0800c268 	.word	0x0800c268
  ldr r2, =_sbss
 8001c68:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001c6c:	24044904 	.word	0x24044904

08001c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC_IRQHandler>
	...

08001c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7a:	2003      	movs	r0, #3
 8001c7c:	f000 f903 	bl	8001e86 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c80:	f002 fe9a 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_Init+0x68>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	4913      	ldr	r1, [pc, #76]	; (8001ce0 <HAL_Init+0x6c>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_Init+0x68>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <HAL_Init+0x6c>)
 8001ca8:	5cd3      	ldrb	r3, [r2, r3]
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <HAL_Init+0x70>)
 8001cb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <HAL_Init+0x74>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cbe:	200f      	movs	r0, #15
 8001cc0:	f7ff fe88 	bl	80019d4 <HAL_InitTick>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e002      	b.n	8001cd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cce:	f7ff f9f7 	bl	80010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	58024400 	.word	0x58024400
 8001ce0:	0800c220 	.word	0x0800c220
 8001ce4:	24000004 	.word	0x24000004
 8001ce8:	24000000 	.word	0x24000000

08001cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_IncTick+0x20>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_IncTick+0x24>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <HAL_IncTick+0x24>)
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	2400000c 	.word	0x2400000c
 8001d10:	2403ffb0 	.word	0x2403ffb0

08001d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return uwTick;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <HAL_GetTick+0x14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	2403ffb0 	.word	0x2403ffb0

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <__NVIC_SetPriorityGrouping+0x40>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <__NVIC_SetPriorityGrouping+0x40>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00
 8001d70:	05fa0000 	.word	0x05fa0000

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db0b      	blt.n	8001dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4907      	ldr	r1, [pc, #28]	; (8001dc8 <__NVIC_EnableIRQ+0x38>)
 8001daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2001      	movs	r0, #1
 8001db2:	fa00 f202 	lsl.w	r2, r0, r2
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	; (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	; (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ff4c 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eaa:	f7ff ff63 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001eae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	6978      	ldr	r0, [r7, #20]
 8001eb6:	f7ff ffb3 	bl	8001e20 <NVIC_EncodePriority>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff82 	bl	8001dcc <__NVIC_SetPriority>
}
 8001ec8:	bf00      	nop
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ff56 	bl	8001d90 <__NVIC_EnableIRQ>
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001efa:	4b89      	ldr	r3, [pc, #548]	; (8002120 <HAL_GPIO_Init+0x234>)
 8001efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001efe:	e194      	b.n	800222a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2101      	movs	r1, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8186 	beq.w	8002224 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d005      	beq.n	8001f30 <HAL_GPIO_Init+0x44>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d130      	bne.n	8001f92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f66:	2201      	movs	r2, #1
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	091b      	lsrs	r3, r3, #4
 8001f7c:	f003 0201 	and.w	r2, r3, #1
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d017      	beq.n	8001fce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d123      	bne.n	8002022 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	08da      	lsrs	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3208      	adds	r2, #8
 8001fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	08da      	lsrs	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3208      	adds	r2, #8
 800201c:	69b9      	ldr	r1, [r7, #24]
 800201e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0203 	and.w	r2, r3, #3
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80e0 	beq.w	8002224 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002064:	4b2f      	ldr	r3, [pc, #188]	; (8002124 <HAL_GPIO_Init+0x238>)
 8002066:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800206a:	4a2e      	ldr	r2, [pc, #184]	; (8002124 <HAL_GPIO_Init+0x238>)
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002074:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <HAL_GPIO_Init+0x238>)
 8002076:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002082:	4a29      	ldr	r2, [pc, #164]	; (8002128 <HAL_GPIO_Init+0x23c>)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	220f      	movs	r2, #15
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a20      	ldr	r2, [pc, #128]	; (800212c <HAL_GPIO_Init+0x240>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d052      	beq.n	8002154 <HAL_GPIO_Init+0x268>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <HAL_GPIO_Init+0x244>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d031      	beq.n	800211a <HAL_GPIO_Init+0x22e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <HAL_GPIO_Init+0x248>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d02b      	beq.n	8002116 <HAL_GPIO_Init+0x22a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <HAL_GPIO_Init+0x24c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d025      	beq.n	8002112 <HAL_GPIO_Init+0x226>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a1c      	ldr	r2, [pc, #112]	; (800213c <HAL_GPIO_Init+0x250>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d01f      	beq.n	800210e <HAL_GPIO_Init+0x222>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a1b      	ldr	r2, [pc, #108]	; (8002140 <HAL_GPIO_Init+0x254>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d019      	beq.n	800210a <HAL_GPIO_Init+0x21e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a1a      	ldr	r2, [pc, #104]	; (8002144 <HAL_GPIO_Init+0x258>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d013      	beq.n	8002106 <HAL_GPIO_Init+0x21a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a19      	ldr	r2, [pc, #100]	; (8002148 <HAL_GPIO_Init+0x25c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00d      	beq.n	8002102 <HAL_GPIO_Init+0x216>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a18      	ldr	r2, [pc, #96]	; (800214c <HAL_GPIO_Init+0x260>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d007      	beq.n	80020fe <HAL_GPIO_Init+0x212>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a17      	ldr	r2, [pc, #92]	; (8002150 <HAL_GPIO_Init+0x264>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d101      	bne.n	80020fa <HAL_GPIO_Init+0x20e>
 80020f6:	2309      	movs	r3, #9
 80020f8:	e02d      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 80020fa:	230a      	movs	r3, #10
 80020fc:	e02b      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 80020fe:	2308      	movs	r3, #8
 8002100:	e029      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 8002102:	2307      	movs	r3, #7
 8002104:	e027      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 8002106:	2306      	movs	r3, #6
 8002108:	e025      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 800210a:	2305      	movs	r3, #5
 800210c:	e023      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 800210e:	2304      	movs	r3, #4
 8002110:	e021      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 8002112:	2303      	movs	r3, #3
 8002114:	e01f      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 8002116:	2302      	movs	r3, #2
 8002118:	e01d      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 800211a:	2301      	movs	r3, #1
 800211c:	e01b      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 800211e:	bf00      	nop
 8002120:	58000080 	.word	0x58000080
 8002124:	58024400 	.word	0x58024400
 8002128:	58000400 	.word	0x58000400
 800212c:	58020000 	.word	0x58020000
 8002130:	58020400 	.word	0x58020400
 8002134:	58020800 	.word	0x58020800
 8002138:	58020c00 	.word	0x58020c00
 800213c:	58021000 	.word	0x58021000
 8002140:	58021400 	.word	0x58021400
 8002144:	58021800 	.word	0x58021800
 8002148:	58021c00 	.word	0x58021c00
 800214c:	58022000 	.word	0x58022000
 8002150:	58022400 	.word	0x58022400
 8002154:	2300      	movs	r3, #0
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	f002 0203 	and.w	r2, r2, #3
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	4093      	lsls	r3, r2
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002166:	4938      	ldr	r1, [pc, #224]	; (8002248 <HAL_GPIO_Init+0x35c>)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800219a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	3301      	adds	r3, #1
 8002228:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	f47f ae63 	bne.w	8001f00 <HAL_GPIO_Init+0x14>
  }
}
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	3724      	adds	r7, #36	; 0x24
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	58000400 	.word	0x58000400

0800224c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]
 8002258:	4613      	mov	r3, r2
 800225a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800225c:	787b      	ldrb	r3, [r7, #1]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002262:	887a      	ldrh	r2, [r7, #2]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002268:	e003      	b.n	8002272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800226a:	887b      	ldrh	r3, [r7, #2]
 800226c:	041a      	lsls	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	619a      	str	r2, [r3, #24]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	460b      	mov	r3, r1
 8002288:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002290:	887a      	ldrh	r2, [r7, #2]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4013      	ands	r3, r2
 8002296:	041a      	lsls	r2, r3, #16
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43d9      	mvns	r1, r3
 800229c:	887b      	ldrh	r3, [r7, #2]
 800229e:	400b      	ands	r3, r1
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	619a      	str	r2, [r3, #24]
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e07f      	b.n	80023c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe ff0e 	bl	80010fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2224      	movs	r2, #36	; 0x24
 80022e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002304:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002314:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d107      	bne.n	800232e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	e006      	b.n	800233c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800233a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d104      	bne.n	800234e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800234c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_I2C_Init+0x11c>)
 800235a:	430b      	orrs	r3, r1
 800235c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800236c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69d9      	ldr	r1, [r3, #28]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1a      	ldr	r2, [r3, #32]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2220      	movs	r2, #32
 80023b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	02008000 	.word	0x02008000

080023d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	d138      	bne.n	800245c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e032      	b.n	800245e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	; 0x24
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002426:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	e000      	b.n	800245e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800245c:	2302      	movs	r3, #2
  }
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800246a:	b480      	push	{r7}
 800246c:	b085      	sub	sp, #20
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b20      	cmp	r3, #32
 800247e:	d139      	bne.n	80024f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800248a:	2302      	movs	r3, #2
 800248c:	e033      	b.n	80024f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2224      	movs	r2, #36	; 0x24
 800249a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0201 	bic.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e000      	b.n	80024f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
  }
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e11a      	b.n	800274c <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fe50 	bl	80011d0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d107      	bne.n	8002556 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2200      	movs	r2, #0
 800255c:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b04      	cmp	r3, #4
 8002564:	d008      	beq.n	8002578 <HAL_I2S_Init+0x74>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b06      	cmp	r3, #6
 800256c:	d004      	beq.n	8002578 <HAL_I2S_Init+0x74>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b0a      	cmp	r3, #10
 8002574:	f040 8094 	bne.w	80026a0 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d067      	beq.n	8002650 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8002588:	2302      	movs	r3, #2
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	e001      	b.n	8002592 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 800258e:	2301      	movs	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b30      	cmp	r3, #48	; 0x30
 8002598:	d003      	beq.n	80025a2 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800259e:	2bb0      	cmp	r3, #176	; 0xb0
 80025a0:	d102      	bne.n	80025a8 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 80025a2:	2301      	movs	r3, #1
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	e001      	b.n	80025ac <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a68      	ldr	r2, [pc, #416]	; (8002754 <HAL_I2S_Init+0x250>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d107      	bne.n	80025c6 <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 80025b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025ba:	f04f 0100 	mov.w	r1, #0
 80025be:	f003 fdd1 	bl	8006164 <HAL_RCCEx_GetPeriphCLKFreq>
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	e006      	b.n	80025d4 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80025c6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80025ca:	f04f 0100 	mov.w	r1, #0
 80025ce:	f003 fdc9 	bl	8006164 <HAL_RCCEx_GetPeriphCLKFreq>
 80025d2:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025dc:	d113      	bne.n	8002606 <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80025de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	461a      	mov	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	3305      	adds	r3, #5
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	e014      	b.n	8002630 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002606:	2220      	movs	r2, #32
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	fb02 f303 	mul.w	r3, r2, r3
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	fbb2 f2f3 	udiv	r2, r2, r3
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	461a      	mov	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	3305      	adds	r3, #5
 800262e:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4a49      	ldr	r2, [pc, #292]	; (8002758 <HAL_I2S_Init+0x254>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	08db      	lsrs	r3, r3, #3
 800263a:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	085b      	lsrs	r3, r3, #1
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	e003      	b.n	8002658 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8002650:	2302      	movs	r3, #2
 8002652:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8002654:	2300      	movs	r3, #0
 8002656:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d102      	bne.n	8002664 <HAL_I2S_Init+0x160>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d002      	beq.n	800266a <HAL_I2S_Init+0x166>
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	2bff      	cmp	r3, #255	; 0xff
 8002668:	d907      	bls.n	800267a <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266e:	f043 0210 	orr.w	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e068      	b.n	800274c <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8002680:	2301      	movs	r3, #1
 8002682:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800268a:	4b34      	ldr	r3, [pc, #208]	; (800275c <HAL_I2S_Init+0x258>)
 800268c:	4013      	ands	r3, r2
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	0411      	lsls	r1, r2, #16
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	0612      	lsls	r2, r2, #24
 8002696:	4311      	orrs	r1, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	430b      	orrs	r3, r1
 800269e:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026a6:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <HAL_I2S_Init+0x25c>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6851      	ldr	r1, [r2, #4]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6892      	ldr	r2, [r2, #8]
 80026b2:	4311      	orrs	r1, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68d2      	ldr	r2, [r2, #12]
 80026b8:	4311      	orrs	r1, r2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6992      	ldr	r2, [r2, #24]
 80026be:	4311      	orrs	r1, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6a12      	ldr	r2, [r2, #32]
 80026c4:	4311      	orrs	r1, r2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ca:	4311      	orrs	r1, r2
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6912      	ldr	r2, [r2, #16]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f640 72f8 	movw	r2, #4088	; 0xff8
 80026e6:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026f6:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b04      	cmp	r3, #4
 8002714:	d007      	beq.n	8002726 <HAL_I2S_Init+0x222>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b06      	cmp	r3, #6
 800271c:	d003      	beq.n	8002726 <HAL_I2S_Init+0x222>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b0a      	cmp	r3, #10
 8002724:	d10a      	bne.n	800273c <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	58001400 	.word	0x58001400
 8002758:	cccccccd 	.word	0xcccccccd
 800275c:	fe00ffff 	.word	0xfe00ffff
 8002760:	fdff9040 	.word	0xfdff9040

08002764 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e0bf      	b.n	80028f6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe fdb0 	bl	80012f0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80027a6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6999      	ldr	r1, [r3, #24]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80027bc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6899      	ldr	r1, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	4b4a      	ldr	r3, [pc, #296]	; (8002900 <HAL_LTDC_Init+0x19c>)
 80027d8:	400b      	ands	r3, r1
 80027da:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6899      	ldr	r1, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699a      	ldr	r2, [r3, #24]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68d9      	ldr	r1, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b3e      	ldr	r3, [pc, #248]	; (8002900 <HAL_LTDC_Init+0x19c>)
 8002806:	400b      	ands	r3, r1
 8002808:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	041b      	lsls	r3, r3, #16
 8002810:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68d9      	ldr	r1, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1a      	ldr	r2, [r3, #32]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6919      	ldr	r1, [r3, #16]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4b33      	ldr	r3, [pc, #204]	; (8002900 <HAL_LTDC_Init+0x19c>)
 8002834:	400b      	ands	r3, r1
 8002836:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	041b      	lsls	r3, r3, #16
 800283e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6919      	ldr	r1, [r3, #16]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6959      	ldr	r1, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b27      	ldr	r3, [pc, #156]	; (8002900 <HAL_LTDC_Init+0x19c>)
 8002862:	400b      	ands	r3, r1
 8002864:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6959      	ldr	r1, [r3, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002894:	041b      	lsls	r3, r3, #16
 8002896:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0206 	orr.w	r2, r2, #6
 80028d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	f000f800 	.word	0xf000f800

08002904 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	d023      	beq.n	800296e <HAL_LTDC_IRQHandler+0x6a>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01e      	beq.n	800296e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0204 	bic.w	r2, r2, #4
 800293e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2204      	movs	r2, #4
 8002946:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800294e:	f043 0201 	orr.w	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2204      	movs	r2, #4
 800295c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f86f 	bl	8002a4c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d023      	beq.n	80029c0 <HAL_LTDC_IRQHandler+0xbc>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d01e      	beq.n	80029c0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0202 	bic.w	r2, r2, #2
 8002990:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2202      	movs	r2, #2
 8002998:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029a0:	f043 0202 	orr.w	r2, r3, #2
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2204      	movs	r2, #4
 80029ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f846 	bl	8002a4c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01b      	beq.n	8002a02 <HAL_LTDC_IRQHandler+0xfe>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d016      	beq.n	8002a02 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2201      	movs	r2, #1
 80029ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f82f 	bl	8002a60 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <HAL_LTDC_IRQHandler+0x140>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d016      	beq.n	8002a44 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0208 	bic.w	r2, r2, #8
 8002a24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f818 	bl	8002a74 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8002a44:	bf00      	nop
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002a88:	b5b0      	push	{r4, r5, r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_LTDC_ConfigLayer+0x1a>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e02c      	b.n	8002afc <HAL_LTDC_ConfigLayer+0x74>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2134      	movs	r1, #52	; 0x34
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4614      	mov	r4, r2
 8002ac6:	461d      	mov	r5, r3
 8002ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad4:	682b      	ldr	r3, [r5, #0]
 8002ad6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f87f 	bl	8002be0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bdb0      	pop	{r4, r5, r7, pc}

08002b04 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_LTDC_SetAddress+0x1a>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e024      	b.n	8002b68 <HAL_LTDC_SetAddress+0x64>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2234      	movs	r2, #52	; 0x34
 8002b32:	fb02 f303 	mul.w	r3, r2, r3
 8002b36:	3338      	adds	r3, #56	; 0x38
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6979      	ldr	r1, [r7, #20]
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f849 	bl	8002be0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2201      	movs	r2, #1
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_LTDC_ProgramLineEvent+0x18>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e023      	b.n	8002bd0 <HAL_LTDC_ProgramLineEvent+0x60>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8002ba8:	4a0c      	ldr	r2, [pc, #48]	; (8002bdc <HAL_LTDC_ProgramLineEvent+0x6c>)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	50001000 	.word	0x50001000

08002be0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	0c1b      	lsrs	r3, r3, #16
 8002bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfc:	4413      	add	r3, r2
 8002bfe:	041b      	lsls	r3, r3, #16
 8002c00:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	01db      	lsls	r3, r3, #7
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3384      	adds	r3, #132	; 0x84
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	4611      	mov	r1, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	01d2      	lsls	r2, r2, #7
 8002c1c:	440a      	add	r2, r1
 8002c1e:	3284      	adds	r2, #132	; 0x84
 8002c20:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002c24:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	0c1b      	lsrs	r3, r3, #16
 8002c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002c36:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002c38:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	01db      	lsls	r3, r3, #7
 8002c44:	440b      	add	r3, r1
 8002c46:	3384      	adds	r3, #132	; 0x84
 8002c48:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002c4e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c5e:	4413      	add	r3, r2
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	01db      	lsls	r3, r3, #7
 8002c6e:	4413      	add	r3, r2
 8002c70:	3384      	adds	r3, #132	; 0x84
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	4611      	mov	r1, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	01d2      	lsls	r2, r2, #7
 8002c7e:	440a      	add	r2, r1
 8002c80:	3284      	adds	r2, #132	; 0x84
 8002c82:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002c86:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c96:	4413      	add	r3, r2
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	01db      	lsls	r3, r3, #7
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3384      	adds	r3, #132	; 0x84
 8002ca8:	4619      	mov	r1, r3
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	01db      	lsls	r3, r3, #7
 8002cba:	4413      	add	r3, r2
 8002cbc:	3384      	adds	r3, #132	; 0x84
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	01d2      	lsls	r2, r2, #7
 8002cca:	440a      	add	r2, r1
 8002ccc:	3284      	adds	r2, #132	; 0x84
 8002cce:	f023 0307 	bic.w	r3, r3, #7
 8002cd2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	01db      	lsls	r3, r3, #7
 8002cde:	4413      	add	r3, r2
 8002ce0:	3384      	adds	r3, #132	; 0x84
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002cfa:	041b      	lsls	r3, r3, #16
 8002cfc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	061b      	lsls	r3, r3, #24
 8002d04:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	01db      	lsls	r3, r3, #7
 8002d10:	4413      	add	r3, r2
 8002d12:	3384      	adds	r3, #132	; 0x84
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	01db      	lsls	r3, r3, #7
 8002d20:	4413      	add	r3, r2
 8002d22:	3384      	adds	r3, #132	; 0x84
 8002d24:	461a      	mov	r2, r3
 8002d26:	2300      	movs	r3, #0
 8002d28:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d30:	461a      	mov	r2, r3
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	01db      	lsls	r3, r3, #7
 8002d44:	440b      	add	r3, r1
 8002d46:	3384      	adds	r3, #132	; 0x84
 8002d48:	4619      	mov	r1, r3
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	01db      	lsls	r3, r3, #7
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3384      	adds	r3, #132	; 0x84
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	4611      	mov	r1, r2
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	01d2      	lsls	r2, r2, #7
 8002d6a:	440a      	add	r2, r1
 8002d6c:	3284      	adds	r2, #132	; 0x84
 8002d6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d72:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	01db      	lsls	r3, r3, #7
 8002d7e:	4413      	add	r3, r2
 8002d80:	3384      	adds	r3, #132	; 0x84
 8002d82:	461a      	mov	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	01db      	lsls	r3, r3, #7
 8002d94:	4413      	add	r3, r2
 8002d96:	3384      	adds	r3, #132	; 0x84
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	01db      	lsls	r3, r3, #7
 8002da4:	440b      	add	r3, r1
 8002da6:	3384      	adds	r3, #132	; 0x84
 8002da8:	4619      	mov	r1, r3
 8002daa:	4b58      	ldr	r3, [pc, #352]	; (8002f0c <LTDC_SetConfig+0x32c>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	68f9      	ldr	r1, [r7, #12]
 8002dba:	6809      	ldr	r1, [r1, #0]
 8002dbc:	4608      	mov	r0, r1
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	01c9      	lsls	r1, r1, #7
 8002dc2:	4401      	add	r1, r0
 8002dc4:	3184      	adds	r1, #132	; 0x84
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	01db      	lsls	r3, r3, #7
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3384      	adds	r3, #132	; 0x84
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	01db      	lsls	r3, r3, #7
 8002de4:	4413      	add	r3, r2
 8002de6:	3384      	adds	r3, #132	; 0x84
 8002de8:	461a      	mov	r2, r3
 8002dea:	2300      	movs	r3, #0
 8002dec:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	01db      	lsls	r3, r3, #7
 8002df8:	4413      	add	r3, r2
 8002dfa:	3384      	adds	r3, #132	; 0x84
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	e01b      	b.n	8002e4a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d102      	bne.n	8002e20 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	e014      	b.n	8002e4a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d00b      	beq.n	8002e40 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d007      	beq.n	8002e40 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d003      	beq.n	8002e40 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002e3c:	2b07      	cmp	r3, #7
 8002e3e:	d102      	bne.n	8002e46 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002e40:	2302      	movs	r3, #2
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	e001      	b.n	8002e4a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002e46:	2301      	movs	r3, #1
 8002e48:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	01db      	lsls	r3, r3, #7
 8002e54:	4413      	add	r3, r2
 8002e56:	3384      	adds	r3, #132	; 0x84
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	01d2      	lsls	r2, r2, #7
 8002e64:	440a      	add	r2, r1
 8002e66:	3284      	adds	r2, #132	; 0x84
 8002e68:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002e6c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	fb02 f303 	mul.w	r3, r2, r3
 8002e78:	041a      	lsls	r2, r3, #16
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	1acb      	subs	r3, r1, r3
 8002e84:	69f9      	ldr	r1, [r7, #28]
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	3307      	adds	r3, #7
 8002e8c:	68f9      	ldr	r1, [r7, #12]
 8002e8e:	6809      	ldr	r1, [r1, #0]
 8002e90:	4608      	mov	r0, r1
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	01c9      	lsls	r1, r1, #7
 8002e96:	4401      	add	r1, r0
 8002e98:	3184      	adds	r1, #132	; 0x84
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	01db      	lsls	r3, r3, #7
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3384      	adds	r3, #132	; 0x84
 8002eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	01db      	lsls	r3, r3, #7
 8002eb8:	440b      	add	r3, r1
 8002eba:	3384      	adds	r3, #132	; 0x84
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <LTDC_SetConfig+0x330>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	01db      	lsls	r3, r3, #7
 8002ece:	4413      	add	r3, r2
 8002ed0:	3384      	adds	r3, #132	; 0x84
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	01db      	lsls	r3, r3, #7
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3384      	adds	r3, #132	; 0x84
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	4611      	mov	r1, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	01d2      	lsls	r2, r2, #7
 8002ef4:	440a      	add	r2, r1
 8002ef6:	3284      	adds	r2, #132	; 0x84
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6013      	str	r3, [r2, #0]
}
 8002efe:	bf00      	nop
 8002f00:	3724      	adds	r7, #36	; 0x24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	fffff8f8 	.word	0xfffff8f8
 8002f10:	fffff800 	.word	0xfffff800

08002f14 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002f20:	f7fe fef8 	bl	8001d14 <HAL_GetTick>
 8002f24:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
 8002f30:	e0a5      	b.n	800307e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f040 809e 	bne.w	800307e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe faa0 	bl	8001488 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002f48:	f241 3188 	movw	r1, #5000	; 0x1388
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f89d 	bl	800308c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	4b4b      	ldr	r3, [pc, #300]	; (8003088 <HAL_OSPI_Init+0x174>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	68d1      	ldr	r1, [r2, #12]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6912      	ldr	r2, [r2, #16]
 8002f64:	3a01      	subs	r2, #1
 8002f66:	0412      	lsls	r2, r2, #16
 8002f68:	4311      	orrs	r1, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6952      	ldr	r2, [r2, #20]
 8002f6e:	3a01      	subs	r2, #1
 8002f70:	0212      	lsls	r2, r2, #8
 8002f72:	4311      	orrs	r1, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f78:	4311      	orrs	r1, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	69d2      	ldr	r2, [r2, #28]
 8002f7e:	4311      	orrs	r1, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1a      	ldr	r2, [r3, #32]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fb8:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	021a      	lsls	r2, r3, #8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2120      	movs	r1, #32
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fd4b 	bl	8003a7c <OSPI_WaitFlagStateUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d146      	bne.n	800307e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	1e5a      	subs	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003026:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0201 	orr.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d107      	bne.n	8003066 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0202 	orr.w	r2, r2, #2
 8003064:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800306e:	d103      	bne.n	8003078 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	651a      	str	r2, [r3, #80]	; 0x50
 8003076:	e002      	b.n	800307e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800307e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	f8e0f8f4 	.word	0xf8e0f8f4

0800308c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b094      	sub	sp, #80	; 0x50
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a9d      	ldr	r2, [pc, #628]	; (8003340 <HAL_OSPIM_Config+0x294>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d105      	bne.n	80030da <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80030d8:	e004      	b.n	80030e4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80030da:	2301      	movs	r3, #1
 80030dc:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80030e4:	2300      	movs	r3, #0
 80030e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80030ea:	e01d      	b.n	8003128 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80030ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030f0:	3301      	adds	r3, #1
 80030f2:	b2d8      	uxtb	r0, r3
 80030f4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80030f8:	f107 0114 	add.w	r1, r7, #20
 80030fc:	4613      	mov	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	4619      	mov	r1, r3
 8003108:	f000 fcf0 	bl	8003aec <OSPIM_GetConfig>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d005      	beq.n	800311e <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2208      	movs	r2, #8
 800311c:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800311e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003122:	3301      	adds	r3, #1
 8003124:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003128:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800312c:	2b01      	cmp	r3, #1
 800312e:	d9dd      	bls.n	80030ec <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8003130:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003134:	2b00      	cmp	r3, #0
 8003136:	f040 8495 	bne.w	8003a64 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800313a:	4b81      	ldr	r3, [pc, #516]	; (8003340 <HAL_OSPIM_Config+0x294>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003146:	4b7e      	ldr	r3, [pc, #504]	; (8003340 <HAL_OSPIM_Config+0x294>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a7d      	ldr	r2, [pc, #500]	; (8003340 <HAL_OSPIM_Config+0x294>)
 800314c:	f023 0301 	bic.w	r3, r3, #1
 8003150:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003152:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800315e:	4b79      	ldr	r3, [pc, #484]	; (8003344 <HAL_OSPIM_Config+0x298>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800316a:	4b76      	ldr	r3, [pc, #472]	; (8003344 <HAL_OSPIM_Config+0x298>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a75      	ldr	r2, [pc, #468]	; (8003344 <HAL_OSPIM_Config+0x298>)
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003176:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800317a:	f043 0302 	orr.w	r3, r3, #2
 800317e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003182:	4971      	ldr	r1, [pc, #452]	; (8003348 <HAL_OSPIM_Config+0x29c>)
 8003184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003186:	4613      	mov	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4413      	add	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	3350      	adds	r3, #80	; 0x50
 8003190:	443b      	add	r3, r7
 8003192:	3b34      	subs	r3, #52	; 0x34
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3b01      	subs	r3, #1
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	6859      	ldr	r1, [r3, #4]
 800319e:	486a      	ldr	r0, [pc, #424]	; (8003348 <HAL_OSPIM_Config+0x29c>)
 80031a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	3350      	adds	r3, #80	; 0x50
 80031ac:	443b      	add	r3, r7
 80031ae:	3b34      	subs	r3, #52	; 0x34
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4403      	add	r3, r0
 80031bc:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80031be:	4b62      	ldr	r3, [pc, #392]	; (8003348 <HAL_OSPIM_Config+0x29c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 80c0 	beq.w	800334c <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80031cc:	4b5e      	ldr	r3, [pc, #376]	; (8003348 <HAL_OSPIM_Config+0x29c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a5d      	ldr	r2, [pc, #372]	; (8003348 <HAL_OSPIM_Config+0x29c>)
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80031d8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80031dc:	2b01      	cmp	r3, #1
 80031de:	f040 8162 	bne.w	80034a6 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 80031e2:	4959      	ldr	r1, [pc, #356]	; (8003348 <HAL_OSPIM_Config+0x29c>)
 80031e4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	3350      	adds	r3, #80	; 0x50
 80031f2:	443b      	add	r3, r7
 80031f4:	3b3c      	subs	r3, #60	; 0x3c
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	4851      	ldr	r0, [pc, #324]	; (8003348 <HAL_OSPIM_Config+0x29c>)
 8003202:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003206:	4613      	mov	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	4413      	add	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	3350      	adds	r3, #80	; 0x50
 8003210:	443b      	add	r3, r7
 8003212:	3b3c      	subs	r3, #60	; 0x3c
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3b01      	subs	r3, #1
 8003218:	f041 0202 	orr.w	r2, r1, #2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4403      	add	r3, r0
 8003220:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003222:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003226:	4613      	mov	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4413      	add	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	3350      	adds	r3, #80	; 0x50
 8003230:	443b      	add	r3, r7
 8003232:	3b38      	subs	r3, #56	; 0x38
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d01f      	beq.n	800327a <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 800323a:	4943      	ldr	r1, [pc, #268]	; (8003348 <HAL_OSPIM_Config+0x29c>)
 800323c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003240:	4613      	mov	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	3350      	adds	r3, #80	; 0x50
 800324a:	443b      	add	r3, r7
 800324c:	3b38      	subs	r3, #56	; 0x38
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3b01      	subs	r3, #1
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	483b      	ldr	r0, [pc, #236]	; (8003348 <HAL_OSPIM_Config+0x29c>)
 800325a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800325e:	4613      	mov	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4413      	add	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	3350      	adds	r3, #80	; 0x50
 8003268:	443b      	add	r3, r7
 800326a:	3b38      	subs	r3, #56	; 0x38
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3b01      	subs	r3, #1
 8003270:	f041 0220 	orr.w	r2, r1, #32
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4403      	add	r3, r0
 8003278:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800327a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800327e:	4613      	mov	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	4413      	add	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	3350      	adds	r3, #80	; 0x50
 8003288:	443b      	add	r3, r7
 800328a:	3b30      	subs	r3, #48	; 0x30
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d023      	beq.n	80032da <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8003292:	492d      	ldr	r1, [pc, #180]	; (8003348 <HAL_OSPIM_Config+0x29c>)
 8003294:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003298:	4613      	mov	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	3350      	adds	r3, #80	; 0x50
 80032a2:	443b      	add	r3, r7
 80032a4:	3b30      	subs	r3, #48	; 0x30
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	6859      	ldr	r1, [r3, #4]
 80032b4:	4824      	ldr	r0, [pc, #144]	; (8003348 <HAL_OSPIM_Config+0x29c>)
 80032b6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	3350      	adds	r3, #80	; 0x50
 80032c4:	443b      	add	r3, r7
 80032c6:	3b30      	subs	r3, #48	; 0x30
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4403      	add	r3, r0
 80032d8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80032da:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032de:	4613      	mov	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	3350      	adds	r3, #80	; 0x50
 80032e8:	443b      	add	r3, r7
 80032ea:	3b2c      	subs	r3, #44	; 0x2c
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80d9 	beq.w	80034a6 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 80032f4:	4914      	ldr	r1, [pc, #80]	; (8003348 <HAL_OSPIM_Config+0x29c>)
 80032f6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032fa:	4613      	mov	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4413      	add	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	3350      	adds	r3, #80	; 0x50
 8003304:	443b      	add	r3, r7
 8003306:	3b2c      	subs	r3, #44	; 0x2c
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3b01      	subs	r3, #1
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	6859      	ldr	r1, [r3, #4]
 8003316:	480c      	ldr	r0, [pc, #48]	; (8003348 <HAL_OSPIM_Config+0x29c>)
 8003318:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	3350      	adds	r3, #80	; 0x50
 8003326:	443b      	add	r3, r7
 8003328:	3b2c      	subs	r3, #44	; 0x2c
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3b01      	subs	r3, #1
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4403      	add	r3, r0
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	e0b3      	b.n	80034a6 <HAL_OSPIM_Config+0x3fa>
 800333e:	bf00      	nop
 8003340:	52005000 	.word	0x52005000
 8003344:	5200a000 	.word	0x5200a000
 8003348:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800334c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	3350      	adds	r3, #80	; 0x50
 8003358:	443b      	add	r3, r7
 800335a:	3b3c      	subs	r3, #60	; 0x3c
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80a1 	beq.w	80034a6 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003364:	4993      	ldr	r1, [pc, #588]	; (80035b4 <HAL_OSPIM_Config+0x508>)
 8003366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	3350      	adds	r3, #80	; 0x50
 8003372:	443b      	add	r3, r7
 8003374:	3b3c      	subs	r3, #60	; 0x3c
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3b01      	subs	r3, #1
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	6859      	ldr	r1, [r3, #4]
 8003380:	488c      	ldr	r0, [pc, #560]	; (80035b4 <HAL_OSPIM_Config+0x508>)
 8003382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003384:	4613      	mov	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	3350      	adds	r3, #80	; 0x50
 800338e:	443b      	add	r3, r7
 8003390:	3b3c      	subs	r3, #60	; 0x3c
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3b01      	subs	r3, #1
 8003396:	f021 0201 	bic.w	r2, r1, #1
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4403      	add	r3, r0
 800339e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80033a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033a2:	4613      	mov	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4413      	add	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	3350      	adds	r3, #80	; 0x50
 80033ac:	443b      	add	r3, r7
 80033ae:	3b38      	subs	r3, #56	; 0x38
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d01d      	beq.n	80033f2 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80033b6:	497f      	ldr	r1, [pc, #508]	; (80035b4 <HAL_OSPIM_Config+0x508>)
 80033b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	3350      	adds	r3, #80	; 0x50
 80033c4:	443b      	add	r3, r7
 80033c6:	3b38      	subs	r3, #56	; 0x38
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	4878      	ldr	r0, [pc, #480]	; (80035b4 <HAL_OSPIM_Config+0x508>)
 80033d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	3350      	adds	r3, #80	; 0x50
 80033e0:	443b      	add	r3, r7
 80033e2:	3b38      	subs	r3, #56	; 0x38
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	f021 0210 	bic.w	r2, r1, #16
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4403      	add	r3, r0
 80033f0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80033f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	3350      	adds	r3, #80	; 0x50
 80033fe:	443b      	add	r3, r7
 8003400:	3b30      	subs	r3, #48	; 0x30
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d021      	beq.n	800344c <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003408:	496a      	ldr	r1, [pc, #424]	; (80035b4 <HAL_OSPIM_Config+0x508>)
 800340a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800340c:	4613      	mov	r3, r2
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	4413      	add	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	3350      	adds	r3, #80	; 0x50
 8003416:	443b      	add	r3, r7
 8003418:	3b30      	subs	r3, #48	; 0x30
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3b01      	subs	r3, #1
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	4862      	ldr	r0, [pc, #392]	; (80035b4 <HAL_OSPIM_Config+0x508>)
 800342a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	3350      	adds	r3, #80	; 0x50
 8003436:	443b      	add	r3, r7
 8003438:	3b30      	subs	r3, #48	; 0x30
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3b01      	subs	r3, #1
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4403      	add	r3, r0
 800344a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800344c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	3350      	adds	r3, #80	; 0x50
 8003458:	443b      	add	r3, r7
 800345a:	3b2c      	subs	r3, #44	; 0x2c
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d021      	beq.n	80034a6 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003462:	4954      	ldr	r1, [pc, #336]	; (80035b4 <HAL_OSPIM_Config+0x508>)
 8003464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003466:	4613      	mov	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4413      	add	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	3350      	adds	r3, #80	; 0x50
 8003470:	443b      	add	r3, r7
 8003472:	3b2c      	subs	r3, #44	; 0x2c
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3b01      	subs	r3, #1
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	484c      	ldr	r0, [pc, #304]	; (80035b4 <HAL_OSPIM_Config+0x508>)
 8003484:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	3350      	adds	r3, #80	; 0x50
 8003490:	443b      	add	r3, r7
 8003492:	3b2c      	subs	r3, #44	; 0x2c
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3b01      	subs	r3, #1
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4403      	add	r3, r0
 80034a4:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	6819      	ldr	r1, [r3, #0]
 80034aa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80034ae:	4613      	mov	r3, r2
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4413      	add	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	3350      	adds	r3, #80	; 0x50
 80034b8:	443b      	add	r3, r7
 80034ba:	3b3c      	subs	r3, #60	; 0x3c
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4299      	cmp	r1, r3
 80034c0:	d038      	beq.n	8003534 <HAL_OSPIM_Config+0x488>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	6859      	ldr	r1, [r3, #4]
 80034c6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80034ca:	4613      	mov	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	3350      	adds	r3, #80	; 0x50
 80034d4:	443b      	add	r3, r7
 80034d6:	3b38      	subs	r3, #56	; 0x38
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4299      	cmp	r1, r3
 80034dc:	d02a      	beq.n	8003534 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6899      	ldr	r1, [r3, #8]
 80034e2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80034e6:	4613      	mov	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4413      	add	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	3350      	adds	r3, #80	; 0x50
 80034f0:	443b      	add	r3, r7
 80034f2:	3b34      	subs	r3, #52	; 0x34
 80034f4:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80034f6:	4299      	cmp	r1, r3
 80034f8:	d01c      	beq.n	8003534 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	68d9      	ldr	r1, [r3, #12]
 80034fe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003502:	4613      	mov	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	3350      	adds	r3, #80	; 0x50
 800350c:	443b      	add	r3, r7
 800350e:	3b30      	subs	r3, #48	; 0x30
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4299      	cmp	r1, r3
 8003514:	d00e      	beq.n	8003534 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	6919      	ldr	r1, [r3, #16]
 800351a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800351e:	4613      	mov	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4413      	add	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	3350      	adds	r3, #80	; 0x50
 8003528:	443b      	add	r3, r7
 800352a:	3b2c      	subs	r3, #44	; 0x2c
 800352c:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800352e:	4299      	cmp	r1, r3
 8003530:	f040 810e 	bne.w	8003750 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	6819      	ldr	r1, [r3, #0]
 8003538:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	3350      	adds	r3, #80	; 0x50
 8003546:	443b      	add	r3, r7
 8003548:	3b3c      	subs	r3, #60	; 0x3c
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4299      	cmp	r1, r3
 800354e:	d133      	bne.n	80035b8 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	3350      	adds	r3, #80	; 0x50
 8003562:	443b      	add	r3, r7
 8003564:	3b38      	subs	r3, #56	; 0x38
 8003566:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003568:	4299      	cmp	r1, r3
 800356a:	d125      	bne.n	80035b8 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	68d9      	ldr	r1, [r3, #12]
 8003570:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003574:	4613      	mov	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4413      	add	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	3350      	adds	r3, #80	; 0x50
 800357e:	443b      	add	r3, r7
 8003580:	3b30      	subs	r3, #48	; 0x30
 8003582:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003584:	4299      	cmp	r1, r3
 8003586:	d117      	bne.n	80035b8 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	6919      	ldr	r1, [r3, #16]
 800358c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003590:	4613      	mov	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4413      	add	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	3350      	adds	r3, #80	; 0x50
 800359a:	443b      	add	r3, r7
 800359c:	3b2c      	subs	r3, #44	; 0x2c
 800359e:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80035a0:	4299      	cmp	r1, r3
 80035a2:	d109      	bne.n	80035b8 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80035a4:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <HAL_OSPIM_Config+0x508>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a02      	ldr	r2, [pc, #8]	; (80035b4 <HAL_OSPIM_Config+0x508>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	e0ce      	b.n	8003750 <HAL_OSPIM_Config+0x6a4>
 80035b2:	bf00      	nop
 80035b4:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80035b8:	49bb      	ldr	r1, [pc, #748]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 80035ba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	3350      	adds	r3, #80	; 0x50
 80035c8:	443b      	add	r3, r7
 80035ca:	3b3c      	subs	r3, #60	; 0x3c
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	6859      	ldr	r1, [r3, #4]
 80035d6:	48b4      	ldr	r0, [pc, #720]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 80035d8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80035dc:	4613      	mov	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	3350      	adds	r3, #80	; 0x50
 80035e6:	443b      	add	r3, r7
 80035e8:	3b3c      	subs	r3, #60	; 0x3c
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	f021 0201 	bic.w	r2, r1, #1
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4403      	add	r3, r0
 80035f6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80035f8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80035fc:	4613      	mov	r3, r2
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	4413      	add	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	3350      	adds	r3, #80	; 0x50
 8003606:	443b      	add	r3, r7
 8003608:	3b38      	subs	r3, #56	; 0x38
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01f      	beq.n	8003650 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003610:	49a5      	ldr	r1, [pc, #660]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 8003612:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003616:	4613      	mov	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	3350      	adds	r3, #80	; 0x50
 8003620:	443b      	add	r3, r7
 8003622:	3b38      	subs	r3, #56	; 0x38
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3b01      	subs	r3, #1
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	6859      	ldr	r1, [r3, #4]
 800362e:	489e      	ldr	r0, [pc, #632]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 8003630:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	3350      	adds	r3, #80	; 0x50
 800363e:	443b      	add	r3, r7
 8003640:	3b38      	subs	r3, #56	; 0x38
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3b01      	subs	r3, #1
 8003646:	f021 0210 	bic.w	r2, r1, #16
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4403      	add	r3, r0
 800364e:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003650:	4995      	ldr	r1, [pc, #596]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 8003652:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003656:	4613      	mov	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	3350      	adds	r3, #80	; 0x50
 8003660:	443b      	add	r3, r7
 8003662:	3b34      	subs	r3, #52	; 0x34
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3b01      	subs	r3, #1
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	6859      	ldr	r1, [r3, #4]
 800366e:	488e      	ldr	r0, [pc, #568]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 8003670:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003674:	4613      	mov	r3, r2
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	4413      	add	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	3350      	adds	r3, #80	; 0x50
 800367e:	443b      	add	r3, r7
 8003680:	3b34      	subs	r3, #52	; 0x34
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3b01      	subs	r3, #1
 8003686:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4403      	add	r3, r0
 800368e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003690:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003694:	4613      	mov	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4413      	add	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	3350      	adds	r3, #80	; 0x50
 800369e:	443b      	add	r3, r7
 80036a0:	3b30      	subs	r3, #48	; 0x30
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d023      	beq.n	80036f0 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80036a8:	497f      	ldr	r1, [pc, #508]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 80036aa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80036ae:	4613      	mov	r3, r2
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4413      	add	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	3350      	adds	r3, #80	; 0x50
 80036b8:	443b      	add	r3, r7
 80036ba:	3b30      	subs	r3, #48	; 0x30
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3b01      	subs	r3, #1
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	4877      	ldr	r0, [pc, #476]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 80036cc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80036d0:	4613      	mov	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	4413      	add	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	3350      	adds	r3, #80	; 0x50
 80036da:	443b      	add	r3, r7
 80036dc:	3b30      	subs	r3, #48	; 0x30
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4403      	add	r3, r0
 80036ee:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80036f0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	3350      	adds	r3, #80	; 0x50
 80036fe:	443b      	add	r3, r7
 8003700:	3b2c      	subs	r3, #44	; 0x2c
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d023      	beq.n	8003750 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003708:	4967      	ldr	r1, [pc, #412]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 800370a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800370e:	4613      	mov	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	4413      	add	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	3350      	adds	r3, #80	; 0x50
 8003718:	443b      	add	r3, r7
 800371a:	3b2c      	subs	r3, #44	; 0x2c
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3b01      	subs	r3, #1
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	6859      	ldr	r1, [r3, #4]
 800372a:	485f      	ldr	r0, [pc, #380]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 800372c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003730:	4613      	mov	r3, r2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	4413      	add	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	3350      	adds	r3, #80	; 0x50
 800373a:	443b      	add	r3, r7
 800373c:	3b2c      	subs	r3, #44	; 0x2c
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3b01      	subs	r3, #1
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4403      	add	r3, r0
 800374e:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003750:	4a55      	ldr	r2, [pc, #340]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	3b01      	subs	r3, #1
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003764:	025b      	lsls	r3, r3, #9
 8003766:	431a      	orrs	r2, r3
 8003768:	494f      	ldr	r1, [pc, #316]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	3b01      	subs	r3, #1
 8003770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	1e5a      	subs	r2, r3, #1
 8003780:	4b49      	ldr	r3, [pc, #292]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	0c1b      	lsrs	r3, r3, #16
 8003786:	b2db      	uxtb	r3, r3
 8003788:	429a      	cmp	r2, r3
 800378a:	d90a      	bls.n	80037a2 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800378c:	4b46      	ldr	r3, [pc, #280]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	3b01      	subs	r3, #1
 800379a:	041b      	lsls	r3, r3, #16
 800379c:	4942      	ldr	r1, [pc, #264]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80037a2:	4b41      	ldr	r3, [pc, #260]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 809a 	beq.w	80038e4 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80037b0:	4a3d      	ldr	r2, [pc, #244]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f023 0203 	bic.w	r2, r3, #3
 80037c2:	4939      	ldr	r1, [pc, #228]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d011      	beq.n	8003800 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80037dc:	4a32      	ldr	r2, [pc, #200]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037ee:	492e      	ldr	r1, [pc, #184]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	f042 0210 	orr.w	r2, r2, #16
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d016      	beq.n	800383a <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800380c:	4a26      	ldr	r2, [pc, #152]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	3b01      	subs	r3, #1
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003822:	4921      	ldr	r1, [pc, #132]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	3b01      	subs	r3, #1
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	e019      	b.n	800386e <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d015      	beq.n	800386e <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003842:	4a19      	ldr	r2, [pc, #100]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	3b01      	subs	r3, #1
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003858:	4913      	ldr	r1, [pc, #76]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	3b01      	subs	r3, #1
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d018      	beq.n	80038ac <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800387a:	4a0b      	ldr	r2, [pc, #44]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	3b01      	subs	r3, #1
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003890:	4905      	ldr	r1, [pc, #20]	; (80038a8 <HAL_OSPIM_Config+0x7fc>)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	3b01      	subs	r3, #1
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	e0c5      	b.n	8003a34 <HAL_OSPIM_Config+0x988>
 80038a8:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80bf 	beq.w	8003a34 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80038b6:	4a6e      	ldr	r2, [pc, #440]	; (8003a70 <HAL_OSPIM_Config+0x9c4>)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	3b01      	subs	r3, #1
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80038cc:	4968      	ldr	r1, [pc, #416]	; (8003a70 <HAL_OSPIM_Config+0x9c4>)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	e0a7      	b.n	8003a34 <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80038e4:	4a62      	ldr	r2, [pc, #392]	; (8003a70 <HAL_OSPIM_Config+0x9c4>)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f023 0203 	bic.w	r2, r3, #3
 80038f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	431a      	orrs	r2, r3
 80038fc:	495c      	ldr	r1, [pc, #368]	; (8003a70 <HAL_OSPIM_Config+0x9c4>)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3b01      	subs	r3, #1
 8003904:	f042 0201 	orr.w	r2, r2, #1
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d014      	beq.n	8003940 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003916:	4a56      	ldr	r2, [pc, #344]	; (8003a70 <HAL_OSPIM_Config+0x9c4>)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	3b01      	subs	r3, #1
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392a:	015b      	lsls	r3, r3, #5
 800392c:	431a      	orrs	r2, r3
 800392e:	4950      	ldr	r1, [pc, #320]	; (8003a70 <HAL_OSPIM_Config+0x9c4>)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	3b01      	subs	r3, #1
 8003936:	f042 0210 	orr.w	r2, r2, #16
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d019      	beq.n	8003980 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800394c:	4a48      	ldr	r2, [pc, #288]	; (8003a70 <HAL_OSPIM_Config+0x9c4>)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	3b01      	subs	r3, #1
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003964:	049b      	lsls	r3, r3, #18
 8003966:	431a      	orrs	r2, r3
 8003968:	4941      	ldr	r1, [pc, #260]	; (8003a70 <HAL_OSPIM_Config+0x9c4>)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	3b01      	subs	r3, #1
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	e01c      	b.n	80039ba <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d018      	beq.n	80039ba <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003988:	4a39      	ldr	r2, [pc, #228]	; (8003a70 <HAL_OSPIM_Config+0x9c4>)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	3b01      	subs	r3, #1
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800399e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a0:	069b      	lsls	r3, r3, #26
 80039a2:	431a      	orrs	r2, r3
 80039a4:	4932      	ldr	r1, [pc, #200]	; (8003a70 <HAL_OSPIM_Config+0x9c4>)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d019      	beq.n	80039fa <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80039c6:	4a2a      	ldr	r2, [pc, #168]	; (8003a70 <HAL_OSPIM_Config+0x9c4>)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80039dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039de:	049b      	lsls	r3, r3, #18
 80039e0:	431a      	orrs	r2, r3
 80039e2:	4923      	ldr	r1, [pc, #140]	; (8003a70 <HAL_OSPIM_Config+0x9c4>)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	605a      	str	r2, [r3, #4]
 80039f8:	e01c      	b.n	8003a34 <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d018      	beq.n	8003a34 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003a02:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <HAL_OSPIM_Config+0x9c4>)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a1a:	069b      	lsls	r3, r3, #26
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	4914      	ldr	r1, [pc, #80]	; (8003a70 <HAL_OSPIM_Config+0x9c4>)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003a34:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <HAL_OSPIM_Config+0x9c8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a0b      	ldr	r2, [pc, #44]	; (8003a74 <HAL_OSPIM_Config+0x9c8>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003a4c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003a58:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <HAL_OSPIM_Config+0x9cc>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a06      	ldr	r2, [pc, #24]	; (8003a78 <HAL_OSPIM_Config+0x9cc>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003a64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3750      	adds	r7, #80	; 0x50
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	5200b400 	.word	0x5200b400
 8003a74:	52005000 	.word	0x52005000
 8003a78:	5200a000 	.word	0x5200a000

08003a7c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003a8c:	e01a      	b.n	8003ac4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a94:	d016      	beq.n	8003ac4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a96:	f7fe f93d 	bl	8001d14 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d302      	bcc.n	8003aac <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab2:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab8:	f043 0201 	orr.w	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e00e      	b.n	8003ae2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6a1a      	ldr	r2, [r3, #32]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d1d6      	bne.n	8003a8e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	6039      	str	r1, [r7, #0]
 8003af6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <OSPIM_GetConfig+0x26>
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d802      	bhi.n	8003b12 <OSPIM_GetConfig+0x26>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d102      	bne.n	8003b18 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	75fb      	strb	r3, [r7, #23]
 8003b16:	e098      	b.n	8003c4a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2200      	movs	r2, #0
 8003b22:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d10b      	bne.n	8003b54 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8003b3c:	4b46      	ldr	r3, [pc, #280]	; (8003c58 <OSPIM_GetConfig+0x16c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d102      	bne.n	8003b4e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003b48:	4b44      	ldr	r3, [pc, #272]	; (8003c5c <OSPIM_GetConfig+0x170>)
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	e002      	b.n	8003b54 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8003b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b52:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e074      	b.n	8003c44 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8003b5a:	4a3f      	ldr	r2, [pc, #252]	; (8003c58 <OSPIM_GetConfig+0x16c>)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4053      	eors	r3, r2
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4053      	eors	r3, r2
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4053      	eors	r3, r2
 8003bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d103      	bne.n	8003bc6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d018      	beq.n	8003c02 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4053      	eors	r3, r2
 8003bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d111      	bne.n	8003c02 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d106      	bne.n	8003bf6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3301      	adds	r3, #1
 8003bec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	60da      	str	r2, [r3, #12]
 8003bf4:	e005      	b.n	8003c02 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d018      	beq.n	8003c3e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4053      	eors	r3, r2
 8003c12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d111      	bne.n	8003c3e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d106      	bne.n	8003c32 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3301      	adds	r3, #1
 8003c28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	611a      	str	r2, [r3, #16]
 8003c30:	e005      	b.n	8003c3e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3301      	adds	r3, #1
 8003c36:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3301      	adds	r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d987      	bls.n	8003b5a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	371c      	adds	r7, #28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	5200b400 	.word	0x5200b400
 8003c5c:	04040222 	.word	0x04040222

08003c60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003c68:	4b29      	ldr	r3, [pc, #164]	; (8003d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	2b06      	cmp	r3, #6
 8003c72:	d00a      	beq.n	8003c8a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003c74:	4b26      	ldr	r3, [pc, #152]	; (8003d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d001      	beq.n	8003c86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e040      	b.n	8003d08 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e03e      	b.n	8003d08 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003c8a:	4b21      	ldr	r3, [pc, #132]	; (8003d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003c92:	491f      	ldr	r1, [pc, #124]	; (8003d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003c9a:	f7fe f83b 	bl	8001d14 <HAL_GetTick>
 8003c9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ca0:	e009      	b.n	8003cb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ca2:	f7fe f837 	bl	8001d14 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cb0:	d901      	bls.n	8003cb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e028      	b.n	8003d08 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cb6:	4b16      	ldr	r3, [pc, #88]	; (8003d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc2:	d1ee      	bne.n	8003ca2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b1e      	cmp	r3, #30
 8003cc8:	d008      	beq.n	8003cdc <HAL_PWREx_ConfigSupply+0x7c>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8003cce:	d005      	beq.n	8003cdc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b1d      	cmp	r3, #29
 8003cd4:	d002      	beq.n	8003cdc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b2d      	cmp	r3, #45	; 0x2d
 8003cda:	d114      	bne.n	8003d06 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003cdc:	f7fe f81a 	bl	8001d14 <HAL_GetTick>
 8003ce0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ce2:	e009      	b.n	8003cf8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ce4:	f7fe f816 	bl	8001d14 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cf2:	d901      	bls.n	8003cf8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e007      	b.n	8003d08 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d04:	d1ee      	bne.n	8003ce4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	58024800 	.word	0x58024800

08003d14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08c      	sub	sp, #48	; 0x30
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d102      	bne.n	8003d28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	f000 bc1f 	b.w	8004566 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80b3 	beq.w	8003e9c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d36:	4b95      	ldr	r3, [pc, #596]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d40:	4b92      	ldr	r3, [pc, #584]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d007      	beq.n	8003d5c <HAL_RCC_OscConfig+0x48>
 8003d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4e:	2b18      	cmp	r3, #24
 8003d50:	d112      	bne.n	8003d78 <HAL_RCC_OscConfig+0x64>
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d10d      	bne.n	8003d78 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	4b8b      	ldr	r3, [pc, #556]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8098 	beq.w	8003e9a <HAL_RCC_OscConfig+0x186>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f040 8093 	bne.w	8003e9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e3f6      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d80:	d106      	bne.n	8003d90 <HAL_RCC_OscConfig+0x7c>
 8003d82:	4b82      	ldr	r3, [pc, #520]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a81      	ldr	r2, [pc, #516]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e058      	b.n	8003e42 <HAL_RCC_OscConfig+0x12e>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d112      	bne.n	8003dbe <HAL_RCC_OscConfig+0xaa>
 8003d98:	4b7c      	ldr	r3, [pc, #496]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a7b      	ldr	r2, [pc, #492]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	4b79      	ldr	r3, [pc, #484]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a78      	ldr	r2, [pc, #480]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003daa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	4b76      	ldr	r3, [pc, #472]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a75      	ldr	r2, [pc, #468]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	e041      	b.n	8003e42 <HAL_RCC_OscConfig+0x12e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dc6:	d112      	bne.n	8003dee <HAL_RCC_OscConfig+0xda>
 8003dc8:	4b70      	ldr	r3, [pc, #448]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a6f      	ldr	r2, [pc, #444]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003dce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	4b6d      	ldr	r3, [pc, #436]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a6c      	ldr	r2, [pc, #432]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003dda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4b6a      	ldr	r3, [pc, #424]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a69      	ldr	r2, [pc, #420]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	e029      	b.n	8003e42 <HAL_RCC_OscConfig+0x12e>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003df6:	d112      	bne.n	8003e1e <HAL_RCC_OscConfig+0x10a>
 8003df8:	4b64      	ldr	r3, [pc, #400]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a63      	ldr	r2, [pc, #396]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	4b61      	ldr	r3, [pc, #388]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a60      	ldr	r2, [pc, #384]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	4b5e      	ldr	r3, [pc, #376]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a5d      	ldr	r2, [pc, #372]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	e011      	b.n	8003e42 <HAL_RCC_OscConfig+0x12e>
 8003e1e:	4b5b      	ldr	r3, [pc, #364]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a5a      	ldr	r2, [pc, #360]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b58      	ldr	r3, [pc, #352]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a57      	ldr	r2, [pc, #348]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	4b55      	ldr	r3, [pc, #340]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a54      	ldr	r2, [pc, #336]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003e3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d013      	beq.n	8003e72 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fd ff63 	bl	8001d14 <HAL_GetTick>
 8003e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e52:	f7fd ff5f 	bl	8001d14 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b64      	cmp	r3, #100	; 0x64
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e380      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e64:	4b49      	ldr	r3, [pc, #292]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x13e>
 8003e70:	e014      	b.n	8003e9c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e72:	f7fd ff4f 	bl	8001d14 <HAL_GetTick>
 8003e76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e7a:	f7fd ff4b 	bl	8001d14 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b64      	cmp	r3, #100	; 0x64
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e36c      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e8c:	4b3f      	ldr	r3, [pc, #252]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1f0      	bne.n	8003e7a <HAL_RCC_OscConfig+0x166>
 8003e98:	e000      	b.n	8003e9c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 808c 	beq.w	8003fc2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eaa:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eb2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003eb4:	4b35      	ldr	r3, [pc, #212]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x1bc>
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	2b18      	cmp	r3, #24
 8003ec4:	d137      	bne.n	8003f36 <HAL_RCC_OscConfig+0x222>
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d132      	bne.n	8003f36 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ed0:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x1d4>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e33e      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ee8:	4b28      	ldr	r3, [pc, #160]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f023 0219 	bic.w	r2, r3, #25
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4925      	ldr	r1, [pc, #148]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efa:	f7fd ff0b 	bl	8001d14 <HAL_GetTick>
 8003efe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f02:	f7fd ff07 	bl	8001d14 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e328      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f14:	4b1d      	ldr	r3, [pc, #116]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0f0      	beq.n	8003f02 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f20:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	4917      	ldr	r1, [pc, #92]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f34:	e045      	b.n	8003fc2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d028      	beq.n	8003f90 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f3e:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 0219 	bic.w	r2, r3, #25
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	4910      	ldr	r1, [pc, #64]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fd fee0 	bl	8001d14 <HAL_GetTick>
 8003f54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f58:	f7fd fedc 	bl	8001d14 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e2fd      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	061b      	lsls	r3, r3, #24
 8003f84:	4901      	ldr	r1, [pc, #4]	; (8003f8c <HAL_RCC_OscConfig+0x278>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	604b      	str	r3, [r1, #4]
 8003f8a:	e01a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x2ae>
 8003f8c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f90:	4b97      	ldr	r3, [pc, #604]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a96      	ldr	r2, [pc, #600]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fd feba 	bl	8001d14 <HAL_GetTick>
 8003fa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fd feb6 	bl	8001d14 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e2d7      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fb6:	4b8e      	ldr	r3, [pc, #568]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d06a      	beq.n	80040a4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fce:	4b88      	ldr	r3, [pc, #544]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fd6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fd8:	4b85      	ldr	r3, [pc, #532]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d007      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x2e0>
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b18      	cmp	r3, #24
 8003fe8:	d11b      	bne.n	8004022 <HAL_RCC_OscConfig+0x30e>
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d116      	bne.n	8004022 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ff4:	4b7e      	ldr	r3, [pc, #504]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_OscConfig+0x2f8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	2b80      	cmp	r3, #128	; 0x80
 8004006:	d001      	beq.n	800400c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e2ac      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800400c:	4b78      	ldr	r3, [pc, #480]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	4975      	ldr	r1, [pc, #468]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 800401c:	4313      	orrs	r3, r2
 800401e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004020:	e040      	b.n	80040a4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d023      	beq.n	8004072 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800402a:	4b71      	ldr	r3, [pc, #452]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a70      	ldr	r2, [pc, #448]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 8004030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004036:	f7fd fe6d 	bl	8001d14 <HAL_GetTick>
 800403a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800403e:	f7fd fe69 	bl	8001d14 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e28a      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004050:	4b67      	ldr	r3, [pc, #412]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800405c:	4b64      	ldr	r3, [pc, #400]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	061b      	lsls	r3, r3, #24
 800406a:	4961      	ldr	r1, [pc, #388]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 800406c:	4313      	orrs	r3, r2
 800406e:	60cb      	str	r3, [r1, #12]
 8004070:	e018      	b.n	80040a4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004072:	4b5f      	ldr	r3, [pc, #380]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a5e      	ldr	r2, [pc, #376]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 8004078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800407c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407e:	f7fd fe49 	bl	8001d14 <HAL_GetTick>
 8004082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004086:	f7fd fe45 	bl	8001d14 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e266      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004098:	4b55      	ldr	r3, [pc, #340]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f0      	bne.n	8004086 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d036      	beq.n	800411e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d019      	beq.n	80040ec <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040b8:	4b4d      	ldr	r3, [pc, #308]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 80040ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040bc:	4a4c      	ldr	r2, [pc, #304]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c4:	f7fd fe26 	bl	8001d14 <HAL_GetTick>
 80040c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040cc:	f7fd fe22 	bl	8001d14 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e243      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040de:	4b44      	ldr	r3, [pc, #272]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 80040e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0x3b8>
 80040ea:	e018      	b.n	800411e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ec:	4b40      	ldr	r3, [pc, #256]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 80040ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f0:	4a3f      	ldr	r2, [pc, #252]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 80040f2:	f023 0301 	bic.w	r3, r3, #1
 80040f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f8:	f7fd fe0c 	bl	8001d14 <HAL_GetTick>
 80040fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004100:	f7fd fe08 	bl	8001d14 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e229      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004112:	4b37      	ldr	r3, [pc, #220]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 8004114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d036      	beq.n	8004198 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d019      	beq.n	8004166 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004132:	4b2f      	ldr	r3, [pc, #188]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a2e      	ldr	r2, [pc, #184]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 8004138:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800413c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800413e:	f7fd fde9 	bl	8001d14 <HAL_GetTick>
 8004142:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004146:	f7fd fde5 	bl	8001d14 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e206      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004158:	4b25      	ldr	r3, [pc, #148]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x432>
 8004164:	e018      	b.n	8004198 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004166:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a21      	ldr	r2, [pc, #132]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 800416c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004170:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004172:	f7fd fdcf 	bl	8001d14 <HAL_GetTick>
 8004176:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800417a:	f7fd fdcb 	bl	8001d14 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e1ec      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800418c:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f0      	bne.n	800417a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80af 	beq.w	8004304 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041a6:	4b13      	ldr	r3, [pc, #76]	; (80041f4 <HAL_RCC_OscConfig+0x4e0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a12      	ldr	r2, [pc, #72]	; (80041f4 <HAL_RCC_OscConfig+0x4e0>)
 80041ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041b2:	f7fd fdaf 	bl	8001d14 <HAL_GetTick>
 80041b6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ba:	f7fd fdab 	bl	8001d14 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b64      	cmp	r3, #100	; 0x64
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e1cc      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041cc:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <HAL_RCC_OscConfig+0x4e0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d10b      	bne.n	80041f8 <HAL_RCC_OscConfig+0x4e4>
 80041e0:	4b03      	ldr	r3, [pc, #12]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	4a02      	ldr	r2, [pc, #8]	; (80041f0 <HAL_RCC_OscConfig+0x4dc>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	6713      	str	r3, [r2, #112]	; 0x70
 80041ec:	e05b      	b.n	80042a6 <HAL_RCC_OscConfig+0x592>
 80041ee:	bf00      	nop
 80041f0:	58024400 	.word	0x58024400
 80041f4:	58024800 	.word	0x58024800
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d112      	bne.n	8004226 <HAL_RCC_OscConfig+0x512>
 8004200:	4b9d      	ldr	r3, [pc, #628]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	4a9c      	ldr	r2, [pc, #624]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	6713      	str	r3, [r2, #112]	; 0x70
 800420c:	4b9a      	ldr	r3, [pc, #616]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 800420e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004210:	4a99      	ldr	r2, [pc, #612]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004216:	6713      	str	r3, [r2, #112]	; 0x70
 8004218:	4b97      	ldr	r3, [pc, #604]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	4a96      	ldr	r2, [pc, #600]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 800421e:	f023 0304 	bic.w	r3, r3, #4
 8004222:	6713      	str	r3, [r2, #112]	; 0x70
 8004224:	e03f      	b.n	80042a6 <HAL_RCC_OscConfig+0x592>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2b05      	cmp	r3, #5
 800422c:	d112      	bne.n	8004254 <HAL_RCC_OscConfig+0x540>
 800422e:	4b92      	ldr	r3, [pc, #584]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	4a91      	ldr	r2, [pc, #580]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004234:	f043 0304 	orr.w	r3, r3, #4
 8004238:	6713      	str	r3, [r2, #112]	; 0x70
 800423a:	4b8f      	ldr	r3, [pc, #572]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	4a8e      	ldr	r2, [pc, #568]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004244:	6713      	str	r3, [r2, #112]	; 0x70
 8004246:	4b8c      	ldr	r3, [pc, #560]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	4a8b      	ldr	r2, [pc, #556]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	6713      	str	r3, [r2, #112]	; 0x70
 8004252:	e028      	b.n	80042a6 <HAL_RCC_OscConfig+0x592>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b85      	cmp	r3, #133	; 0x85
 800425a:	d112      	bne.n	8004282 <HAL_RCC_OscConfig+0x56e>
 800425c:	4b86      	ldr	r3, [pc, #536]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a85      	ldr	r2, [pc, #532]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004262:	f043 0304 	orr.w	r3, r3, #4
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
 8004268:	4b83      	ldr	r3, [pc, #524]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	4a82      	ldr	r2, [pc, #520]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 800426e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004272:	6713      	str	r3, [r2, #112]	; 0x70
 8004274:	4b80      	ldr	r3, [pc, #512]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	4a7f      	ldr	r2, [pc, #508]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6713      	str	r3, [r2, #112]	; 0x70
 8004280:	e011      	b.n	80042a6 <HAL_RCC_OscConfig+0x592>
 8004282:	4b7d      	ldr	r3, [pc, #500]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	4a7c      	ldr	r2, [pc, #496]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	6713      	str	r3, [r2, #112]	; 0x70
 800428e:	4b7a      	ldr	r3, [pc, #488]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	4a79      	ldr	r2, [pc, #484]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004294:	f023 0304 	bic.w	r3, r3, #4
 8004298:	6713      	str	r3, [r2, #112]	; 0x70
 800429a:	4b77      	ldr	r3, [pc, #476]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	4a76      	ldr	r2, [pc, #472]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 80042a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d015      	beq.n	80042da <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ae:	f7fd fd31 	bl	8001d14 <HAL_GetTick>
 80042b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042b4:	e00a      	b.n	80042cc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b6:	f7fd fd2d 	bl	8001d14 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e14c      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042cc:	4b6a      	ldr	r3, [pc, #424]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0ee      	beq.n	80042b6 <HAL_RCC_OscConfig+0x5a2>
 80042d8:	e014      	b.n	8004304 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042da:	f7fd fd1b 	bl	8001d14 <HAL_GetTick>
 80042de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042e0:	e00a      	b.n	80042f8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e2:	f7fd fd17 	bl	8001d14 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e136      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042f8:	4b5f      	ldr	r3, [pc, #380]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1ee      	bne.n	80042e2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 812b 	beq.w	8004564 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800430e:	4b5a      	ldr	r3, [pc, #360]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004316:	2b18      	cmp	r3, #24
 8004318:	f000 80bb 	beq.w	8004492 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	2b02      	cmp	r3, #2
 8004322:	f040 8095 	bne.w	8004450 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004326:	4b54      	ldr	r3, [pc, #336]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a53      	ldr	r2, [pc, #332]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 800432c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fd fcef 	bl	8001d14 <HAL_GetTick>
 8004336:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433a:	f7fd fceb 	bl	8001d14 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e10c      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800434c:	4b4a      	ldr	r3, [pc, #296]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f0      	bne.n	800433a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004358:	4b47      	ldr	r3, [pc, #284]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 800435a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800435c:	4b47      	ldr	r3, [pc, #284]	; (800447c <HAL_RCC_OscConfig+0x768>)
 800435e:	4013      	ands	r3, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004368:	0112      	lsls	r2, r2, #4
 800436a:	430a      	orrs	r2, r1
 800436c:	4942      	ldr	r1, [pc, #264]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 800436e:	4313      	orrs	r3, r2
 8004370:	628b      	str	r3, [r1, #40]	; 0x28
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	3b01      	subs	r3, #1
 8004378:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004380:	3b01      	subs	r3, #1
 8004382:	025b      	lsls	r3, r3, #9
 8004384:	b29b      	uxth	r3, r3
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	3b01      	subs	r3, #1
 800438e:	041b      	lsls	r3, r3, #16
 8004390:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439a:	3b01      	subs	r3, #1
 800439c:	061b      	lsls	r3, r3, #24
 800439e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043a2:	4935      	ldr	r1, [pc, #212]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80043a8:	4b33      	ldr	r3, [pc, #204]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	4a32      	ldr	r2, [pc, #200]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043b4:	4b30      	ldr	r3, [pc, #192]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 80043b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b8:	4b31      	ldr	r3, [pc, #196]	; (8004480 <HAL_RCC_OscConfig+0x76c>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043c0:	00d2      	lsls	r2, r2, #3
 80043c2:	492d      	ldr	r1, [pc, #180]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80043c8:	4b2b      	ldr	r3, [pc, #172]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	f023 020c 	bic.w	r2, r3, #12
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	4928      	ldr	r1, [pc, #160]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043da:	4b27      	ldr	r3, [pc, #156]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	f023 0202 	bic.w	r2, r3, #2
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	4924      	ldr	r1, [pc, #144]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043ec:	4b22      	ldr	r3, [pc, #136]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	4a21      	ldr	r2, [pc, #132]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 80043f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f8:	4b1f      	ldr	r3, [pc, #124]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	4a1e      	ldr	r2, [pc, #120]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 80043fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004404:	4b1c      	ldr	r3, [pc, #112]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	4a1b      	ldr	r2, [pc, #108]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 800440a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800440e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004410:	4b19      	ldr	r3, [pc, #100]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	4a18      	ldr	r2, [pc, #96]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800441c:	4b16      	ldr	r3, [pc, #88]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a15      	ldr	r2, [pc, #84]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fd fc74 	bl	8001d14 <HAL_GetTick>
 800442c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004430:	f7fd fc70 	bl	8001d14 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e091      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004442:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x71c>
 800444e:	e089      	b.n	8004564 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004450:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a08      	ldr	r2, [pc, #32]	; (8004478 <HAL_RCC_OscConfig+0x764>)
 8004456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800445a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fd fc5a 	bl	8001d14 <HAL_GetTick>
 8004460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004462:	e00f      	b.n	8004484 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004464:	f7fd fc56 	bl	8001d14 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d908      	bls.n	8004484 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e077      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
 8004476:	bf00      	nop
 8004478:	58024400 	.word	0x58024400
 800447c:	fffffc0c 	.word	0xfffffc0c
 8004480:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004484:	4b3a      	ldr	r3, [pc, #232]	; (8004570 <HAL_RCC_OscConfig+0x85c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e9      	bne.n	8004464 <HAL_RCC_OscConfig+0x750>
 8004490:	e068      	b.n	8004564 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004492:	4b37      	ldr	r3, [pc, #220]	; (8004570 <HAL_RCC_OscConfig+0x85c>)
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004498:	4b35      	ldr	r3, [pc, #212]	; (8004570 <HAL_RCC_OscConfig+0x85c>)
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d031      	beq.n	800450a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f003 0203 	and.w	r2, r3, #3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d12a      	bne.n	800450a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	091b      	lsrs	r3, r3, #4
 80044b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d122      	bne.n	800450a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d11a      	bne.n	800450a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	0a5b      	lsrs	r3, r3, #9
 80044d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d111      	bne.n	800450a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	0c1b      	lsrs	r3, r3, #16
 80044ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d108      	bne.n	800450a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	0e1b      	lsrs	r3, r3, #24
 80044fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004506:	429a      	cmp	r2, r3
 8004508:	d001      	beq.n	800450e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e02b      	b.n	8004566 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800450e:	4b18      	ldr	r3, [pc, #96]	; (8004570 <HAL_RCC_OscConfig+0x85c>)
 8004510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004512:	08db      	lsrs	r3, r3, #3
 8004514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004518:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	429a      	cmp	r2, r3
 8004522:	d01f      	beq.n	8004564 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004524:	4b12      	ldr	r3, [pc, #72]	; (8004570 <HAL_RCC_OscConfig+0x85c>)
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	4a11      	ldr	r2, [pc, #68]	; (8004570 <HAL_RCC_OscConfig+0x85c>)
 800452a:	f023 0301 	bic.w	r3, r3, #1
 800452e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004530:	f7fd fbf0 	bl	8001d14 <HAL_GetTick>
 8004534:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004536:	bf00      	nop
 8004538:	f7fd fbec 	bl	8001d14 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	4293      	cmp	r3, r2
 8004542:	d0f9      	beq.n	8004538 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <HAL_RCC_OscConfig+0x85c>)
 8004546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <HAL_RCC_OscConfig+0x860>)
 800454a:	4013      	ands	r3, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004550:	00d2      	lsls	r2, r2, #3
 8004552:	4907      	ldr	r1, [pc, #28]	; (8004570 <HAL_RCC_OscConfig+0x85c>)
 8004554:	4313      	orrs	r3, r2
 8004556:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HAL_RCC_OscConfig+0x85c>)
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	4a04      	ldr	r2, [pc, #16]	; (8004570 <HAL_RCC_OscConfig+0x85c>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3730      	adds	r7, #48	; 0x30
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	58024400 	.word	0x58024400
 8004574:	ffff0007 	.word	0xffff0007

08004578 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e19c      	b.n	80048c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800458c:	4b8a      	ldr	r3, [pc, #552]	; (80047b8 <HAL_RCC_ClockConfig+0x240>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d910      	bls.n	80045bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459a:	4b87      	ldr	r3, [pc, #540]	; (80047b8 <HAL_RCC_ClockConfig+0x240>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f023 020f 	bic.w	r2, r3, #15
 80045a2:	4985      	ldr	r1, [pc, #532]	; (80047b8 <HAL_RCC_ClockConfig+0x240>)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045aa:	4b83      	ldr	r3, [pc, #524]	; (80047b8 <HAL_RCC_ClockConfig+0x240>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e184      	b.n	80048c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d010      	beq.n	80045ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	4b7b      	ldr	r3, [pc, #492]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d908      	bls.n	80045ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045d8:	4b78      	ldr	r3, [pc, #480]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	4975      	ldr	r1, [pc, #468]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d010      	beq.n	8004618 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	4b70      	ldr	r3, [pc, #448]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004602:	429a      	cmp	r2, r3
 8004604:	d908      	bls.n	8004618 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004606:	4b6d      	ldr	r3, [pc, #436]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	496a      	ldr	r1, [pc, #424]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004614:	4313      	orrs	r3, r2
 8004616:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	d010      	beq.n	8004646 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699a      	ldr	r2, [r3, #24]
 8004628:	4b64      	ldr	r3, [pc, #400]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004630:	429a      	cmp	r2, r3
 8004632:	d908      	bls.n	8004646 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004634:	4b61      	ldr	r3, [pc, #388]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	495e      	ldr	r1, [pc, #376]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004642:	4313      	orrs	r3, r2
 8004644:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d010      	beq.n	8004674 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69da      	ldr	r2, [r3, #28]
 8004656:	4b59      	ldr	r3, [pc, #356]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800465e:	429a      	cmp	r2, r3
 8004660:	d908      	bls.n	8004674 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004662:	4b56      	ldr	r3, [pc, #344]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	4953      	ldr	r1, [pc, #332]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004670:	4313      	orrs	r3, r2
 8004672:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d010      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	4b4d      	ldr	r3, [pc, #308]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	429a      	cmp	r2, r3
 800468e:	d908      	bls.n	80046a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004690:	4b4a      	ldr	r3, [pc, #296]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f023 020f 	bic.w	r2, r3, #15
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4947      	ldr	r1, [pc, #284]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d055      	beq.n	800475a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80046ae:	4b43      	ldr	r3, [pc, #268]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	4940      	ldr	r1, [pc, #256]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d107      	bne.n	80046d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046c8:	4b3c      	ldr	r3, [pc, #240]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d121      	bne.n	8004718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0f6      	b.n	80048c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d107      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046e0:	4b36      	ldr	r3, [pc, #216]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d115      	bne.n	8004718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0ea      	b.n	80048c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d107      	bne.n	8004708 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046f8:	4b30      	ldr	r3, [pc, #192]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d109      	bne.n	8004718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0de      	b.n	80048c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004708:	4b2c      	ldr	r3, [pc, #176]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0d6      	b.n	80048c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004718:	4b28      	ldr	r3, [pc, #160]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f023 0207 	bic.w	r2, r3, #7
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4925      	ldr	r1, [pc, #148]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004726:	4313      	orrs	r3, r2
 8004728:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472a:	f7fd faf3 	bl	8001d14 <HAL_GetTick>
 800472e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004730:	e00a      	b.n	8004748 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004732:	f7fd faef 	bl	8001d14 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004740:	4293      	cmp	r3, r2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e0be      	b.n	80048c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004748:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	429a      	cmp	r2, r3
 8004758:	d1eb      	bne.n	8004732 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d010      	beq.n	8004788 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	4b14      	ldr	r3, [pc, #80]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	429a      	cmp	r2, r3
 8004774:	d208      	bcs.n	8004788 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004776:	4b11      	ldr	r3, [pc, #68]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f023 020f 	bic.w	r2, r3, #15
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	490e      	ldr	r1, [pc, #56]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004784:	4313      	orrs	r3, r2
 8004786:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004788:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <HAL_RCC_ClockConfig+0x240>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d214      	bcs.n	80047c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <HAL_RCC_ClockConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 020f 	bic.w	r2, r3, #15
 800479e:	4906      	ldr	r1, [pc, #24]	; (80047b8 <HAL_RCC_ClockConfig+0x240>)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <HAL_RCC_ClockConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e086      	b.n	80048c6 <HAL_RCC_ClockConfig+0x34e>
 80047b8:	52002000 	.word	0x52002000
 80047bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d010      	beq.n	80047ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	4b3f      	ldr	r3, [pc, #252]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047d8:	429a      	cmp	r2, r3
 80047da:	d208      	bcs.n	80047ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047dc:	4b3c      	ldr	r3, [pc, #240]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	4939      	ldr	r1, [pc, #228]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d010      	beq.n	800481c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695a      	ldr	r2, [r3, #20]
 80047fe:	4b34      	ldr	r3, [pc, #208]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004806:	429a      	cmp	r2, r3
 8004808:	d208      	bcs.n	800481c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800480a:	4b31      	ldr	r3, [pc, #196]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	492e      	ldr	r1, [pc, #184]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 8004818:	4313      	orrs	r3, r2
 800481a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	2b00      	cmp	r3, #0
 8004826:	d010      	beq.n	800484a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004834:	429a      	cmp	r2, r3
 8004836:	d208      	bcs.n	800484a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004838:	4b25      	ldr	r3, [pc, #148]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	4922      	ldr	r1, [pc, #136]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 8004846:	4313      	orrs	r3, r2
 8004848:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d010      	beq.n	8004878 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69da      	ldr	r2, [r3, #28]
 800485a:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004862:	429a      	cmp	r2, r3
 8004864:	d208      	bcs.n	8004878 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004866:	4b1a      	ldr	r3, [pc, #104]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	4917      	ldr	r1, [pc, #92]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 8004874:	4313      	orrs	r3, r2
 8004876:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004878:	f000 f89e 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 800487c:	4602      	mov	r2, r0
 800487e:	4b14      	ldr	r3, [pc, #80]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	4912      	ldr	r1, [pc, #72]	; (80048d4 <HAL_RCC_ClockConfig+0x35c>)
 800488a:	5ccb      	ldrb	r3, [r1, r3]
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	fa22 f303 	lsr.w	r3, r2, r3
 8004894:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004896:	4b0e      	ldr	r3, [pc, #56]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	4a0d      	ldr	r2, [pc, #52]	; (80048d4 <HAL_RCC_ClockConfig+0x35c>)
 80048a0:	5cd3      	ldrb	r3, [r2, r3]
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
 80048ac:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <HAL_RCC_ClockConfig+0x360>)
 80048ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048b0:	4a0a      	ldr	r2, [pc, #40]	; (80048dc <HAL_RCC_ClockConfig+0x364>)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80048b6:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <HAL_RCC_ClockConfig+0x368>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fd f88a 	bl	80019d4 <HAL_InitTick>
 80048c0:	4603      	mov	r3, r0
 80048c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	58024400 	.word	0x58024400
 80048d4:	0800c220 	.word	0x0800c220
 80048d8:	24000004 	.word	0x24000004
 80048dc:	24000000 	.word	0x24000000
 80048e0:	24000008 	.word	0x24000008

080048e4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08c      	sub	sp, #48	; 0x30
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d12a      	bne.n	800494c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80048f6:	4b2d      	ldr	r3, [pc, #180]	; (80049ac <HAL_RCC_MCOConfig+0xc8>)
 80048f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80048fc:	4a2b      	ldr	r2, [pc, #172]	; (80049ac <HAL_RCC_MCOConfig+0xc8>)
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004906:	4b29      	ldr	r3, [pc, #164]	; (80049ac <HAL_RCC_MCOConfig+0xc8>)
 8004908:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004914:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800491a:	2302      	movs	r3, #2
 800491c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800491e:	2303      	movs	r3, #3
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004922:	2300      	movs	r3, #0
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004926:	2300      	movs	r3, #0
 8004928:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800492a:	f107 031c 	add.w	r3, r7, #28
 800492e:	4619      	mov	r1, r3
 8004930:	481f      	ldr	r0, [pc, #124]	; (80049b0 <HAL_RCC_MCOConfig+0xcc>)
 8004932:	f7fd fadb 	bl	8001eec <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004936:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <HAL_RCC_MCOConfig+0xc8>)
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	430b      	orrs	r3, r1
 8004944:	4919      	ldr	r1, [pc, #100]	; (80049ac <HAL_RCC_MCOConfig+0xc8>)
 8004946:	4313      	orrs	r3, r2
 8004948:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800494a:	e02a      	b.n	80049a2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800494c:	4b17      	ldr	r3, [pc, #92]	; (80049ac <HAL_RCC_MCOConfig+0xc8>)
 800494e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004952:	4a16      	ldr	r2, [pc, #88]	; (80049ac <HAL_RCC_MCOConfig+0xc8>)
 8004954:	f043 0304 	orr.w	r3, r3, #4
 8004958:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800495c:	4b13      	ldr	r3, [pc, #76]	; (80049ac <HAL_RCC_MCOConfig+0xc8>)
 800495e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800496a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800496e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004970:	2302      	movs	r3, #2
 8004972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004974:	2303      	movs	r3, #3
 8004976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004978:	2300      	movs	r3, #0
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800497c:	2300      	movs	r3, #0
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004980:	f107 031c 	add.w	r3, r7, #28
 8004984:	4619      	mov	r1, r3
 8004986:	480b      	ldr	r0, [pc, #44]	; (80049b4 <HAL_RCC_MCOConfig+0xd0>)
 8004988:	f7fd fab0 	bl	8001eec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800498c:	4b07      	ldr	r3, [pc, #28]	; (80049ac <HAL_RCC_MCOConfig+0xc8>)
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	01d9      	lsls	r1, r3, #7
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	430b      	orrs	r3, r1
 800499c:	4903      	ldr	r1, [pc, #12]	; (80049ac <HAL_RCC_MCOConfig+0xc8>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	610b      	str	r3, [r1, #16]
}
 80049a2:	bf00      	nop
 80049a4:	3730      	adds	r7, #48	; 0x30
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	58024400 	.word	0x58024400
 80049b0:	58020000 	.word	0x58020000
 80049b4:	58020800 	.word	0x58020800

080049b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b089      	sub	sp, #36	; 0x24
 80049bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049be:	4bb3      	ldr	r3, [pc, #716]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049c6:	2b18      	cmp	r3, #24
 80049c8:	f200 8155 	bhi.w	8004c76 <HAL_RCC_GetSysClockFreq+0x2be>
 80049cc:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80049ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d2:	bf00      	nop
 80049d4:	08004a39 	.word	0x08004a39
 80049d8:	08004c77 	.word	0x08004c77
 80049dc:	08004c77 	.word	0x08004c77
 80049e0:	08004c77 	.word	0x08004c77
 80049e4:	08004c77 	.word	0x08004c77
 80049e8:	08004c77 	.word	0x08004c77
 80049ec:	08004c77 	.word	0x08004c77
 80049f0:	08004c77 	.word	0x08004c77
 80049f4:	08004a5f 	.word	0x08004a5f
 80049f8:	08004c77 	.word	0x08004c77
 80049fc:	08004c77 	.word	0x08004c77
 8004a00:	08004c77 	.word	0x08004c77
 8004a04:	08004c77 	.word	0x08004c77
 8004a08:	08004c77 	.word	0x08004c77
 8004a0c:	08004c77 	.word	0x08004c77
 8004a10:	08004c77 	.word	0x08004c77
 8004a14:	08004a65 	.word	0x08004a65
 8004a18:	08004c77 	.word	0x08004c77
 8004a1c:	08004c77 	.word	0x08004c77
 8004a20:	08004c77 	.word	0x08004c77
 8004a24:	08004c77 	.word	0x08004c77
 8004a28:	08004c77 	.word	0x08004c77
 8004a2c:	08004c77 	.word	0x08004c77
 8004a30:	08004c77 	.word	0x08004c77
 8004a34:	08004a6b 	.word	0x08004a6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a38:	4b94      	ldr	r3, [pc, #592]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d009      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a44:	4b91      	ldr	r3, [pc, #580]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	08db      	lsrs	r3, r3, #3
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	4a90      	ldr	r2, [pc, #576]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
 8004a54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004a56:	e111      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a58:	4b8d      	ldr	r3, [pc, #564]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a5a:	61bb      	str	r3, [r7, #24]
      break;
 8004a5c:	e10e      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004a5e:	4b8d      	ldr	r3, [pc, #564]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a60:	61bb      	str	r3, [r7, #24]
      break;
 8004a62:	e10b      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004a64:	4b8c      	ldr	r3, [pc, #560]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a66:	61bb      	str	r3, [r7, #24]
      break;
 8004a68:	e108      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a6a:	4b88      	ldr	r3, [pc, #544]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004a74:	4b85      	ldr	r3, [pc, #532]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a7e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a80:	4b82      	ldr	r3, [pc, #520]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004a8a:	4b80      	ldr	r3, [pc, #512]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8e:	08db      	lsrs	r3, r3, #3
 8004a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	fb02 f303 	mul.w	r3, r2, r3
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80e1 	beq.w	8004c70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	f000 8083 	beq.w	8004bbc <HAL_RCC_GetSysClockFreq+0x204>
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	f200 80a1 	bhi.w	8004c00 <HAL_RCC_GetSysClockFreq+0x248>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HAL_RCC_GetSysClockFreq+0x114>
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d056      	beq.n	8004b78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004aca:	e099      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004acc:	4b6f      	ldr	r3, [pc, #444]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d02d      	beq.n	8004b34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ad8:	4b6c      	ldr	r3, [pc, #432]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	08db      	lsrs	r3, r3, #3
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	4a6b      	ldr	r2, [pc, #428]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	ee07 3a90 	vmov	s15, r3
 8004af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b02:	4b62      	ldr	r3, [pc, #392]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b16:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004b32:	e087      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004ca0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b46:	4b51      	ldr	r3, [pc, #324]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b5a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b76:	e065      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b82:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004ca4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b8a:	4b40      	ldr	r3, [pc, #256]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b9e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bba:	e043      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004ca8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bce:	4b2f      	ldr	r3, [pc, #188]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8004be2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bfe:	e021      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004ca4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c12:	4b1e      	ldr	r3, [pc, #120]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c26:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c42:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004c44:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c48:	0a5b      	lsrs	r3, r3, #9
 8004c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c4e:	3301      	adds	r3, #1
 8004c50:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	ee07 3a90 	vmov	s15, r3
 8004c58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c68:	ee17 3a90 	vmov	r3, s15
 8004c6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004c6e:	e005      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61bb      	str	r3, [r7, #24]
      break;
 8004c74:	e002      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004c76:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c78:	61bb      	str	r3, [r7, #24]
      break;
 8004c7a:	bf00      	nop
  }

  return sysclockfreq;
 8004c7c:	69bb      	ldr	r3, [r7, #24]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3724      	adds	r7, #36	; 0x24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	58024400 	.word	0x58024400
 8004c90:	03d09000 	.word	0x03d09000
 8004c94:	003d0900 	.word	0x003d0900
 8004c98:	016e3600 	.word	0x016e3600
 8004c9c:	46000000 	.word	0x46000000
 8004ca0:	4c742400 	.word	0x4c742400
 8004ca4:	4a742400 	.word	0x4a742400
 8004ca8:	4bb71b00 	.word	0x4bb71b00

08004cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004cb2:	f7ff fe81 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <HAL_RCC_GetHCLKFreq+0x50>)
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	0a1b      	lsrs	r3, r3, #8
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	490f      	ldr	r1, [pc, #60]	; (8004d00 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cc4:	5ccb      	ldrb	r3, [r1, r3]
 8004cc6:	f003 031f 	and.w	r3, r3, #31
 8004cca:	fa22 f303 	lsr.w	r3, r2, r3
 8004cce:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <HAL_RCC_GetHCLKFreq+0x50>)
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cda:	5cd3      	ldrb	r3, [r2, r3]
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce6:	4a07      	ldr	r2, [pc, #28]	; (8004d04 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ce8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cea:	4a07      	ldr	r2, [pc, #28]	; (8004d08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004cf0:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	58024400 	.word	0x58024400
 8004d00:	0800c220 	.word	0x0800c220
 8004d04:	24000004 	.word	0x24000004
 8004d08:	24000000 	.word	0x24000000

08004d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004d10:	f7ff ffcc 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	4904      	ldr	r1, [pc, #16]	; (8004d34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	58024400 	.word	0x58024400
 8004d34:	0800c220 	.word	0x0800c220

08004d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004d3c:	f7ff ffb6 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8004d40:	4602      	mov	r2, r0
 8004d42:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	4904      	ldr	r1, [pc, #16]	; (8004d60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d4e:	5ccb      	ldrb	r3, [r1, r3]
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	0800c220 	.word	0x0800c220

08004d64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	223f      	movs	r2, #63	; 0x3f
 8004d72:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d74:	4b1a      	ldr	r3, [pc, #104]	; (8004de0 <HAL_RCC_GetClockConfig+0x7c>)
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f003 0207 	and.w	r2, r3, #7
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8004d80:	4b17      	ldr	r3, [pc, #92]	; (8004de0 <HAL_RCC_GetClockConfig+0x7c>)
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8004d8c:	4b14      	ldr	r3, [pc, #80]	; (8004de0 <HAL_RCC_GetClockConfig+0x7c>)
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	f003 020f 	and.w	r2, r3, #15
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8004d98:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <HAL_RCC_GetClockConfig+0x7c>)
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8004da4:	4b0e      	ldr	r3, [pc, #56]	; (8004de0 <HAL_RCC_GetClockConfig+0x7c>)
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <HAL_RCC_GetClockConfig+0x7c>)
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <HAL_RCC_GetClockConfig+0x7c>)
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004dc8:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_RCC_GetClockConfig+0x80>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 020f 	and.w	r2, r3, #15
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	601a      	str	r2, [r3, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	58024400 	.word	0x58024400
 8004de4:	52002000 	.word	0x52002000

08004de8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dec:	b0c8      	sub	sp, #288	; 0x120
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004df4:	2300      	movs	r3, #0
 8004df6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004e0c:	2500      	movs	r5, #0
 8004e0e:	ea54 0305 	orrs.w	r3, r4, r5
 8004e12:	d049      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e1e:	d02f      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004e20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e24:	d828      	bhi.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e2a:	d01a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e30:	d822      	bhi.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e3a:	d007      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e3c:	e01c      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e3e:	4ba7      	ldr	r3, [pc, #668]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	4aa6      	ldr	r2, [pc, #664]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e4a:	e01a      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e50:	3308      	adds	r3, #8
 8004e52:	2102      	movs	r1, #2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f002 fa6d 	bl	8007334 <RCCEx_PLL2_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e60:	e00f      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e66:	3328      	adds	r3, #40	; 0x28
 8004e68:	2102      	movs	r1, #2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f002 fb14 	bl	8007498 <RCCEx_PLL3_Config>
 8004e70:	4603      	mov	r3, r0
 8004e72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e76:	e004      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004e7e:	e000      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e8a:	4b94      	ldr	r3, [pc, #592]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e98:	4a90      	ldr	r2, [pc, #576]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e9a:	430b      	orrs	r3, r1
 8004e9c:	6513      	str	r3, [r2, #80]	; 0x50
 8004e9e:	e003      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ea4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004eb4:	f04f 0900 	mov.w	r9, #0
 8004eb8:	ea58 0309 	orrs.w	r3, r8, r9
 8004ebc:	d047      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d82a      	bhi.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004ec8:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ece:	bf00      	nop
 8004ed0:	08004ee5 	.word	0x08004ee5
 8004ed4:	08004ef3 	.word	0x08004ef3
 8004ed8:	08004f09 	.word	0x08004f09
 8004edc:	08004f27 	.word	0x08004f27
 8004ee0:	08004f27 	.word	0x08004f27
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee4:	4b7d      	ldr	r3, [pc, #500]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	4a7c      	ldr	r2, [pc, #496]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ef0:	e01a      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	f002 fa1a 	bl	8007334 <RCCEx_PLL2_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f06:	e00f      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f0c:	3328      	adds	r3, #40	; 0x28
 8004f0e:	2100      	movs	r1, #0
 8004f10:	4618      	mov	r0, r3
 8004f12:	f002 fac1 	bl	8007498 <RCCEx_PLL3_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f1c:	e004      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004f24:	e000      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10a      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f30:	4b6a      	ldr	r3, [pc, #424]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f34:	f023 0107 	bic.w	r1, r3, #7
 8004f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3e:	4a67      	ldr	r2, [pc, #412]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f40:	430b      	orrs	r3, r1
 8004f42:	6513      	str	r3, [r2, #80]	; 0x50
 8004f44:	e003      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004f5a:	f04f 0b00 	mov.w	fp, #0
 8004f5e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004f62:	d054      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f6a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004f6e:	d036      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004f70:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004f74:	d82f      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7a:	d032      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f80:	d829      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004f82:	2bc0      	cmp	r3, #192	; 0xc0
 8004f84:	d02f      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004f86:	2bc0      	cmp	r3, #192	; 0xc0
 8004f88:	d825      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004f8a:	2b80      	cmp	r3, #128	; 0x80
 8004f8c:	d018      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004f8e:	2b80      	cmp	r3, #128	; 0x80
 8004f90:	d821      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d007      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004f9a:	e01c      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f9c:	4b4f      	ldr	r3, [pc, #316]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	4a4e      	ldr	r2, [pc, #312]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004fa8:	e01e      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fae:	3308      	adds	r3, #8
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f002 f9be 	bl	8007334 <RCCEx_PLL2_Config>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004fbe:	e013      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc4:	3328      	adds	r3, #40	; 0x28
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f002 fa65 	bl	8007498 <RCCEx_PLL3_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004fdc:	e004      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004fde:	bf00      	nop
 8004fe0:	e002      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004fe2:	bf00      	nop
 8004fe4:	e000      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fe8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004ff0:	4b3a      	ldr	r3, [pc, #232]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffe:	4a37      	ldr	r2, [pc, #220]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005000:	430b      	orrs	r3, r1
 8005002:	6513      	str	r3, [r2, #80]	; 0x50
 8005004:	e003      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005006:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800500a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800500e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800501a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800501e:	2300      	movs	r3, #0
 8005020:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005024:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005028:	460b      	mov	r3, r1
 800502a:	4313      	orrs	r3, r2
 800502c:	d05c      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800502e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005034:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005038:	d03b      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800503a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800503e:	d834      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005044:	d037      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800504a:	d82e      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800504c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005050:	d033      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005052:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005056:	d828      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800505c:	d01a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800505e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005062:	d822      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800506c:	d007      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800506e:	e01c      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005070:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	4a19      	ldr	r2, [pc, #100]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800507a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800507c:	e01e      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800507e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005082:	3308      	adds	r3, #8
 8005084:	2100      	movs	r1, #0
 8005086:	4618      	mov	r0, r3
 8005088:	f002 f954 	bl	8007334 <RCCEx_PLL2_Config>
 800508c:	4603      	mov	r3, r0
 800508e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005092:	e013      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005098:	3328      	adds	r3, #40	; 0x28
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f002 f9fb 	bl	8007498 <RCCEx_PLL3_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80050a8:	e008      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80050b0:	e004      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80050b2:	bf00      	nop
 80050b4:	e002      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80050b6:	bf00      	nop
 80050b8:	e000      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80050ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10d      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80050cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d2:	4a02      	ldr	r2, [pc, #8]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050d4:	430b      	orrs	r3, r1
 80050d6:	6513      	str	r3, [r2, #80]	; 0x50
 80050d8:	e006      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80050da:	bf00      	nop
 80050dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80050e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80050f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80050f8:	2300      	movs	r3, #0
 80050fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80050fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005102:	460b      	mov	r3, r1
 8005104:	4313      	orrs	r3, r2
 8005106:	d03a      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005108:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800510c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510e:	2b30      	cmp	r3, #48	; 0x30
 8005110:	d01f      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005112:	2b30      	cmp	r3, #48	; 0x30
 8005114:	d819      	bhi.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005116:	2b20      	cmp	r3, #32
 8005118:	d00c      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800511a:	2b20      	cmp	r3, #32
 800511c:	d815      	bhi.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d019      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005122:	2b10      	cmp	r3, #16
 8005124:	d111      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005126:	4bae      	ldr	r3, [pc, #696]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	4aad      	ldr	r2, [pc, #692]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800512c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005130:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005132:	e011      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005138:	3308      	adds	r3, #8
 800513a:	2102      	movs	r1, #2
 800513c:	4618      	mov	r0, r3
 800513e:	f002 f8f9 	bl	8007334 <RCCEx_PLL2_Config>
 8005142:	4603      	mov	r3, r0
 8005144:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005148:	e006      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005150:	e002      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005152:	bf00      	nop
 8005154:	e000      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005158:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10a      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005160:	4b9f      	ldr	r3, [pc, #636]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005164:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800516c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516e:	4a9c      	ldr	r2, [pc, #624]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005170:	430b      	orrs	r3, r1
 8005172:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005174:	e003      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005176:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800517a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800517e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800518a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800518e:	2300      	movs	r3, #0
 8005190:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005194:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005198:	460b      	mov	r3, r1
 800519a:	4313      	orrs	r3, r2
 800519c:	d051      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800519e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051a8:	d035      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80051aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ae:	d82e      	bhi.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80051b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051b4:	d031      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80051b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051ba:	d828      	bhi.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80051bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c0:	d01a      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80051c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c6:	d822      	bhi.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80051cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d0:	d007      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80051d2:	e01c      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d4:	4b82      	ldr	r3, [pc, #520]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	4a81      	ldr	r2, [pc, #516]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051e0:	e01c      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e6:	3308      	adds	r3, #8
 80051e8:	2100      	movs	r1, #0
 80051ea:	4618      	mov	r0, r3
 80051ec:	f002 f8a2 	bl	8007334 <RCCEx_PLL2_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051f6:	e011      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051fc:	3328      	adds	r3, #40	; 0x28
 80051fe:	2100      	movs	r1, #0
 8005200:	4618      	mov	r0, r3
 8005202:	f002 f949 	bl	8007498 <RCCEx_PLL3_Config>
 8005206:	4603      	mov	r3, r0
 8005208:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800520c:	e006      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005214:	e002      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005216:	bf00      	nop
 8005218:	e000      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800521a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800521c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005224:	4b6e      	ldr	r3, [pc, #440]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005228:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800522c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005232:	4a6b      	ldr	r2, [pc, #428]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005234:	430b      	orrs	r3, r1
 8005236:	6513      	str	r3, [r2, #80]	; 0x50
 8005238:	e003      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800523e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800524e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005252:	2300      	movs	r3, #0
 8005254:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005258:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800525c:	460b      	mov	r3, r1
 800525e:	4313      	orrs	r3, r2
 8005260:	d053      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800526c:	d033      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800526e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005272:	d82c      	bhi.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005274:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005278:	d02f      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800527a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800527e:	d826      	bhi.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005280:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005284:	d02b      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005286:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800528a:	d820      	bhi.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800528c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005290:	d012      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005296:	d81a      	bhi.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d022      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800529c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a0:	d115      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a6:	3308      	adds	r3, #8
 80052a8:	2101      	movs	r1, #1
 80052aa:	4618      	mov	r0, r3
 80052ac:	f002 f842 	bl	8007334 <RCCEx_PLL2_Config>
 80052b0:	4603      	mov	r3, r0
 80052b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80052b6:	e015      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052bc:	3328      	adds	r3, #40	; 0x28
 80052be:	2101      	movs	r1, #1
 80052c0:	4618      	mov	r0, r3
 80052c2:	f002 f8e9 	bl	8007498 <RCCEx_PLL3_Config>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80052cc:	e00a      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80052d4:	e006      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80052d6:	bf00      	nop
 80052d8:	e004      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80052da:	bf00      	nop
 80052dc:	e002      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80052de:	bf00      	nop
 80052e0:	e000      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80052e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10a      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80052ec:	4b3c      	ldr	r3, [pc, #240]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80052f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052fa:	4a39      	ldr	r2, [pc, #228]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052fc:	430b      	orrs	r3, r1
 80052fe:	6513      	str	r3, [r2, #80]	; 0x50
 8005300:	e003      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005302:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005306:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800530a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005312:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005316:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800531a:	2300      	movs	r3, #0
 800531c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005320:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005324:	460b      	mov	r3, r1
 8005326:	4313      	orrs	r3, r2
 8005328:	d060      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800532a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800532e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005332:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005336:	d039      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005338:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800533c:	d832      	bhi.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800533e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005342:	d035      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005348:	d82c      	bhi.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800534a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534e:	d031      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005354:	d826      	bhi.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005356:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800535a:	d02d      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800535c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005360:	d820      	bhi.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005366:	d012      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800536c:	d81a      	bhi.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d024      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005376:	d115      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800537c:	3308      	adds	r3, #8
 800537e:	2101      	movs	r1, #1
 8005380:	4618      	mov	r0, r3
 8005382:	f001 ffd7 	bl	8007334 <RCCEx_PLL2_Config>
 8005386:	4603      	mov	r3, r0
 8005388:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800538c:	e017      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800538e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005392:	3328      	adds	r3, #40	; 0x28
 8005394:	2101      	movs	r1, #1
 8005396:	4618      	mov	r0, r3
 8005398:	f002 f87e 	bl	8007498 <RCCEx_PLL3_Config>
 800539c:	4603      	mov	r3, r0
 800539e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053a2:	e00c      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80053aa:	e008      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80053ac:	bf00      	nop
 80053ae:	e006      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80053b0:	bf00      	nop
 80053b2:	e004      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80053b4:	bf00      	nop
 80053b6:	e002      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80053b8:	bf00      	nop
 80053ba:	e000      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80053bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10e      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80053ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053d6:	4a02      	ldr	r2, [pc, #8]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053d8:	430b      	orrs	r3, r1
 80053da:	6593      	str	r3, [r2, #88]	; 0x58
 80053dc:	e006      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x604>
 80053de:	bf00      	nop
 80053e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80053ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80053f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053fc:	2300      	movs	r3, #0
 80053fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005402:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005406:	460b      	mov	r3, r1
 8005408:	4313      	orrs	r3, r2
 800540a:	d037      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800540c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005416:	d00e      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800541c:	d816      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800541e:	2b00      	cmp	r3, #0
 8005420:	d018      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005426:	d111      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005428:	4bc4      	ldr	r3, [pc, #784]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	4ac3      	ldr	r2, [pc, #780]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800542e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005432:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005434:	e00f      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800543a:	3308      	adds	r3, #8
 800543c:	2101      	movs	r1, #1
 800543e:	4618      	mov	r0, r3
 8005440:	f001 ff78 	bl	8007334 <RCCEx_PLL2_Config>
 8005444:	4603      	mov	r3, r0
 8005446:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800544a:	e004      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005452:	e000      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005456:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10a      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800545e:	4bb7      	ldr	r3, [pc, #732]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005462:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800546a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800546c:	4ab3      	ldr	r2, [pc, #716]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800546e:	430b      	orrs	r3, r1
 8005470:	6513      	str	r3, [r2, #80]	; 0x50
 8005472:	e003      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005474:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005478:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800547c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005484:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800548c:	2300      	movs	r3, #0
 800548e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005492:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005496:	460b      	mov	r3, r1
 8005498:	4313      	orrs	r3, r2
 800549a:	d039      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800549c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	d81c      	bhi.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80054a6:	a201      	add	r2, pc, #4	; (adr r2, 80054ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80054a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ac:	080054e9 	.word	0x080054e9
 80054b0:	080054bd 	.word	0x080054bd
 80054b4:	080054cb 	.word	0x080054cb
 80054b8:	080054e9 	.word	0x080054e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054bc:	4b9f      	ldr	r3, [pc, #636]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	4a9e      	ldr	r2, [pc, #632]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80054c8:	e00f      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ce:	3308      	adds	r3, #8
 80054d0:	2102      	movs	r1, #2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f001 ff2e 	bl	8007334 <RCCEx_PLL2_Config>
 80054d8:	4603      	mov	r3, r0
 80054da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80054de:	e004      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80054e6:	e000      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80054e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10a      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80054f2:	4b92      	ldr	r3, [pc, #584]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f6:	f023 0103 	bic.w	r1, r3, #3
 80054fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005500:	4a8e      	ldr	r2, [pc, #568]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005502:	430b      	orrs	r3, r1
 8005504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005506:	e003      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005508:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800550c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800551c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005520:	2300      	movs	r3, #0
 8005522:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005526:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800552a:	460b      	mov	r3, r1
 800552c:	4313      	orrs	r3, r2
 800552e:	f000 8099 	beq.w	8005664 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005532:	4b83      	ldr	r3, [pc, #524]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a82      	ldr	r2, [pc, #520]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800553e:	f7fc fbe9 	bl	8001d14 <HAL_GetTick>
 8005542:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005546:	e00b      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005548:	f7fc fbe4 	bl	8001d14 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b64      	cmp	r3, #100	; 0x64
 8005556:	d903      	bls.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800555e:	e005      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005560:	4b77      	ldr	r3, [pc, #476]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0ed      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800556c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005570:	2b00      	cmp	r3, #0
 8005572:	d173      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005574:	4b71      	ldr	r3, [pc, #452]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005576:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800557c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005580:	4053      	eors	r3, r2
 8005582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005586:	2b00      	cmp	r3, #0
 8005588:	d015      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800558a:	4b6c      	ldr	r3, [pc, #432]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005592:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005596:	4b69      	ldr	r3, [pc, #420]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559a:	4a68      	ldr	r2, [pc, #416]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800559c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055a2:	4b66      	ldr	r3, [pc, #408]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a6:	4a65      	ldr	r2, [pc, #404]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80055ae:	4a63      	ldr	r2, [pc, #396]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80055b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80055be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c2:	d118      	bne.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7fc fba6 	bl	8001d14 <HAL_GetTick>
 80055c8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055cc:	e00d      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ce:	f7fc fba1 	bl	8001d14 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80055d8:	1ad2      	subs	r2, r2, r3
 80055da:	f241 3388 	movw	r3, #5000	; 0x1388
 80055de:	429a      	cmp	r2, r3
 80055e0:	d903      	bls.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80055e8:	e005      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055ea:	4b54      	ldr	r3, [pc, #336]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0eb      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80055f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d129      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005602:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800560e:	d10e      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005610:	4b4a      	ldr	r3, [pc, #296]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800561c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005620:	091a      	lsrs	r2, r3, #4
 8005622:	4b48      	ldr	r3, [pc, #288]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005624:	4013      	ands	r3, r2
 8005626:	4a45      	ldr	r2, [pc, #276]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005628:	430b      	orrs	r3, r1
 800562a:	6113      	str	r3, [r2, #16]
 800562c:	e005      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800562e:	4b43      	ldr	r3, [pc, #268]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	4a42      	ldr	r2, [pc, #264]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005634:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005638:	6113      	str	r3, [r2, #16]
 800563a:	4b40      	ldr	r3, [pc, #256]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800563c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800563e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005642:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800564a:	4a3c      	ldr	r2, [pc, #240]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800564c:	430b      	orrs	r3, r1
 800564e:	6713      	str	r3, [r2, #112]	; 0x70
 8005650:	e008      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005652:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005656:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800565a:	e003      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005660:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f002 0301 	and.w	r3, r2, #1
 8005670:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005674:	2300      	movs	r3, #0
 8005676:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800567a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800567e:	460b      	mov	r3, r1
 8005680:	4313      	orrs	r3, r2
 8005682:	f000 8090 	beq.w	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800568a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800568e:	2b28      	cmp	r3, #40	; 0x28
 8005690:	d870      	bhi.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005692:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	0800577d 	.word	0x0800577d
 800569c:	08005775 	.word	0x08005775
 80056a0:	08005775 	.word	0x08005775
 80056a4:	08005775 	.word	0x08005775
 80056a8:	08005775 	.word	0x08005775
 80056ac:	08005775 	.word	0x08005775
 80056b0:	08005775 	.word	0x08005775
 80056b4:	08005775 	.word	0x08005775
 80056b8:	08005749 	.word	0x08005749
 80056bc:	08005775 	.word	0x08005775
 80056c0:	08005775 	.word	0x08005775
 80056c4:	08005775 	.word	0x08005775
 80056c8:	08005775 	.word	0x08005775
 80056cc:	08005775 	.word	0x08005775
 80056d0:	08005775 	.word	0x08005775
 80056d4:	08005775 	.word	0x08005775
 80056d8:	0800575f 	.word	0x0800575f
 80056dc:	08005775 	.word	0x08005775
 80056e0:	08005775 	.word	0x08005775
 80056e4:	08005775 	.word	0x08005775
 80056e8:	08005775 	.word	0x08005775
 80056ec:	08005775 	.word	0x08005775
 80056f0:	08005775 	.word	0x08005775
 80056f4:	08005775 	.word	0x08005775
 80056f8:	0800577d 	.word	0x0800577d
 80056fc:	08005775 	.word	0x08005775
 8005700:	08005775 	.word	0x08005775
 8005704:	08005775 	.word	0x08005775
 8005708:	08005775 	.word	0x08005775
 800570c:	08005775 	.word	0x08005775
 8005710:	08005775 	.word	0x08005775
 8005714:	08005775 	.word	0x08005775
 8005718:	0800577d 	.word	0x0800577d
 800571c:	08005775 	.word	0x08005775
 8005720:	08005775 	.word	0x08005775
 8005724:	08005775 	.word	0x08005775
 8005728:	08005775 	.word	0x08005775
 800572c:	08005775 	.word	0x08005775
 8005730:	08005775 	.word	0x08005775
 8005734:	08005775 	.word	0x08005775
 8005738:	0800577d 	.word	0x0800577d
 800573c:	58024400 	.word	0x58024400
 8005740:	58024800 	.word	0x58024800
 8005744:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800574c:	3308      	adds	r3, #8
 800574e:	2101      	movs	r1, #1
 8005750:	4618      	mov	r0, r3
 8005752:	f001 fdef 	bl	8007334 <RCCEx_PLL2_Config>
 8005756:	4603      	mov	r3, r0
 8005758:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800575c:	e00f      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800575e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005762:	3328      	adds	r3, #40	; 0x28
 8005764:	2101      	movs	r1, #1
 8005766:	4618      	mov	r0, r3
 8005768:	f001 fe96 	bl	8007498 <RCCEx_PLL3_Config>
 800576c:	4603      	mov	r3, r0
 800576e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005772:	e004      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800577a:	e000      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800577c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800577e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10b      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005786:	4bc0      	ldr	r3, [pc, #768]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800578e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005796:	4abc      	ldr	r2, [pc, #752]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005798:	430b      	orrs	r3, r1
 800579a:	6553      	str	r3, [r2, #84]	; 0x54
 800579c:	e003      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80057a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f002 0302 	and.w	r3, r2, #2
 80057b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057b6:	2300      	movs	r3, #0
 80057b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80057bc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80057c0:	460b      	mov	r3, r1
 80057c2:	4313      	orrs	r3, r2
 80057c4:	d043      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80057c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ce:	2b05      	cmp	r3, #5
 80057d0:	d824      	bhi.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80057d2:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	08005825 	.word	0x08005825
 80057dc:	080057f1 	.word	0x080057f1
 80057e0:	08005807 	.word	0x08005807
 80057e4:	08005825 	.word	0x08005825
 80057e8:	08005825 	.word	0x08005825
 80057ec:	08005825 	.word	0x08005825
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057f4:	3308      	adds	r3, #8
 80057f6:	2101      	movs	r1, #1
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 fd9b 	bl	8007334 <RCCEx_PLL2_Config>
 80057fe:	4603      	mov	r3, r0
 8005800:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005804:	e00f      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800580a:	3328      	adds	r3, #40	; 0x28
 800580c:	2101      	movs	r1, #1
 800580e:	4618      	mov	r0, r3
 8005810:	f001 fe42 	bl	8007498 <RCCEx_PLL3_Config>
 8005814:	4603      	mov	r3, r0
 8005816:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800581a:	e004      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005822:	e000      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005826:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10b      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800582e:	4b96      	ldr	r3, [pc, #600]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005832:	f023 0107 	bic.w	r1, r3, #7
 8005836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800583a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800583e:	4a92      	ldr	r2, [pc, #584]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005840:	430b      	orrs	r3, r1
 8005842:	6553      	str	r3, [r2, #84]	; 0x54
 8005844:	e003      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005846:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800584a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800584e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	f002 0304 	and.w	r3, r2, #4
 800585a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800585e:	2300      	movs	r3, #0
 8005860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005864:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005868:	460b      	mov	r3, r1
 800586a:	4313      	orrs	r3, r2
 800586c:	d043      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800586e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005872:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005876:	2b05      	cmp	r3, #5
 8005878:	d824      	bhi.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800587a:	a201      	add	r2, pc, #4	; (adr r2, 8005880 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800587c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005880:	080058cd 	.word	0x080058cd
 8005884:	08005899 	.word	0x08005899
 8005888:	080058af 	.word	0x080058af
 800588c:	080058cd 	.word	0x080058cd
 8005890:	080058cd 	.word	0x080058cd
 8005894:	080058cd 	.word	0x080058cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800589c:	3308      	adds	r3, #8
 800589e:	2101      	movs	r1, #1
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 fd47 	bl	8007334 <RCCEx_PLL2_Config>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058ac:	e00f      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058b2:	3328      	adds	r3, #40	; 0x28
 80058b4:	2101      	movs	r1, #1
 80058b6:	4618      	mov	r0, r3
 80058b8:	f001 fdee 	bl	8007498 <RCCEx_PLL3_Config>
 80058bc:	4603      	mov	r3, r0
 80058be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058c2:	e004      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80058ca:	e000      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80058cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10b      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058d6:	4b6c      	ldr	r3, [pc, #432]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80058d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058da:	f023 0107 	bic.w	r1, r3, #7
 80058de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058e6:	4a68      	ldr	r2, [pc, #416]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80058e8:	430b      	orrs	r3, r1
 80058ea:	6593      	str	r3, [r2, #88]	; 0x58
 80058ec:	e003      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	f002 0320 	and.w	r3, r2, #32
 8005902:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005906:	2300      	movs	r3, #0
 8005908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800590c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005910:	460b      	mov	r3, r1
 8005912:	4313      	orrs	r3, r2
 8005914:	d055      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800591a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800591e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005922:	d033      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005928:	d82c      	bhi.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800592a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592e:	d02f      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005934:	d826      	bhi.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005936:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800593a:	d02b      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800593c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005940:	d820      	bhi.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005946:	d012      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800594c:	d81a      	bhi.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d022      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005956:	d115      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800595c:	3308      	adds	r3, #8
 800595e:	2100      	movs	r1, #0
 8005960:	4618      	mov	r0, r3
 8005962:	f001 fce7 	bl	8007334 <RCCEx_PLL2_Config>
 8005966:	4603      	mov	r3, r0
 8005968:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800596c:	e015      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800596e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005972:	3328      	adds	r3, #40	; 0x28
 8005974:	2102      	movs	r1, #2
 8005976:	4618      	mov	r0, r3
 8005978:	f001 fd8e 	bl	8007498 <RCCEx_PLL3_Config>
 800597c:	4603      	mov	r3, r0
 800597e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005982:	e00a      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800598a:	e006      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800598c:	bf00      	nop
 800598e:	e004      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005990:	bf00      	nop
 8005992:	e002      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005994:	bf00      	nop
 8005996:	e000      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800599a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10b      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059a2:	4b39      	ldr	r3, [pc, #228]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80059a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80059aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059b2:	4a35      	ldr	r2, [pc, #212]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80059b4:	430b      	orrs	r3, r1
 80059b6:	6553      	str	r3, [r2, #84]	; 0x54
 80059b8:	e003      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80059ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059d2:	2300      	movs	r3, #0
 80059d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80059d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80059dc:	460b      	mov	r3, r1
 80059de:	4313      	orrs	r3, r2
 80059e0:	d058      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80059e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80059ee:	d033      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80059f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80059f4:	d82c      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80059f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fa:	d02f      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80059fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a00:	d826      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005a02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a06:	d02b      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005a08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a0c:	d820      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a12:	d012      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a18:	d81a      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d022      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8005a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a22:	d115      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a28:	3308      	adds	r3, #8
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f001 fc81 	bl	8007334 <RCCEx_PLL2_Config>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a38:	e015      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a3e:	3328      	adds	r3, #40	; 0x28
 8005a40:	2102      	movs	r1, #2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f001 fd28 	bl	8007498 <RCCEx_PLL3_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a4e:	e00a      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005a56:	e006      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005a58:	bf00      	nop
 8005a5a:	e004      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005a5c:	bf00      	nop
 8005a5e:	e002      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005a60:	bf00      	nop
 8005a62:	e000      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a66:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10e      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a6e:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a72:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a7e:	4a02      	ldr	r2, [pc, #8]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005a80:	430b      	orrs	r3, r1
 8005a82:	6593      	str	r3, [r2, #88]	; 0x58
 8005a84:	e006      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8005a86:	bf00      	nop
 8005a88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005aaa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	d055      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ab8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005abc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ac0:	d033      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005ac2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ac6:	d82c      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005acc:	d02f      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad2:	d826      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005ad4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ad8:	d02b      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005ada:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ade:	d820      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ae4:	d012      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8005ae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aea:	d81a      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d022      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8005af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af4:	d115      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005afa:	3308      	adds	r3, #8
 8005afc:	2100      	movs	r1, #0
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 fc18 	bl	8007334 <RCCEx_PLL2_Config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b0a:	e015      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b10:	3328      	adds	r3, #40	; 0x28
 8005b12:	2102      	movs	r1, #2
 8005b14:	4618      	mov	r0, r3
 8005b16:	f001 fcbf 	bl	8007498 <RCCEx_PLL3_Config>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b20:	e00a      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005b28:	e006      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005b2a:	bf00      	nop
 8005b2c:	e004      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005b2e:	bf00      	nop
 8005b30:	e002      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005b32:	bf00      	nop
 8005b34:	e000      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10b      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b40:	4ba1      	ldr	r3, [pc, #644]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b44:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b50:	4a9d      	ldr	r2, [pc, #628]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b52:	430b      	orrs	r3, r1
 8005b54:	6593      	str	r3, [r2, #88]	; 0x58
 8005b56:	e003      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f002 0308 	and.w	r3, r2, #8
 8005b6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b70:	2300      	movs	r3, #0
 8005b72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	d01e      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8c:	d10c      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b92:	3328      	adds	r3, #40	; 0x28
 8005b94:	2102      	movs	r1, #2
 8005b96:	4618      	mov	r0, r3
 8005b98:	f001 fc7e 	bl	8007498 <RCCEx_PLL3_Config>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ba8:	4b87      	ldr	r3, [pc, #540]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb8:	4a83      	ldr	r2, [pc, #524]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	f002 0310 	and.w	r3, r2, #16
 8005bca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005bd4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	d01e      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005be2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bea:	d10c      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bf0:	3328      	adds	r3, #40	; 0x28
 8005bf2:	2102      	movs	r1, #2
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f001 fc4f 	bl	8007498 <RCCEx_PLL3_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c06:	4b70      	ldr	r3, [pc, #448]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c16:	4a6c      	ldr	r2, [pc, #432]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005c28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005c36:	460b      	mov	r3, r1
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	d03e      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c48:	d022      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005c4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c4e:	d81b      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8005c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c58:	d00b      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005c5a:	e015      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c60:	3308      	adds	r3, #8
 8005c62:	2100      	movs	r1, #0
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 fb65 	bl	8007334 <RCCEx_PLL2_Config>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c70:	e00f      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c76:	3328      	adds	r3, #40	; 0x28
 8005c78:	2102      	movs	r1, #2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f001 fc0c 	bl	8007498 <RCCEx_PLL3_Config>
 8005c80:	4603      	mov	r3, r0
 8005c82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c86:	e004      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005c8e:	e000      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10b      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c9a:	4b4b      	ldr	r3, [pc, #300]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005caa:	4a47      	ldr	r2, [pc, #284]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005cac:	430b      	orrs	r3, r1
 8005cae:	6593      	str	r3, [r2, #88]	; 0x58
 8005cb0:	e003      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cb6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005cc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cc8:	2300      	movs	r3, #0
 8005cca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ccc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	d03b      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ce2:	d01f      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005ce4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ce8:	d818      	bhi.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005cea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cee:	d003      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005cf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cf4:	d007      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8005cf6:	e011      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cf8:	4b33      	ldr	r3, [pc, #204]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	4a32      	ldr	r2, [pc, #200]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d04:	e00f      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d0a:	3328      	adds	r3, #40	; 0x28
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f001 fbc2 	bl	8007498 <RCCEx_PLL3_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d1a:	e004      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d22:	e000      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10b      	bne.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d2e:	4b26      	ldr	r3, [pc, #152]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d32:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3e:	4a22      	ldr	r2, [pc, #136]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d40:	430b      	orrs	r3, r1
 8005d42:	6553      	str	r3, [r2, #84]	; 0x54
 8005d44:	e003      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005d5a:	673b      	str	r3, [r7, #112]	; 0x70
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	677b      	str	r3, [r7, #116]	; 0x74
 8005d60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005d64:	460b      	mov	r3, r1
 8005d66:	4313      	orrs	r3, r2
 8005d68:	d034      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8005d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d78:	d007      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005d7a:	e011      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d7c:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	4a11      	ldr	r2, [pc, #68]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005d88:	e00e      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d8e:	3308      	adds	r3, #8
 8005d90:	2102      	movs	r1, #2
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 face 	bl	8007334 <RCCEx_PLL2_Config>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005d9e:	e003      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10d      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005db0:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dbe:	4a02      	ldr	r2, [pc, #8]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005dc0:	430b      	orrs	r3, r1
 8005dc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005dc4:	e006      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005dc6:	bf00      	nop
 8005dc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dd0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005de0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005de2:	2300      	movs	r3, #0
 8005de4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005de6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005dea:	460b      	mov	r3, r1
 8005dec:	4313      	orrs	r3, r2
 8005dee:	d00c      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df4:	3328      	adds	r3, #40	; 0x28
 8005df6:	2102      	movs	r1, #2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 fb4d 	bl	8007498 <RCCEx_PLL3_Config>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005e16:	663b      	str	r3, [r7, #96]	; 0x60
 8005e18:	2300      	movs	r3, #0
 8005e1a:	667b      	str	r3, [r7, #100]	; 0x64
 8005e1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005e20:	460b      	mov	r3, r1
 8005e22:	4313      	orrs	r3, r2
 8005e24:	d038      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e32:	d018      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e38:	d811      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e3e:	d014      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e44:	d80b      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d011      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e4e:	d106      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e50:	4bc3      	ldr	r3, [pc, #780]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	4ac2      	ldr	r2, [pc, #776]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005e5c:	e008      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e64:	e004      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005e66:	bf00      	nop
 8005e68:	e002      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005e6a:	bf00      	nop
 8005e6c:	e000      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10b      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e78:	4bb9      	ldr	r3, [pc, #740]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e88:	4ab5      	ldr	r2, [pc, #724]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	6553      	str	r3, [r2, #84]	; 0x54
 8005e8e:	e003      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005ea4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eaa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	d009      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005eb4:	4baa      	ldr	r3, [pc, #680]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ec2:	4aa7      	ldr	r2, [pc, #668]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005ed4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	657b      	str	r3, [r7, #84]	; 0x54
 8005eda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	d009      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ee4:	4b9e      	ldr	r3, [pc, #632]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef2:	4a9b      	ldr	r2, [pc, #620]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ef4:	430b      	orrs	r3, r1
 8005ef6:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005f04:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f06:	2300      	movs	r3, #0
 8005f08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f0a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4313      	orrs	r3, r2
 8005f12:	d009      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005f14:	4b92      	ldr	r3, [pc, #584]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f18:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8005f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f22:	4a8f      	ldr	r2, [pc, #572]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005f24:	430b      	orrs	r3, r1
 8005f26:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005f34:	643b      	str	r3, [r7, #64]	; 0x40
 8005f36:	2300      	movs	r3, #0
 8005f38:	647b      	str	r3, [r7, #68]	; 0x44
 8005f3a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4313      	orrs	r3, r2
 8005f42:	d00e      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f44:	4b86      	ldr	r3, [pc, #536]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	4a85      	ldr	r2, [pc, #532]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005f4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f4e:	6113      	str	r3, [r2, #16]
 8005f50:	4b83      	ldr	r3, [pc, #524]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005f52:	6919      	ldr	r1, [r3, #16]
 8005f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005f5c:	4a80      	ldr	r2, [pc, #512]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005f5e:	430b      	orrs	r3, r1
 8005f60:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005f6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f70:	2300      	movs	r3, #0
 8005f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f74:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	d009      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f7e:	4b78      	ldr	r3, [pc, #480]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f82:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8c:	4a74      	ldr	r2, [pc, #464]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005f8e:	430b      	orrs	r3, r1
 8005f90:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fa4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4313      	orrs	r3, r2
 8005fac:	d00a      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fae:	4b6c      	ldr	r3, [pc, #432]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fbe:	4a68      	ldr	r2, [pc, #416]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fcc:	2100      	movs	r1, #0
 8005fce:	62b9      	str	r1, [r7, #40]	; 0x28
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fd6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	d011      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 f9a3 	bl	8007334 <RCCEx_PLL2_Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005ff4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ffc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006000:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	2100      	movs	r1, #0
 800600e:	6239      	str	r1, [r7, #32]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
 8006016:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800601a:	460b      	mov	r3, r1
 800601c:	4313      	orrs	r3, r2
 800601e:	d011      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006024:	3308      	adds	r3, #8
 8006026:	2101      	movs	r1, #1
 8006028:	4618      	mov	r0, r3
 800602a:	f001 f983 	bl	8007334 <RCCEx_PLL2_Config>
 800602e:	4603      	mov	r3, r0
 8006030:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006034:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006040:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604c:	2100      	movs	r1, #0
 800604e:	61b9      	str	r1, [r7, #24]
 8006050:	f003 0304 	and.w	r3, r3, #4
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800605a:	460b      	mov	r3, r1
 800605c:	4313      	orrs	r3, r2
 800605e:	d011      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006064:	3308      	adds	r3, #8
 8006066:	2102      	movs	r1, #2
 8006068:	4618      	mov	r0, r3
 800606a:	f001 f963 	bl	8007334 <RCCEx_PLL2_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006074:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006080:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006084:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	2100      	movs	r1, #0
 800608e:	6139      	str	r1, [r7, #16]
 8006090:	f003 0308 	and.w	r3, r3, #8
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800609a:	460b      	mov	r3, r1
 800609c:	4313      	orrs	r3, r2
 800609e:	d011      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060a4:	3328      	adds	r3, #40	; 0x28
 80060a6:	2100      	movs	r1, #0
 80060a8:	4618      	mov	r0, r3
 80060aa:	f001 f9f5 	bl	8007498 <RCCEx_PLL3_Config>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80060b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80060c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80060c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060cc:	2100      	movs	r1, #0
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060da:	460b      	mov	r3, r1
 80060dc:	4313      	orrs	r3, r2
 80060de:	d011      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060e4:	3328      	adds	r3, #40	; 0x28
 80060e6:	2101      	movs	r1, #1
 80060e8:	4618      	mov	r0, r3
 80060ea:	f001 f9d5 	bl	8007498 <RCCEx_PLL3_Config>
 80060ee:	4603      	mov	r3, r0
 80060f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80060f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006100:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	2100      	movs	r1, #0
 800610e:	6039      	str	r1, [r7, #0]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	607b      	str	r3, [r7, #4]
 8006116:	e9d7 1200 	ldrd	r1, r2, [r7]
 800611a:	460b      	mov	r3, r1
 800611c:	4313      	orrs	r3, r2
 800611e:	d011      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006124:	3328      	adds	r3, #40	; 0x28
 8006126:	2102      	movs	r1, #2
 8006128:	4618      	mov	r0, r3
 800612a:	f001 f9b5 	bl	8007498 <RCCEx_PLL3_Config>
 800612e:	4603      	mov	r3, r0
 8006130:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006134:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006140:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8006144:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	e000      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
}
 8006152:	4618      	mov	r0, r3
 8006154:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006158:	46bd      	mov	sp, r7
 800615a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800615e:	bf00      	nop
 8006160:	58024400 	.word	0x58024400

08006164 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b090      	sub	sp, #64	; 0x40
 8006168:	af00      	add	r7, sp, #0
 800616a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800616e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006172:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006176:	430b      	orrs	r3, r1
 8006178:	f040 8094 	bne.w	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800617c:	4b97      	ldr	r3, [pc, #604]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800617e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	2b04      	cmp	r3, #4
 800618a:	f200 8087 	bhi.w	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800618e:	a201      	add	r2, pc, #4	; (adr r2, 8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006194:	080061a9 	.word	0x080061a9
 8006198:	080061d1 	.word	0x080061d1
 800619c:	080061f9 	.word	0x080061f9
 80061a0:	08006295 	.word	0x08006295
 80061a4:	08006221 	.word	0x08006221
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061a8:	4b8c      	ldr	r3, [pc, #560]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061b4:	d108      	bne.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 ff68 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061c4:	f000 bc97 	b.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061cc:	f000 bc93 	b.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061d0:	4b82      	ldr	r3, [pc, #520]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061dc:	d108      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061de:	f107 0318 	add.w	r3, r7, #24
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fcac 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ec:	f000 bc83 	b.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061f4:	f000 bc7f 	b.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061f8:	4b78      	ldr	r3, [pc, #480]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006204:	d108      	bne.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006206:	f107 030c 	add.w	r3, r7, #12
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fdec 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006214:	f000 bc6f 	b.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800621c:	f000 bc6b 	b.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006220:	4b6e      	ldr	r3, [pc, #440]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006224:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006228:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800622a:	4b6c      	ldr	r3, [pc, #432]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0304 	and.w	r3, r3, #4
 8006232:	2b04      	cmp	r3, #4
 8006234:	d10c      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006238:	2b00      	cmp	r3, #0
 800623a:	d109      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800623c:	4b67      	ldr	r3, [pc, #412]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	08db      	lsrs	r3, r3, #3
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	4a66      	ldr	r2, [pc, #408]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006248:	fa22 f303 	lsr.w	r3, r2, r3
 800624c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800624e:	e01f      	b.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006250:	4b62      	ldr	r3, [pc, #392]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800625c:	d106      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006264:	d102      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006266:	4b5f      	ldr	r3, [pc, #380]	; (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800626a:	e011      	b.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800626c:	4b5b      	ldr	r3, [pc, #364]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006278:	d106      	bne.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800627a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006280:	d102      	bne.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006282:	4b59      	ldr	r3, [pc, #356]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006286:	e003      	b.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800628c:	f000 bc33 	b.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006290:	f000 bc31 	b.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006294:	4b55      	ldr	r3, [pc, #340]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006298:	f000 bc2d 	b.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800629c:	2300      	movs	r3, #0
 800629e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062a0:	f000 bc29 	b.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80062a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062a8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80062ac:	430b      	orrs	r3, r1
 80062ae:	f040 809f 	bne.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80062b2:	4b4a      	ldr	r3, [pc, #296]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80062b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80062ba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c2:	d04d      	beq.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ca:	f200 8084 	bhi.w	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	2bc0      	cmp	r3, #192	; 0xc0
 80062d2:	d07d      	beq.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	2bc0      	cmp	r3, #192	; 0xc0
 80062d8:	d87d      	bhi.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	2b80      	cmp	r3, #128	; 0x80
 80062de:	d02d      	beq.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80062e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e2:	2b80      	cmp	r3, #128	; 0x80
 80062e4:	d877      	bhi.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	d012      	beq.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80062f2:	e070      	b.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062f4:	4b39      	ldr	r3, [pc, #228]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006300:	d107      	bne.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fec2 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006310:	e3f1      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006312:	2300      	movs	r3, #0
 8006314:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006316:	e3ee      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006318:	4b30      	ldr	r3, [pc, #192]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006324:	d107      	bne.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006326:	f107 0318 	add.w	r3, r7, #24
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fc08 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006334:	e3df      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006336:	2300      	movs	r3, #0
 8006338:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800633a:	e3dc      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800633c:	4b27      	ldr	r3, [pc, #156]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006348:	d107      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800634a:	f107 030c 	add.w	r3, r7, #12
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fd4a 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006358:	e3cd      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800635a:	2300      	movs	r3, #0
 800635c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800635e:	e3ca      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006360:	4b1e      	ldr	r3, [pc, #120]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006364:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006368:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800636a:	4b1c      	ldr	r3, [pc, #112]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b04      	cmp	r3, #4
 8006374:	d10c      	bne.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006378:	2b00      	cmp	r3, #0
 800637a:	d109      	bne.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800637c:	4b17      	ldr	r3, [pc, #92]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	08db      	lsrs	r3, r3, #3
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	4a16      	ldr	r2, [pc, #88]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006388:	fa22 f303 	lsr.w	r3, r2, r3
 800638c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800638e:	e01e      	b.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006390:	4b12      	ldr	r3, [pc, #72]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800639c:	d106      	bne.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800639e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063a4:	d102      	bne.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80063a6:	4b0f      	ldr	r3, [pc, #60]	; (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80063a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063aa:	e010      	b.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063ac:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063b8:	d106      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80063ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063c0:	d102      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063c2:	4b09      	ldr	r3, [pc, #36]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80063c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c6:	e002      	b.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80063cc:	e393      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80063ce:	e392      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80063d0:	4b06      	ldr	r3, [pc, #24]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063d4:	e38f      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063da:	e38c      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80063dc:	58024400 	.word	0x58024400
 80063e0:	03d09000 	.word	0x03d09000
 80063e4:	003d0900 	.word	0x003d0900
 80063e8:	016e3600 	.word	0x016e3600
 80063ec:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80063f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80063f8:	430b      	orrs	r3, r1
 80063fa:	f040 809c 	bne.w	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80063fe:	4b9e      	ldr	r3, [pc, #632]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006402:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006406:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800640e:	d054      	beq.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006416:	f200 808b 	bhi.w	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006420:	f000 8083 	beq.w	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800642a:	f200 8081 	bhi.w	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006434:	d02f      	beq.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800643c:	d878      	bhi.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	2b00      	cmp	r3, #0
 8006442:	d004      	beq.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800644a:	d012      	beq.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800644c:	e070      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800644e:	4b8a      	ldr	r3, [pc, #552]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006456:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800645a:	d107      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800645c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006460:	4618      	mov	r0, r3
 8006462:	f000 fe15 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800646a:	e344      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800646c:	2300      	movs	r3, #0
 800646e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006470:	e341      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006472:	4b81      	ldr	r3, [pc, #516]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800647a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800647e:	d107      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006480:	f107 0318 	add.w	r3, r7, #24
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fb5b 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800648e:	e332      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006494:	e32f      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006496:	4b78      	ldr	r3, [pc, #480]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800649e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a2:	d107      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064a4:	f107 030c 	add.w	r3, r7, #12
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fc9d 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064b2:	e320      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064b8:	e31d      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064ba:	4b6f      	ldr	r3, [pc, #444]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80064bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064c2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064c4:	4b6c      	ldr	r3, [pc, #432]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d10c      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80064d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d109      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064d6:	4b68      	ldr	r3, [pc, #416]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	08db      	lsrs	r3, r3, #3
 80064dc:	f003 0303 	and.w	r3, r3, #3
 80064e0:	4a66      	ldr	r2, [pc, #408]	; (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80064e2:	fa22 f303 	lsr.w	r3, r2, r3
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e8:	e01e      	b.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064ea:	4b63      	ldr	r3, [pc, #396]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f6:	d106      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80064f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064fe:	d102      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006500:	4b5f      	ldr	r3, [pc, #380]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006504:	e010      	b.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006506:	4b5c      	ldr	r3, [pc, #368]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006512:	d106      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800651a:	d102      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800651c:	4b59      	ldr	r3, [pc, #356]	; (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800651e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006520:	e002      	b.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006522:	2300      	movs	r3, #0
 8006524:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8006526:	e2e6      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006528:	e2e5      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800652a:	4b57      	ldr	r3, [pc, #348]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800652e:	e2e2      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006534:	e2df      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800653a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800653e:	430b      	orrs	r3, r1
 8006540:	f040 80a7 	bne.w	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006544:	4b4c      	ldr	r3, [pc, #304]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006548:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800654c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800654e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006554:	d055      	beq.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800655c:	f200 8096 	bhi.w	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006566:	f000 8084 	beq.w	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006570:	f200 808c 	bhi.w	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800657a:	d030      	beq.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006582:	f200 8083 	bhi.w	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	2b00      	cmp	r3, #0
 800658a:	d004      	beq.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006592:	d012      	beq.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006594:	e07a      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006596:	4b38      	ldr	r3, [pc, #224]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065a2:	d107      	bne.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fd71 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065b2:	e2a0      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065b8:	e29d      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065ba:	4b2f      	ldr	r3, [pc, #188]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065c6:	d107      	bne.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065c8:	f107 0318 	add.w	r3, r7, #24
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fab7 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065d6:	e28e      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065dc:	e28b      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065de:	4b26      	ldr	r3, [pc, #152]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ea:	d107      	bne.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ec:	f107 030c 	add.w	r3, r7, #12
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fbf9 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065fa:	e27c      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80065fc:	2300      	movs	r3, #0
 80065fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006600:	e279      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006602:	4b1d      	ldr	r3, [pc, #116]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006606:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800660a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800660c:	4b1a      	ldr	r3, [pc, #104]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b04      	cmp	r3, #4
 8006616:	d10c      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8006618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661a:	2b00      	cmp	r3, #0
 800661c:	d109      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800661e:	4b16      	ldr	r3, [pc, #88]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	08db      	lsrs	r3, r3, #3
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	4a14      	ldr	r2, [pc, #80]	; (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800662a:	fa22 f303 	lsr.w	r3, r2, r3
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006630:	e01e      	b.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006632:	4b11      	ldr	r3, [pc, #68]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800663e:	d106      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006642:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006646:	d102      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006648:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800664a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800664c:	e010      	b.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800664e:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800665a:	d106      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800665c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006662:	d102      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006664:	4b07      	ldr	r3, [pc, #28]	; (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006668:	e002      	b.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800666a:	2300      	movs	r3, #0
 800666c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800666e:	e242      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006670:	e241      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006672:	4b05      	ldr	r3, [pc, #20]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006676:	e23e      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006678:	58024400 	.word	0x58024400
 800667c:	03d09000 	.word	0x03d09000
 8006680:	003d0900 	.word	0x003d0900
 8006684:	016e3600 	.word	0x016e3600
 8006688:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006690:	e231      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006696:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800669a:	430b      	orrs	r3, r1
 800669c:	f040 8085 	bne.w	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80066a0:	4b9c      	ldr	r3, [pc, #624]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80066a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80066a8:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066b0:	d06b      	beq.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066b8:	d874      	bhi.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066c0:	d056      	beq.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066c8:	d86c      	bhi.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80066ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066d0:	d03b      	beq.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80066d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066d8:	d864      	bhi.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066e0:	d021      	beq.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066e8:	d85c      	bhi.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80066ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80066f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f6:	d004      	beq.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80066f8:	e054      	b.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80066fa:	f7fe fb07 	bl	8004d0c <HAL_RCC_GetPCLK1Freq>
 80066fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006700:	e1f9      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006702:	4b84      	ldr	r3, [pc, #528]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800670a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800670e:	d107      	bne.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006710:	f107 0318 	add.w	r3, r7, #24
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fa13 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800671e:	e1ea      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006720:	2300      	movs	r3, #0
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006724:	e1e7      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006726:	4b7b      	ldr	r3, [pc, #492]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800672e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006732:	d107      	bne.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006734:	f107 030c 	add.w	r3, r7, #12
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fb55 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006742:	e1d8      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006744:	2300      	movs	r3, #0
 8006746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006748:	e1d5      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800674a:	4b72      	ldr	r3, [pc, #456]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b04      	cmp	r3, #4
 8006754:	d109      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006756:	4b6f      	ldr	r3, [pc, #444]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	08db      	lsrs	r3, r3, #3
 800675c:	f003 0303 	and.w	r3, r3, #3
 8006760:	4a6d      	ldr	r2, [pc, #436]	; (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006762:	fa22 f303 	lsr.w	r3, r2, r3
 8006766:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006768:	e1c5      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800676e:	e1c2      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006770:	4b68      	ldr	r3, [pc, #416]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800677c:	d102      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800677e:	4b67      	ldr	r3, [pc, #412]	; (800691c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006782:	e1b8      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006784:	2300      	movs	r3, #0
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006788:	e1b5      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800678a:	4b62      	ldr	r3, [pc, #392]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006792:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006796:	d102      	bne.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8006798:	4b61      	ldr	r3, [pc, #388]	; (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800679a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800679c:	e1ab      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067a2:	e1a8      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067a8:	e1a5      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80067aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067ae:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80067b2:	430b      	orrs	r3, r1
 80067b4:	d173      	bne.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80067b6:	4b57      	ldr	r3, [pc, #348]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80067b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067be:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80067c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067c6:	d02f      	beq.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ce:	d863      	bhi.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d004      	beq.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067dc:	d012      	beq.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80067de:	e05b      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067e0:	4b4c      	ldr	r3, [pc, #304]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ec:	d107      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ee:	f107 0318 	add.w	r3, r7, #24
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 f9a4 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067fc:	e17b      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006802:	e178      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006804:	4b43      	ldr	r3, [pc, #268]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800680c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006810:	d107      	bne.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006812:	f107 030c 	add.w	r3, r7, #12
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fae6 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006820:	e169      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006826:	e166      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006828:	4b3a      	ldr	r3, [pc, #232]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800682a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006830:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006832:	4b38      	ldr	r3, [pc, #224]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0304 	and.w	r3, r3, #4
 800683a:	2b04      	cmp	r3, #4
 800683c:	d10c      	bne.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800683e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006840:	2b00      	cmp	r3, #0
 8006842:	d109      	bne.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006844:	4b33      	ldr	r3, [pc, #204]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	08db      	lsrs	r3, r3, #3
 800684a:	f003 0303 	and.w	r3, r3, #3
 800684e:	4a32      	ldr	r2, [pc, #200]	; (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006850:	fa22 f303 	lsr.w	r3, r2, r3
 8006854:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006856:	e01e      	b.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006858:	4b2e      	ldr	r3, [pc, #184]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006864:	d106      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8006866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800686c:	d102      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800686e:	4b2b      	ldr	r3, [pc, #172]	; (800691c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006872:	e010      	b.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006874:	4b27      	ldr	r3, [pc, #156]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006880:	d106      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006888:	d102      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800688a:	4b25      	ldr	r3, [pc, #148]	; (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800688c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800688e:	e002      	b.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006894:	e12f      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006896:	e12e      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800689c:	e12b      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800689e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068a2:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80068a6:	430b      	orrs	r3, r1
 80068a8:	d13c      	bne.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80068aa:	4b1a      	ldr	r3, [pc, #104]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80068ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068b2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c0:	d012      	beq.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80068c2:	e023      	b.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068c4:	4b13      	ldr	r3, [pc, #76]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068d0:	d107      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fbda 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068e0:	e109      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068e2:	2300      	movs	r3, #0
 80068e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068e6:	e106      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068e8:	4b0a      	ldr	r3, [pc, #40]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068f4:	d107      	bne.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068f6:	f107 0318 	add.w	r3, r7, #24
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 f920 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006904:	e0f7      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800690a:	e0f4      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800690c:	2300      	movs	r3, #0
 800690e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006910:	e0f1      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006912:	bf00      	nop
 8006914:	58024400 	.word	0x58024400
 8006918:	03d09000 	.word	0x03d09000
 800691c:	003d0900 	.word	0x003d0900
 8006920:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006928:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800692c:	430b      	orrs	r3, r1
 800692e:	f040 8091 	bne.w	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006932:	4b73      	ldr	r3, [pc, #460]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006936:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800693a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006942:	f000 8081 	beq.w	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006948:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800694c:	d87f      	bhi.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006954:	d06b      	beq.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800695c:	d877      	bhi.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006964:	d056      	beq.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8006966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800696c:	d86f      	bhi.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800696e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006970:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006974:	d03b      	beq.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800697c:	d867      	bhi.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006984:	d021      	beq.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800698c:	d85f      	bhi.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800698e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006990:	2b00      	cmp	r3, #0
 8006992:	d004      	beq.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800699a:	d004      	beq.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800699c:	e057      	b.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800699e:	f000 f8b9 	bl	8006b14 <HAL_RCCEx_GetD3PCLK1Freq>
 80069a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069a4:	e0a7      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069a6:	4b56      	ldr	r3, [pc, #344]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069b2:	d107      	bne.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069b4:	f107 0318 	add.w	r3, r7, #24
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 f8c1 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069c2:	e098      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069c8:	e095      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069ca:	4b4d      	ldr	r3, [pc, #308]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069d6:	d107      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069d8:	f107 030c 	add.w	r3, r7, #12
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 fa03 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069e6:	e086      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069ec:	e083      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069ee:	4b44      	ldr	r3, [pc, #272]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d109      	bne.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069fa:	4b41      	ldr	r3, [pc, #260]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	08db      	lsrs	r3, r3, #3
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	4a3f      	ldr	r2, [pc, #252]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006a06:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a0c:	e073      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a12:	e070      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006a14:	4b3a      	ldr	r3, [pc, #232]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a20:	d102      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8006a22:	4b39      	ldr	r3, [pc, #228]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8006a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a26:	e066      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a2c:	e063      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a2e:	4b34      	ldr	r3, [pc, #208]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a3a:	d102      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8006a3c:	4b33      	ldr	r3, [pc, #204]	; (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a40:	e059      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a46:	e056      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a48:	4b31      	ldr	r3, [pc, #196]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a4c:	e053      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a52:	e050      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006a54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a58:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	d148      	bne.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006a60:	4b27      	ldr	r3, [pc, #156]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a68:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a70:	d02a      	beq.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a78:	d838      	bhi.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d004      	beq.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a86:	d00d      	beq.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8006a88:	e030      	b.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a8a:	4b1d      	ldr	r3, [pc, #116]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a96:	d102      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8006a98:	4b1c      	ldr	r3, [pc, #112]	; (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a9c:	e02b      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aa2:	e028      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006aa4:	4b16      	ldr	r3, [pc, #88]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ab0:	d107      	bne.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 faea 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ac0:	e019      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ac6:	e016      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ac8:	4b0d      	ldr	r3, [pc, #52]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ad4:	d107      	bne.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ad6:	f107 0318 	add.w	r3, r7, #24
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 f830 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ae4:	e007      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aea:	e004      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006af0:	e001      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3740      	adds	r7, #64	; 0x40
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	58024400 	.word	0x58024400
 8006b04:	03d09000 	.word	0x03d09000
 8006b08:	003d0900 	.word	0x003d0900
 8006b0c:	016e3600 	.word	0x016e3600
 8006b10:	00bb8000 	.word	0x00bb8000

08006b14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006b18:	f7fe f8c8 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	091b      	lsrs	r3, r3, #4
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	4904      	ldr	r1, [pc, #16]	; (8006b3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b2a:	5ccb      	ldrb	r3, [r1, r3]
 8006b2c:	f003 031f 	and.w	r3, r3, #31
 8006b30:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	58024400 	.word	0x58024400
 8006b3c:	0800c220 	.word	0x0800c220

08006b40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b089      	sub	sp, #36	; 0x24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b48:	4ba1      	ldr	r3, [pc, #644]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006b52:	4b9f      	ldr	r3, [pc, #636]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b56:	0b1b      	lsrs	r3, r3, #12
 8006b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b5e:	4b9c      	ldr	r3, [pc, #624]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b62:	091b      	lsrs	r3, r3, #4
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006b6a:	4b99      	ldr	r3, [pc, #612]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6e:	08db      	lsrs	r3, r3, #3
 8006b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	fb02 f303 	mul.w	r3, r2, r3
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8111 	beq.w	8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	f000 8083 	beq.w	8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	f200 80a1 	bhi.w	8006ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d056      	beq.n	8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006baa:	e099      	b.n	8006ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bac:	4b88      	ldr	r3, [pc, #544]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d02d      	beq.n	8006c14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bb8:	4b85      	ldr	r3, [pc, #532]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	08db      	lsrs	r3, r3, #3
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	4a84      	ldr	r2, [pc, #528]	; (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be2:	4b7b      	ldr	r3, [pc, #492]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c12:	e087      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c26:	4b6a      	ldr	r3, [pc, #424]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c56:	e065      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c6a:	4b59      	ldr	r3, [pc, #356]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c9a:	e043      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cae:	4b48      	ldr	r3, [pc, #288]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cde:	e021      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf2:	4b37      	ldr	r3, [pc, #220]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006d24:	4b2a      	ldr	r3, [pc, #168]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d28:	0a5b      	lsrs	r3, r3, #9
 8006d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d4a:	ee17 2a90 	vmov	r2, s15
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006d52:	4b1f      	ldr	r3, [pc, #124]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	0c1b      	lsrs	r3, r3, #16
 8006d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d78:	ee17 2a90 	vmov	r2, s15
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006d80:	4b13      	ldr	r3, [pc, #76]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	0e1b      	lsrs	r3, r3, #24
 8006d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da6:	ee17 2a90 	vmov	r2, s15
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006dae:	e008      	b.n	8006dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	609a      	str	r2, [r3, #8]
}
 8006dc2:	bf00      	nop
 8006dc4:	3724      	adds	r7, #36	; 0x24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	58024400 	.word	0x58024400
 8006dd4:	03d09000 	.word	0x03d09000
 8006dd8:	46000000 	.word	0x46000000
 8006ddc:	4c742400 	.word	0x4c742400
 8006de0:	4a742400 	.word	0x4a742400
 8006de4:	4bb71b00 	.word	0x4bb71b00

08006de8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b089      	sub	sp, #36	; 0x24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006df0:	4ba1      	ldr	r3, [pc, #644]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df4:	f003 0303 	and.w	r3, r3, #3
 8006df8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006dfa:	4b9f      	ldr	r3, [pc, #636]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	0d1b      	lsrs	r3, r3, #20
 8006e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e06:	4b9c      	ldr	r3, [pc, #624]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0a:	0a1b      	lsrs	r3, r3, #8
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e12:	4b99      	ldr	r3, [pc, #612]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e16:	08db      	lsrs	r3, r3, #3
 8006e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8111 	beq.w	8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	f000 8083 	beq.w	8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	f200 80a1 	bhi.w	8006f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d056      	beq.n	8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e52:	e099      	b.n	8006f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e54:	4b88      	ldr	r3, [pc, #544]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0320 	and.w	r3, r3, #32
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d02d      	beq.n	8006ebc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e60:	4b85      	ldr	r3, [pc, #532]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	08db      	lsrs	r3, r3, #3
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	4a84      	ldr	r2, [pc, #528]	; (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e70:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	ee07 3a90 	vmov	s15, r3
 8006e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8a:	4b7b      	ldr	r3, [pc, #492]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006eba:	e087      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ece:	4b6a      	ldr	r3, [pc, #424]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ee2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006efe:	e065      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f12:	4b59      	ldr	r3, [pc, #356]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f42:	e043      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800708c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f56:	4b48      	ldr	r3, [pc, #288]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f86:	e021      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9a:	4b37      	ldr	r3, [pc, #220]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006fcc:	4b2a      	ldr	r3, [pc, #168]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	0a5b      	lsrs	r3, r3, #9
 8006fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fe6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ff2:	ee17 2a90 	vmov	r2, s15
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006ffa:	4b1f      	ldr	r3, [pc, #124]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	0c1b      	lsrs	r3, r3, #16
 8007000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007004:	ee07 3a90 	vmov	s15, r3
 8007008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007010:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007014:	edd7 6a07 	vldr	s13, [r7, #28]
 8007018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800701c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007020:	ee17 2a90 	vmov	r2, s15
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007028:	4b13      	ldr	r3, [pc, #76]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	0e1b      	lsrs	r3, r3, #24
 800702e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800703e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007042:	edd7 6a07 	vldr	s13, [r7, #28]
 8007046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800704a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800704e:	ee17 2a90 	vmov	r2, s15
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007056:	e008      	b.n	800706a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	609a      	str	r2, [r3, #8]
}
 800706a:	bf00      	nop
 800706c:	3724      	adds	r7, #36	; 0x24
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	58024400 	.word	0x58024400
 800707c:	03d09000 	.word	0x03d09000
 8007080:	46000000 	.word	0x46000000
 8007084:	4c742400 	.word	0x4c742400
 8007088:	4a742400 	.word	0x4a742400
 800708c:	4bb71b00 	.word	0x4bb71b00

08007090 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007090:	b480      	push	{r7}
 8007092:	b089      	sub	sp, #36	; 0x24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007098:	4ba0      	ldr	r3, [pc, #640]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800709a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709c:	f003 0303 	and.w	r3, r3, #3
 80070a0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80070a2:	4b9e      	ldr	r3, [pc, #632]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a6:	091b      	lsrs	r3, r3, #4
 80070a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80070ae:	4b9b      	ldr	r3, [pc, #620]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80070b8:	4b98      	ldr	r3, [pc, #608]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070bc:	08db      	lsrs	r3, r3, #3
 80070be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	fb02 f303 	mul.w	r3, r2, r3
 80070c8:	ee07 3a90 	vmov	s15, r3
 80070cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 8111 	beq.w	80072fe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	f000 8083 	beq.w	80071ea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	f200 80a1 	bhi.w	800722e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d056      	beq.n	80071a6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80070f8:	e099      	b.n	800722e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070fa:	4b88      	ldr	r3, [pc, #544]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b00      	cmp	r3, #0
 8007104:	d02d      	beq.n	8007162 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007106:	4b85      	ldr	r3, [pc, #532]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	08db      	lsrs	r3, r3, #3
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	4a83      	ldr	r2, [pc, #524]	; (8007320 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007112:	fa22 f303 	lsr.w	r3, r2, r3
 8007116:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007130:	4b7a      	ldr	r3, [pc, #488]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007138:	ee07 3a90 	vmov	s15, r3
 800713c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007140:	ed97 6a03 	vldr	s12, [r7, #12]
 8007144:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007148:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800714c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007150:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007154:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007160:	e087      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	ee07 3a90 	vmov	s15, r3
 8007168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007174:	4b69      	ldr	r3, [pc, #420]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007184:	ed97 6a03 	vldr	s12, [r7, #12]
 8007188:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800718c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007190:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007194:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007198:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071a4:	e065      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800732c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80071b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b8:	4b58      	ldr	r3, [pc, #352]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c0:	ee07 3a90 	vmov	s15, r3
 80071c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80071cc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071e8:	e043      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007330 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80071f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fc:	4b47      	ldr	r3, [pc, #284]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007204:	ee07 3a90 	vmov	s15, r3
 8007208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007210:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007214:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007228:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800722c:	e021      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	ee07 3a90 	vmov	s15, r3
 8007234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007238:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800723c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007240:	4b36      	ldr	r3, [pc, #216]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007248:	ee07 3a90 	vmov	s15, r3
 800724c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007250:	ed97 6a03 	vldr	s12, [r7, #12]
 8007254:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007270:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007272:	4b2a      	ldr	r3, [pc, #168]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	0a5b      	lsrs	r3, r3, #9
 8007278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800727c:	ee07 3a90 	vmov	s15, r3
 8007280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007288:	ee37 7a87 	vadd.f32	s14, s15, s14
 800728c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007298:	ee17 2a90 	vmov	r2, s15
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80072a0:	4b1e      	ldr	r3, [pc, #120]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a4:	0c1b      	lsrs	r3, r3, #16
 80072a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80072be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c6:	ee17 2a90 	vmov	r2, s15
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80072ce:	4b13      	ldr	r3, [pc, #76]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d2:	0e1b      	lsrs	r3, r3, #24
 80072d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d8:	ee07 3a90 	vmov	s15, r3
 80072dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f4:	ee17 2a90 	vmov	r2, s15
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80072fc:	e008      	b.n	8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	609a      	str	r2, [r3, #8]
}
 8007310:	bf00      	nop
 8007312:	3724      	adds	r7, #36	; 0x24
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	58024400 	.word	0x58024400
 8007320:	03d09000 	.word	0x03d09000
 8007324:	46000000 	.word	0x46000000
 8007328:	4c742400 	.word	0x4c742400
 800732c:	4a742400 	.word	0x4a742400
 8007330:	4bb71b00 	.word	0x4bb71b00

08007334 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007342:	4b53      	ldr	r3, [pc, #332]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007346:	f003 0303 	and.w	r3, r3, #3
 800734a:	2b03      	cmp	r3, #3
 800734c:	d101      	bne.n	8007352 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e099      	b.n	8007486 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007352:	4b4f      	ldr	r3, [pc, #316]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a4e      	ldr	r2, [pc, #312]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007358:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800735c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800735e:	f7fa fcd9 	bl	8001d14 <HAL_GetTick>
 8007362:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007364:	e008      	b.n	8007378 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007366:	f7fa fcd5 	bl	8001d14 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d901      	bls.n	8007378 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e086      	b.n	8007486 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007378:	4b45      	ldr	r3, [pc, #276]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1f0      	bne.n	8007366 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007384:	4b42      	ldr	r3, [pc, #264]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007388:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	031b      	lsls	r3, r3, #12
 8007392:	493f      	ldr	r1, [pc, #252]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007394:	4313      	orrs	r3, r2
 8007396:	628b      	str	r3, [r1, #40]	; 0x28
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	3b01      	subs	r3, #1
 800739e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	025b      	lsls	r3, r3, #9
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	431a      	orrs	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	041b      	lsls	r3, r3, #16
 80073b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	061b      	lsls	r3, r3, #24
 80073c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073c8:	4931      	ldr	r1, [pc, #196]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073ce:	4b30      	ldr	r3, [pc, #192]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	492d      	ldr	r1, [pc, #180]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073e0:	4b2b      	ldr	r3, [pc, #172]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	f023 0220 	bic.w	r2, r3, #32
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	4928      	ldr	r1, [pc, #160]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073f2:	4b27      	ldr	r3, [pc, #156]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f6:	4a26      	ldr	r2, [pc, #152]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073f8:	f023 0310 	bic.w	r3, r3, #16
 80073fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80073fe:	4b24      	ldr	r3, [pc, #144]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007400:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007402:	4b24      	ldr	r3, [pc, #144]	; (8007494 <RCCEx_PLL2_Config+0x160>)
 8007404:	4013      	ands	r3, r2
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	69d2      	ldr	r2, [r2, #28]
 800740a:	00d2      	lsls	r2, r2, #3
 800740c:	4920      	ldr	r1, [pc, #128]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800740e:	4313      	orrs	r3, r2
 8007410:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007412:	4b1f      	ldr	r3, [pc, #124]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007416:	4a1e      	ldr	r2, [pc, #120]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007418:	f043 0310 	orr.w	r3, r3, #16
 800741c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d106      	bne.n	8007432 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007424:	4b1a      	ldr	r3, [pc, #104]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	4a19      	ldr	r2, [pc, #100]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800742a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800742e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007430:	e00f      	b.n	8007452 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d106      	bne.n	8007446 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007438:	4b15      	ldr	r3, [pc, #84]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	4a14      	ldr	r2, [pc, #80]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800743e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007442:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007444:	e005      	b.n	8007452 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007446:	4b12      	ldr	r3, [pc, #72]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	4a11      	ldr	r2, [pc, #68]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800744c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007450:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007452:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a0e      	ldr	r2, [pc, #56]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007458:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800745c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800745e:	f7fa fc59 	bl	8001d14 <HAL_GetTick>
 8007462:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007464:	e008      	b.n	8007478 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007466:	f7fa fc55 	bl	8001d14 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d901      	bls.n	8007478 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e006      	b.n	8007486 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007478:	4b05      	ldr	r3, [pc, #20]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0f0      	beq.n	8007466 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	58024400 	.word	0x58024400
 8007494:	ffff0007 	.word	0xffff0007

08007498 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074a6:	4b53      	ldr	r3, [pc, #332]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d101      	bne.n	80074b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e099      	b.n	80075ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074b6:	4b4f      	ldr	r3, [pc, #316]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a4e      	ldr	r2, [pc, #312]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074c2:	f7fa fc27 	bl	8001d14 <HAL_GetTick>
 80074c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074c8:	e008      	b.n	80074dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074ca:	f7fa fc23 	bl	8001d14 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d901      	bls.n	80074dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e086      	b.n	80075ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074dc:	4b45      	ldr	r3, [pc, #276]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1f0      	bne.n	80074ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074e8:	4b42      	ldr	r3, [pc, #264]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	051b      	lsls	r3, r3, #20
 80074f6:	493f      	ldr	r1, [pc, #252]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	628b      	str	r3, [r1, #40]	; 0x28
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	3b01      	subs	r3, #1
 8007502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	3b01      	subs	r3, #1
 800750c:	025b      	lsls	r3, r3, #9
 800750e:	b29b      	uxth	r3, r3
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	3b01      	subs	r3, #1
 8007518:	041b      	lsls	r3, r3, #16
 800751a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800751e:	431a      	orrs	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	3b01      	subs	r3, #1
 8007526:	061b      	lsls	r3, r3, #24
 8007528:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800752c:	4931      	ldr	r1, [pc, #196]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800752e:	4313      	orrs	r3, r2
 8007530:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007532:	4b30      	ldr	r3, [pc, #192]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007536:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	492d      	ldr	r1, [pc, #180]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007540:	4313      	orrs	r3, r2
 8007542:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007544:	4b2b      	ldr	r3, [pc, #172]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	4928      	ldr	r1, [pc, #160]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007552:	4313      	orrs	r3, r2
 8007554:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007556:	4b27      	ldr	r3, [pc, #156]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755a:	4a26      	ldr	r2, [pc, #152]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800755c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007560:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007562:	4b24      	ldr	r3, [pc, #144]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007566:	4b24      	ldr	r3, [pc, #144]	; (80075f8 <RCCEx_PLL3_Config+0x160>)
 8007568:	4013      	ands	r3, r2
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	69d2      	ldr	r2, [r2, #28]
 800756e:	00d2      	lsls	r2, r2, #3
 8007570:	4920      	ldr	r1, [pc, #128]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007572:	4313      	orrs	r3, r2
 8007574:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007576:	4b1f      	ldr	r3, [pc, #124]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757a:	4a1e      	ldr	r2, [pc, #120]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800757c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007580:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d106      	bne.n	8007596 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007588:	4b1a      	ldr	r3, [pc, #104]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	4a19      	ldr	r2, [pc, #100]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800758e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007592:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007594:	e00f      	b.n	80075b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d106      	bne.n	80075aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800759c:	4b15      	ldr	r3, [pc, #84]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	4a14      	ldr	r2, [pc, #80]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075a8:	e005      	b.n	80075b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075aa:	4b12      	ldr	r3, [pc, #72]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ae:	4a11      	ldr	r2, [pc, #68]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075b6:	4b0f      	ldr	r3, [pc, #60]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a0e      	ldr	r2, [pc, #56]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075c2:	f7fa fba7 	bl	8001d14 <HAL_GetTick>
 80075c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075c8:	e008      	b.n	80075dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075ca:	f7fa fba3 	bl	8001d14 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d901      	bls.n	80075dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e006      	b.n	80075ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075dc:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0f0      	beq.n	80075ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	58024400 	.word	0x58024400
 80075f8:	ffff0007 	.word	0xffff0007

080075fc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d074      	beq.n	80076f8 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d106      	bne.n	8007628 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7fa f81e 	bl	8001664 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f003 0310 	and.w	r3, r3, #16
 800763a:	2b10      	cmp	r3, #16
 800763c:	d053      	beq.n	80076e6 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	22ca      	movs	r2, #202	; 0xca
 8007644:	625a      	str	r2, [r3, #36]	; 0x24
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2253      	movs	r2, #83	; 0x53
 800764c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f87e 	bl	8007750 <RTC_EnterInitMode>
 8007654:	4603      	mov	r3, r0
 8007656:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007658:	7bfb      	ldrb	r3, [r7, #15]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d124      	bne.n	80076a8 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6999      	ldr	r1, [r3, #24]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	4b26      	ldr	r3, [pc, #152]	; (8007704 <HAL_RTC_Init+0x108>)
 800766a:	400b      	ands	r3, r1
 800766c:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6999      	ldr	r1, [r3, #24]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	431a      	orrs	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	431a      	orrs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	0419      	lsls	r1, r3, #16
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f88c 	bl	80077bc <RTC_ExitInitMode>
 80076a4:	4603      	mov	r3, r0
 80076a6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d116      	bne.n	80076dc <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	699a      	ldr	r2, [r3, #24]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80076bc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6999      	ldr	r1, [r3, #24]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a1a      	ldr	r2, [r3, #32]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	431a      	orrs	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	22ff      	movs	r2, #255	; 0xff
 80076e2:	625a      	str	r2, [r3, #36]	; 0x24
 80076e4:	e001      	b.n	80076ea <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d103      	bne.n	80076f8 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	fb8fffbf 	.word	0xfb8fffbf

08007708 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a0d      	ldr	r2, [pc, #52]	; (800774c <HAL_RTC_WaitForSynchro+0x44>)
 8007716:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8007718:	f7fa fafc 	bl	8001d14 <HAL_GetTick>
 800771c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800771e:	e009      	b.n	8007734 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007720:	f7fa faf8 	bl	8001d14 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800772e:	d901      	bls.n	8007734 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e007      	b.n	8007744 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b00      	cmp	r3, #0
 8007740:	d0ee      	beq.n	8007720 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	0001005f 	.word	0x0001005f

08007750 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007766:	2b00      	cmp	r3, #0
 8007768:	d123      	bne.n	80077b2 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007778:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800777a:	f7fa facb 	bl	8001d14 <HAL_GetTick>
 800777e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007780:	e00d      	b.n	800779e <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007782:	f7fa fac7 	bl	8001d14 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007790:	d905      	bls.n	800779e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2203      	movs	r2, #3
 800779a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d102      	bne.n	80077b2 <RTC_EnterInitMode+0x62>
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d1e7      	bne.n	8007782 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80077c8:	4b1a      	ldr	r3, [pc, #104]	; (8007834 <RTC_ExitInitMode+0x78>)
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	4a19      	ldr	r2, [pc, #100]	; (8007834 <RTC_ExitInitMode+0x78>)
 80077ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d2:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80077d4:	4b17      	ldr	r3, [pc, #92]	; (8007834 <RTC_ExitInitMode+0x78>)
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f003 0320 	and.w	r3, r3, #32
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10c      	bne.n	80077fa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff ff91 	bl	8007708 <HAL_RTC_WaitForSynchro>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d01e      	beq.n	800782a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2203      	movs	r2, #3
 80077f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	73fb      	strb	r3, [r7, #15]
 80077f8:	e017      	b.n	800782a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80077fa:	4b0e      	ldr	r3, [pc, #56]	; (8007834 <RTC_ExitInitMode+0x78>)
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	4a0d      	ldr	r2, [pc, #52]	; (8007834 <RTC_ExitInitMode+0x78>)
 8007800:	f023 0320 	bic.w	r3, r3, #32
 8007804:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7ff ff7e 	bl	8007708 <HAL_RTC_WaitForSynchro>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d005      	beq.n	800781e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2203      	movs	r2, #3
 8007816:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800781e:	4b05      	ldr	r3, [pc, #20]	; (8007834 <RTC_ExitInitMode+0x78>)
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	4a04      	ldr	r2, [pc, #16]	; (8007834 <RTC_ExitInitMode+0x78>)
 8007824:	f043 0320 	orr.w	r3, r3, #32
 8007828:	6193      	str	r3, [r2, #24]
  }

  return status;
 800782a:	7bfb      	ldrb	r3, [r7, #15]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	58004000 	.word	0x58004000

08007838 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e02b      	b.n	80078a4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d106      	bne.n	8007866 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7fa f8ad 	bl	80019c0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2202      	movs	r2, #2
 800786a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3304      	adds	r3, #4
 8007876:	4619      	mov	r1, r3
 8007878:	4610      	mov	r0, r2
 800787a:	f001 fe0b 	bl	8009494 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	461a      	mov	r2, r3
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	f001 fe5f 	bl	800954c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800788e:	4b07      	ldr	r3, [pc, #28]	; (80078ac <HAL_SDRAM_Init+0x74>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a06      	ldr	r2, [pc, #24]	; (80078ac <HAL_SDRAM_Init+0x74>)
 8007894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007898:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	52004000 	.word	0x52004000

080078b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e10f      	b.n	8007ae2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a87      	ldr	r2, [pc, #540]	; (8007aec <HAL_SPI_Init+0x23c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00f      	beq.n	80078f2 <HAL_SPI_Init+0x42>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a86      	ldr	r2, [pc, #536]	; (8007af0 <HAL_SPI_Init+0x240>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d00a      	beq.n	80078f2 <HAL_SPI_Init+0x42>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a84      	ldr	r2, [pc, #528]	; (8007af4 <HAL_SPI_Init+0x244>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d005      	beq.n	80078f2 <HAL_SPI_Init+0x42>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	2b0f      	cmp	r3, #15
 80078ec:	d901      	bls.n	80078f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e0f7      	b.n	8007ae2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f900 	bl	8007af8 <SPI_GetPacketSize>
 80078f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a7b      	ldr	r2, [pc, #492]	; (8007aec <HAL_SPI_Init+0x23c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00c      	beq.n	800791e <HAL_SPI_Init+0x6e>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a79      	ldr	r2, [pc, #484]	; (8007af0 <HAL_SPI_Init+0x240>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d007      	beq.n	800791e <HAL_SPI_Init+0x6e>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a78      	ldr	r2, [pc, #480]	; (8007af4 <HAL_SPI_Init+0x244>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d002      	beq.n	800791e <HAL_SPI_Init+0x6e>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b08      	cmp	r3, #8
 800791c:	d811      	bhi.n	8007942 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007922:	4a72      	ldr	r2, [pc, #456]	; (8007aec <HAL_SPI_Init+0x23c>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d009      	beq.n	800793c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a70      	ldr	r2, [pc, #448]	; (8007af0 <HAL_SPI_Init+0x240>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d004      	beq.n	800793c <HAL_SPI_Init+0x8c>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a6f      	ldr	r2, [pc, #444]	; (8007af4 <HAL_SPI_Init+0x244>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d104      	bne.n	8007946 <HAL_SPI_Init+0x96>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b10      	cmp	r3, #16
 8007940:	d901      	bls.n	8007946 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e0cd      	b.n	8007ae2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d106      	bne.n	8007960 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7f9 feb4 	bl	80016c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0201 	bic.w	r2, r2, #1
 8007976:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007982:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800798c:	d119      	bne.n	80079c2 <HAL_SPI_Init+0x112>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007996:	d103      	bne.n	80079a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800799c:	2b00      	cmp	r3, #0
 800799e:	d008      	beq.n	80079b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10c      	bne.n	80079c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80079ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079b0:	d107      	bne.n	80079c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00f      	beq.n	80079ee <HAL_SPI_Init+0x13e>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	2b06      	cmp	r3, #6
 80079d4:	d90b      	bls.n	80079ee <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	e007      	b.n	80079fe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	69da      	ldr	r2, [r3, #28]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a06:	431a      	orrs	r2, r3
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	431a      	orrs	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a10:	ea42 0103 	orr.w	r1, r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68da      	ldr	r2, [r3, #12]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	431a      	orrs	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	431a      	orrs	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	431a      	orrs	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a52:	431a      	orrs	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a5e:	ea42 0103 	orr.w	r1, r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d113      	bne.n	8007a9e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a88:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a9c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 0201 	bic.w	r2, r2, #1
 8007aac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	40013000 	.word	0x40013000
 8007af0:	40003800 	.word	0x40003800
 8007af4:	40003c00 	.word	0x40003c00

08007af8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b04:	095b      	lsrs	r3, r3, #5
 8007b06:	3301      	adds	r3, #1
 8007b08:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	3307      	adds	r3, #7
 8007b16:	08db      	lsrs	r3, r3, #3
 8007b18:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e049      	b.n	8007bd4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d106      	bne.n	8007b5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f841 	bl	8007bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	f000 f9ff 	bl	8007f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d001      	beq.n	8007c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e054      	b.n	8007cb2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 0201 	orr.w	r2, r2, #1
 8007c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a26      	ldr	r2, [pc, #152]	; (8007cc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d022      	beq.n	8007c70 <HAL_TIM_Base_Start_IT+0x80>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c32:	d01d      	beq.n	8007c70 <HAL_TIM_Base_Start_IT+0x80>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a22      	ldr	r2, [pc, #136]	; (8007cc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d018      	beq.n	8007c70 <HAL_TIM_Base_Start_IT+0x80>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a21      	ldr	r2, [pc, #132]	; (8007cc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d013      	beq.n	8007c70 <HAL_TIM_Base_Start_IT+0x80>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a1f      	ldr	r2, [pc, #124]	; (8007ccc <HAL_TIM_Base_Start_IT+0xdc>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d00e      	beq.n	8007c70 <HAL_TIM_Base_Start_IT+0x80>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a1e      	ldr	r2, [pc, #120]	; (8007cd0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d009      	beq.n	8007c70 <HAL_TIM_Base_Start_IT+0x80>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a1c      	ldr	r2, [pc, #112]	; (8007cd4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d004      	beq.n	8007c70 <HAL_TIM_Base_Start_IT+0x80>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a1b      	ldr	r2, [pc, #108]	; (8007cd8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d115      	bne.n	8007c9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	689a      	ldr	r2, [r3, #8]
 8007c76:	4b19      	ldr	r3, [pc, #100]	; (8007cdc <HAL_TIM_Base_Start_IT+0xec>)
 8007c78:	4013      	ands	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2b06      	cmp	r3, #6
 8007c80:	d015      	beq.n	8007cae <HAL_TIM_Base_Start_IT+0xbe>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c88:	d011      	beq.n	8007cae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f042 0201 	orr.w	r2, r2, #1
 8007c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c9a:	e008      	b.n	8007cae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f042 0201 	orr.w	r2, r2, #1
 8007caa:	601a      	str	r2, [r3, #0]
 8007cac:	e000      	b.n	8007cb0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	40010000 	.word	0x40010000
 8007cc4:	40000400 	.word	0x40000400
 8007cc8:	40000800 	.word	0x40000800
 8007ccc:	40000c00 	.word	0x40000c00
 8007cd0:	40010400 	.word	0x40010400
 8007cd4:	40001800 	.word	0x40001800
 8007cd8:	40014000 	.word	0x40014000
 8007cdc:	00010007 	.word	0x00010007

08007ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d122      	bne.n	8007d3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d11b      	bne.n	8007d3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f06f 0202 	mvn.w	r2, #2
 8007d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	f003 0303 	and.w	r3, r3, #3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f905 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007d28:	e005      	b.n	8007d36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f8f7 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f908 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d122      	bne.n	8007d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d11b      	bne.n	8007d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f06f 0204 	mvn.w	r2, #4
 8007d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2202      	movs	r2, #2
 8007d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f8db 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007d7c:	e005      	b.n	8007d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f8cd 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f8de 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	f003 0308 	and.w	r3, r3, #8
 8007d9a:	2b08      	cmp	r3, #8
 8007d9c:	d122      	bne.n	8007de4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f003 0308 	and.w	r3, r3, #8
 8007da8:	2b08      	cmp	r3, #8
 8007daa:	d11b      	bne.n	8007de4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f06f 0208 	mvn.w	r2, #8
 8007db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2204      	movs	r2, #4
 8007dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	f003 0303 	and.w	r3, r3, #3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f8b1 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007dd0:	e005      	b.n	8007dde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f8a3 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f8b4 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f003 0310 	and.w	r3, r3, #16
 8007dee:	2b10      	cmp	r3, #16
 8007df0:	d122      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f003 0310 	and.w	r3, r3, #16
 8007dfc:	2b10      	cmp	r3, #16
 8007dfe:	d11b      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f06f 0210 	mvn.w	r2, #16
 8007e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2208      	movs	r2, #8
 8007e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f887 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007e24:	e005      	b.n	8007e32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f879 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f88a 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d10e      	bne.n	8007e64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d107      	bne.n	8007e64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f06f 0201 	mvn.w	r2, #1
 8007e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7f9 f916 	bl	8001090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e6e:	2b80      	cmp	r3, #128	; 0x80
 8007e70:	d10e      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7c:	2b80      	cmp	r3, #128	; 0x80
 8007e7e:	d107      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f914 	bl	80080b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e9e:	d10e      	bne.n	8007ebe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eaa:	2b80      	cmp	r3, #128	; 0x80
 8007eac:	d107      	bne.n	8007ebe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f907 	bl	80080cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec8:	2b40      	cmp	r3, #64	; 0x40
 8007eca:	d10e      	bne.n	8007eea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed6:	2b40      	cmp	r3, #64	; 0x40
 8007ed8:	d107      	bne.n	8007eea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f838 	bl	8007f5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	f003 0320 	and.w	r3, r3, #32
 8007ef4:	2b20      	cmp	r3, #32
 8007ef6:	d10e      	bne.n	8007f16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d107      	bne.n	8007f16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f06f 0220 	mvn.w	r2, #32
 8007f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f8c7 	bl	80080a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f16:	bf00      	nop
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f4e:	bf00      	nop
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
	...

08007f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a40      	ldr	r2, [pc, #256]	; (8008084 <TIM_Base_SetConfig+0x114>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d013      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f8e:	d00f      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a3d      	ldr	r2, [pc, #244]	; (8008088 <TIM_Base_SetConfig+0x118>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d00b      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a3c      	ldr	r2, [pc, #240]	; (800808c <TIM_Base_SetConfig+0x11c>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d007      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a3b      	ldr	r2, [pc, #236]	; (8008090 <TIM_Base_SetConfig+0x120>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d003      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a3a      	ldr	r2, [pc, #232]	; (8008094 <TIM_Base_SetConfig+0x124>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d108      	bne.n	8007fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a2f      	ldr	r2, [pc, #188]	; (8008084 <TIM_Base_SetConfig+0x114>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d01f      	beq.n	800800a <TIM_Base_SetConfig+0x9a>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fd0:	d01b      	beq.n	800800a <TIM_Base_SetConfig+0x9a>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a2c      	ldr	r2, [pc, #176]	; (8008088 <TIM_Base_SetConfig+0x118>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d017      	beq.n	800800a <TIM_Base_SetConfig+0x9a>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a2b      	ldr	r2, [pc, #172]	; (800808c <TIM_Base_SetConfig+0x11c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d013      	beq.n	800800a <TIM_Base_SetConfig+0x9a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a2a      	ldr	r2, [pc, #168]	; (8008090 <TIM_Base_SetConfig+0x120>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00f      	beq.n	800800a <TIM_Base_SetConfig+0x9a>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a29      	ldr	r2, [pc, #164]	; (8008094 <TIM_Base_SetConfig+0x124>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d00b      	beq.n	800800a <TIM_Base_SetConfig+0x9a>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a28      	ldr	r2, [pc, #160]	; (8008098 <TIM_Base_SetConfig+0x128>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d007      	beq.n	800800a <TIM_Base_SetConfig+0x9a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a27      	ldr	r2, [pc, #156]	; (800809c <TIM_Base_SetConfig+0x12c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d003      	beq.n	800800a <TIM_Base_SetConfig+0x9a>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a26      	ldr	r2, [pc, #152]	; (80080a0 <TIM_Base_SetConfig+0x130>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d108      	bne.n	800801c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	4313      	orrs	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a10      	ldr	r2, [pc, #64]	; (8008084 <TIM_Base_SetConfig+0x114>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00f      	beq.n	8008068 <TIM_Base_SetConfig+0xf8>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a12      	ldr	r2, [pc, #72]	; (8008094 <TIM_Base_SetConfig+0x124>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d00b      	beq.n	8008068 <TIM_Base_SetConfig+0xf8>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a11      	ldr	r2, [pc, #68]	; (8008098 <TIM_Base_SetConfig+0x128>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d007      	beq.n	8008068 <TIM_Base_SetConfig+0xf8>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a10      	ldr	r2, [pc, #64]	; (800809c <TIM_Base_SetConfig+0x12c>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d003      	beq.n	8008068 <TIM_Base_SetConfig+0xf8>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a0f      	ldr	r2, [pc, #60]	; (80080a0 <TIM_Base_SetConfig+0x130>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d103      	bne.n	8008070 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	691a      	ldr	r2, [r3, #16]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	615a      	str	r2, [r3, #20]
}
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	40010000 	.word	0x40010000
 8008088:	40000400 	.word	0x40000400
 800808c:	40000800 	.word	0x40000800
 8008090:	40000c00 	.word	0x40000c00
 8008094:	40010400 	.word	0x40010400
 8008098:	40014000 	.word	0x40014000
 800809c:	40014400 	.word	0x40014400
 80080a0:	40014800 	.word	0x40014800

080080a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e042      	b.n	8008178 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d106      	bne.n	800810a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7f9 fb6f 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2224      	movs	r2, #36	; 0x24
 800810e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0201 	bic.w	r2, r2, #1
 8008120:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f82c 	bl	8008180 <UART_SetConfig>
 8008128:	4603      	mov	r3, r0
 800812a:	2b01      	cmp	r3, #1
 800812c:	d101      	bne.n	8008132 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e022      	b.n	8008178 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fe8c 	bl	8008e58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800814e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689a      	ldr	r2, [r3, #8]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800815e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f042 0201 	orr.w	r2, r2, #1
 800816e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 ff13 	bl	8008f9c <UART_CheckIdleState>
 8008176:	4603      	mov	r3, r0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008184:	b092      	sub	sp, #72	; 0x48
 8008186:	af00      	add	r7, sp, #0
 8008188:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	689a      	ldr	r2, [r3, #8]
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	431a      	orrs	r2, r3
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	431a      	orrs	r2, r3
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	4bbe      	ldr	r3, [pc, #760]	; (80084a8 <UART_SetConfig+0x328>)
 80081b0:	4013      	ands	r3, r2
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	6812      	ldr	r2, [r2, #0]
 80081b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081b8:	430b      	orrs	r3, r1
 80081ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4ab3      	ldr	r2, [pc, #716]	; (80084ac <UART_SetConfig+0x32c>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d004      	beq.n	80081ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081e8:	4313      	orrs	r3, r2
 80081ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689a      	ldr	r2, [r3, #8]
 80081f2:	4baf      	ldr	r3, [pc, #700]	; (80084b0 <UART_SetConfig+0x330>)
 80081f4:	4013      	ands	r3, r2
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	6812      	ldr	r2, [r2, #0]
 80081fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081fc:	430b      	orrs	r3, r1
 80081fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008206:	f023 010f 	bic.w	r1, r3, #15
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	430a      	orrs	r2, r1
 8008214:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4aa6      	ldr	r2, [pc, #664]	; (80084b4 <UART_SetConfig+0x334>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d177      	bne.n	8008310 <UART_SetConfig+0x190>
 8008220:	4ba5      	ldr	r3, [pc, #660]	; (80084b8 <UART_SetConfig+0x338>)
 8008222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008224:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008228:	2b28      	cmp	r3, #40	; 0x28
 800822a:	d86d      	bhi.n	8008308 <UART_SetConfig+0x188>
 800822c:	a201      	add	r2, pc, #4	; (adr r2, 8008234 <UART_SetConfig+0xb4>)
 800822e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008232:	bf00      	nop
 8008234:	080082d9 	.word	0x080082d9
 8008238:	08008309 	.word	0x08008309
 800823c:	08008309 	.word	0x08008309
 8008240:	08008309 	.word	0x08008309
 8008244:	08008309 	.word	0x08008309
 8008248:	08008309 	.word	0x08008309
 800824c:	08008309 	.word	0x08008309
 8008250:	08008309 	.word	0x08008309
 8008254:	080082e1 	.word	0x080082e1
 8008258:	08008309 	.word	0x08008309
 800825c:	08008309 	.word	0x08008309
 8008260:	08008309 	.word	0x08008309
 8008264:	08008309 	.word	0x08008309
 8008268:	08008309 	.word	0x08008309
 800826c:	08008309 	.word	0x08008309
 8008270:	08008309 	.word	0x08008309
 8008274:	080082e9 	.word	0x080082e9
 8008278:	08008309 	.word	0x08008309
 800827c:	08008309 	.word	0x08008309
 8008280:	08008309 	.word	0x08008309
 8008284:	08008309 	.word	0x08008309
 8008288:	08008309 	.word	0x08008309
 800828c:	08008309 	.word	0x08008309
 8008290:	08008309 	.word	0x08008309
 8008294:	080082f1 	.word	0x080082f1
 8008298:	08008309 	.word	0x08008309
 800829c:	08008309 	.word	0x08008309
 80082a0:	08008309 	.word	0x08008309
 80082a4:	08008309 	.word	0x08008309
 80082a8:	08008309 	.word	0x08008309
 80082ac:	08008309 	.word	0x08008309
 80082b0:	08008309 	.word	0x08008309
 80082b4:	080082f9 	.word	0x080082f9
 80082b8:	08008309 	.word	0x08008309
 80082bc:	08008309 	.word	0x08008309
 80082c0:	08008309 	.word	0x08008309
 80082c4:	08008309 	.word	0x08008309
 80082c8:	08008309 	.word	0x08008309
 80082cc:	08008309 	.word	0x08008309
 80082d0:	08008309 	.word	0x08008309
 80082d4:	08008301 	.word	0x08008301
 80082d8:	2301      	movs	r3, #1
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082de:	e326      	b.n	800892e <UART_SetConfig+0x7ae>
 80082e0:	2304      	movs	r3, #4
 80082e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e6:	e322      	b.n	800892e <UART_SetConfig+0x7ae>
 80082e8:	2308      	movs	r3, #8
 80082ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ee:	e31e      	b.n	800892e <UART_SetConfig+0x7ae>
 80082f0:	2310      	movs	r3, #16
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f6:	e31a      	b.n	800892e <UART_SetConfig+0x7ae>
 80082f8:	2320      	movs	r3, #32
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fe:	e316      	b.n	800892e <UART_SetConfig+0x7ae>
 8008300:	2340      	movs	r3, #64	; 0x40
 8008302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008306:	e312      	b.n	800892e <UART_SetConfig+0x7ae>
 8008308:	2380      	movs	r3, #128	; 0x80
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830e:	e30e      	b.n	800892e <UART_SetConfig+0x7ae>
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a69      	ldr	r2, [pc, #420]	; (80084bc <UART_SetConfig+0x33c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d130      	bne.n	800837c <UART_SetConfig+0x1fc>
 800831a:	4b67      	ldr	r3, [pc, #412]	; (80084b8 <UART_SetConfig+0x338>)
 800831c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831e:	f003 0307 	and.w	r3, r3, #7
 8008322:	2b05      	cmp	r3, #5
 8008324:	d826      	bhi.n	8008374 <UART_SetConfig+0x1f4>
 8008326:	a201      	add	r2, pc, #4	; (adr r2, 800832c <UART_SetConfig+0x1ac>)
 8008328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832c:	08008345 	.word	0x08008345
 8008330:	0800834d 	.word	0x0800834d
 8008334:	08008355 	.word	0x08008355
 8008338:	0800835d 	.word	0x0800835d
 800833c:	08008365 	.word	0x08008365
 8008340:	0800836d 	.word	0x0800836d
 8008344:	2300      	movs	r3, #0
 8008346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834a:	e2f0      	b.n	800892e <UART_SetConfig+0x7ae>
 800834c:	2304      	movs	r3, #4
 800834e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008352:	e2ec      	b.n	800892e <UART_SetConfig+0x7ae>
 8008354:	2308      	movs	r3, #8
 8008356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835a:	e2e8      	b.n	800892e <UART_SetConfig+0x7ae>
 800835c:	2310      	movs	r3, #16
 800835e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008362:	e2e4      	b.n	800892e <UART_SetConfig+0x7ae>
 8008364:	2320      	movs	r3, #32
 8008366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836a:	e2e0      	b.n	800892e <UART_SetConfig+0x7ae>
 800836c:	2340      	movs	r3, #64	; 0x40
 800836e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008372:	e2dc      	b.n	800892e <UART_SetConfig+0x7ae>
 8008374:	2380      	movs	r3, #128	; 0x80
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800837a:	e2d8      	b.n	800892e <UART_SetConfig+0x7ae>
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a4f      	ldr	r2, [pc, #316]	; (80084c0 <UART_SetConfig+0x340>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d130      	bne.n	80083e8 <UART_SetConfig+0x268>
 8008386:	4b4c      	ldr	r3, [pc, #304]	; (80084b8 <UART_SetConfig+0x338>)
 8008388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800838a:	f003 0307 	and.w	r3, r3, #7
 800838e:	2b05      	cmp	r3, #5
 8008390:	d826      	bhi.n	80083e0 <UART_SetConfig+0x260>
 8008392:	a201      	add	r2, pc, #4	; (adr r2, 8008398 <UART_SetConfig+0x218>)
 8008394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008398:	080083b1 	.word	0x080083b1
 800839c:	080083b9 	.word	0x080083b9
 80083a0:	080083c1 	.word	0x080083c1
 80083a4:	080083c9 	.word	0x080083c9
 80083a8:	080083d1 	.word	0x080083d1
 80083ac:	080083d9 	.word	0x080083d9
 80083b0:	2300      	movs	r3, #0
 80083b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b6:	e2ba      	b.n	800892e <UART_SetConfig+0x7ae>
 80083b8:	2304      	movs	r3, #4
 80083ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083be:	e2b6      	b.n	800892e <UART_SetConfig+0x7ae>
 80083c0:	2308      	movs	r3, #8
 80083c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c6:	e2b2      	b.n	800892e <UART_SetConfig+0x7ae>
 80083c8:	2310      	movs	r3, #16
 80083ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ce:	e2ae      	b.n	800892e <UART_SetConfig+0x7ae>
 80083d0:	2320      	movs	r3, #32
 80083d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d6:	e2aa      	b.n	800892e <UART_SetConfig+0x7ae>
 80083d8:	2340      	movs	r3, #64	; 0x40
 80083da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083de:	e2a6      	b.n	800892e <UART_SetConfig+0x7ae>
 80083e0:	2380      	movs	r3, #128	; 0x80
 80083e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083e6:	e2a2      	b.n	800892e <UART_SetConfig+0x7ae>
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a35      	ldr	r2, [pc, #212]	; (80084c4 <UART_SetConfig+0x344>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d130      	bne.n	8008454 <UART_SetConfig+0x2d4>
 80083f2:	4b31      	ldr	r3, [pc, #196]	; (80084b8 <UART_SetConfig+0x338>)
 80083f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f6:	f003 0307 	and.w	r3, r3, #7
 80083fa:	2b05      	cmp	r3, #5
 80083fc:	d826      	bhi.n	800844c <UART_SetConfig+0x2cc>
 80083fe:	a201      	add	r2, pc, #4	; (adr r2, 8008404 <UART_SetConfig+0x284>)
 8008400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008404:	0800841d 	.word	0x0800841d
 8008408:	08008425 	.word	0x08008425
 800840c:	0800842d 	.word	0x0800842d
 8008410:	08008435 	.word	0x08008435
 8008414:	0800843d 	.word	0x0800843d
 8008418:	08008445 	.word	0x08008445
 800841c:	2300      	movs	r3, #0
 800841e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008422:	e284      	b.n	800892e <UART_SetConfig+0x7ae>
 8008424:	2304      	movs	r3, #4
 8008426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842a:	e280      	b.n	800892e <UART_SetConfig+0x7ae>
 800842c:	2308      	movs	r3, #8
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008432:	e27c      	b.n	800892e <UART_SetConfig+0x7ae>
 8008434:	2310      	movs	r3, #16
 8008436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843a:	e278      	b.n	800892e <UART_SetConfig+0x7ae>
 800843c:	2320      	movs	r3, #32
 800843e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008442:	e274      	b.n	800892e <UART_SetConfig+0x7ae>
 8008444:	2340      	movs	r3, #64	; 0x40
 8008446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844a:	e270      	b.n	800892e <UART_SetConfig+0x7ae>
 800844c:	2380      	movs	r3, #128	; 0x80
 800844e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008452:	e26c      	b.n	800892e <UART_SetConfig+0x7ae>
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a1b      	ldr	r2, [pc, #108]	; (80084c8 <UART_SetConfig+0x348>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d142      	bne.n	80084e4 <UART_SetConfig+0x364>
 800845e:	4b16      	ldr	r3, [pc, #88]	; (80084b8 <UART_SetConfig+0x338>)
 8008460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	2b05      	cmp	r3, #5
 8008468:	d838      	bhi.n	80084dc <UART_SetConfig+0x35c>
 800846a:	a201      	add	r2, pc, #4	; (adr r2, 8008470 <UART_SetConfig+0x2f0>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	08008489 	.word	0x08008489
 8008474:	08008491 	.word	0x08008491
 8008478:	08008499 	.word	0x08008499
 800847c:	080084a1 	.word	0x080084a1
 8008480:	080084cd 	.word	0x080084cd
 8008484:	080084d5 	.word	0x080084d5
 8008488:	2300      	movs	r3, #0
 800848a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848e:	e24e      	b.n	800892e <UART_SetConfig+0x7ae>
 8008490:	2304      	movs	r3, #4
 8008492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008496:	e24a      	b.n	800892e <UART_SetConfig+0x7ae>
 8008498:	2308      	movs	r3, #8
 800849a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849e:	e246      	b.n	800892e <UART_SetConfig+0x7ae>
 80084a0:	2310      	movs	r3, #16
 80084a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a6:	e242      	b.n	800892e <UART_SetConfig+0x7ae>
 80084a8:	cfff69f3 	.word	0xcfff69f3
 80084ac:	58000c00 	.word	0x58000c00
 80084b0:	11fff4ff 	.word	0x11fff4ff
 80084b4:	40011000 	.word	0x40011000
 80084b8:	58024400 	.word	0x58024400
 80084bc:	40004400 	.word	0x40004400
 80084c0:	40004800 	.word	0x40004800
 80084c4:	40004c00 	.word	0x40004c00
 80084c8:	40005000 	.word	0x40005000
 80084cc:	2320      	movs	r3, #32
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d2:	e22c      	b.n	800892e <UART_SetConfig+0x7ae>
 80084d4:	2340      	movs	r3, #64	; 0x40
 80084d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084da:	e228      	b.n	800892e <UART_SetConfig+0x7ae>
 80084dc:	2380      	movs	r3, #128	; 0x80
 80084de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e2:	e224      	b.n	800892e <UART_SetConfig+0x7ae>
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4ab1      	ldr	r2, [pc, #708]	; (80087b0 <UART_SetConfig+0x630>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d176      	bne.n	80085dc <UART_SetConfig+0x45c>
 80084ee:	4bb1      	ldr	r3, [pc, #708]	; (80087b4 <UART_SetConfig+0x634>)
 80084f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084f6:	2b28      	cmp	r3, #40	; 0x28
 80084f8:	d86c      	bhi.n	80085d4 <UART_SetConfig+0x454>
 80084fa:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <UART_SetConfig+0x380>)
 80084fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008500:	080085a5 	.word	0x080085a5
 8008504:	080085d5 	.word	0x080085d5
 8008508:	080085d5 	.word	0x080085d5
 800850c:	080085d5 	.word	0x080085d5
 8008510:	080085d5 	.word	0x080085d5
 8008514:	080085d5 	.word	0x080085d5
 8008518:	080085d5 	.word	0x080085d5
 800851c:	080085d5 	.word	0x080085d5
 8008520:	080085ad 	.word	0x080085ad
 8008524:	080085d5 	.word	0x080085d5
 8008528:	080085d5 	.word	0x080085d5
 800852c:	080085d5 	.word	0x080085d5
 8008530:	080085d5 	.word	0x080085d5
 8008534:	080085d5 	.word	0x080085d5
 8008538:	080085d5 	.word	0x080085d5
 800853c:	080085d5 	.word	0x080085d5
 8008540:	080085b5 	.word	0x080085b5
 8008544:	080085d5 	.word	0x080085d5
 8008548:	080085d5 	.word	0x080085d5
 800854c:	080085d5 	.word	0x080085d5
 8008550:	080085d5 	.word	0x080085d5
 8008554:	080085d5 	.word	0x080085d5
 8008558:	080085d5 	.word	0x080085d5
 800855c:	080085d5 	.word	0x080085d5
 8008560:	080085bd 	.word	0x080085bd
 8008564:	080085d5 	.word	0x080085d5
 8008568:	080085d5 	.word	0x080085d5
 800856c:	080085d5 	.word	0x080085d5
 8008570:	080085d5 	.word	0x080085d5
 8008574:	080085d5 	.word	0x080085d5
 8008578:	080085d5 	.word	0x080085d5
 800857c:	080085d5 	.word	0x080085d5
 8008580:	080085c5 	.word	0x080085c5
 8008584:	080085d5 	.word	0x080085d5
 8008588:	080085d5 	.word	0x080085d5
 800858c:	080085d5 	.word	0x080085d5
 8008590:	080085d5 	.word	0x080085d5
 8008594:	080085d5 	.word	0x080085d5
 8008598:	080085d5 	.word	0x080085d5
 800859c:	080085d5 	.word	0x080085d5
 80085a0:	080085cd 	.word	0x080085cd
 80085a4:	2301      	movs	r3, #1
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085aa:	e1c0      	b.n	800892e <UART_SetConfig+0x7ae>
 80085ac:	2304      	movs	r3, #4
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b2:	e1bc      	b.n	800892e <UART_SetConfig+0x7ae>
 80085b4:	2308      	movs	r3, #8
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ba:	e1b8      	b.n	800892e <UART_SetConfig+0x7ae>
 80085bc:	2310      	movs	r3, #16
 80085be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085c2:	e1b4      	b.n	800892e <UART_SetConfig+0x7ae>
 80085c4:	2320      	movs	r3, #32
 80085c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ca:	e1b0      	b.n	800892e <UART_SetConfig+0x7ae>
 80085cc:	2340      	movs	r3, #64	; 0x40
 80085ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085d2:	e1ac      	b.n	800892e <UART_SetConfig+0x7ae>
 80085d4:	2380      	movs	r3, #128	; 0x80
 80085d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085da:	e1a8      	b.n	800892e <UART_SetConfig+0x7ae>
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a75      	ldr	r2, [pc, #468]	; (80087b8 <UART_SetConfig+0x638>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d130      	bne.n	8008648 <UART_SetConfig+0x4c8>
 80085e6:	4b73      	ldr	r3, [pc, #460]	; (80087b4 <UART_SetConfig+0x634>)
 80085e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ea:	f003 0307 	and.w	r3, r3, #7
 80085ee:	2b05      	cmp	r3, #5
 80085f0:	d826      	bhi.n	8008640 <UART_SetConfig+0x4c0>
 80085f2:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <UART_SetConfig+0x478>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	08008611 	.word	0x08008611
 80085fc:	08008619 	.word	0x08008619
 8008600:	08008621 	.word	0x08008621
 8008604:	08008629 	.word	0x08008629
 8008608:	08008631 	.word	0x08008631
 800860c:	08008639 	.word	0x08008639
 8008610:	2300      	movs	r3, #0
 8008612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008616:	e18a      	b.n	800892e <UART_SetConfig+0x7ae>
 8008618:	2304      	movs	r3, #4
 800861a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800861e:	e186      	b.n	800892e <UART_SetConfig+0x7ae>
 8008620:	2308      	movs	r3, #8
 8008622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008626:	e182      	b.n	800892e <UART_SetConfig+0x7ae>
 8008628:	2310      	movs	r3, #16
 800862a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862e:	e17e      	b.n	800892e <UART_SetConfig+0x7ae>
 8008630:	2320      	movs	r3, #32
 8008632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008636:	e17a      	b.n	800892e <UART_SetConfig+0x7ae>
 8008638:	2340      	movs	r3, #64	; 0x40
 800863a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863e:	e176      	b.n	800892e <UART_SetConfig+0x7ae>
 8008640:	2380      	movs	r3, #128	; 0x80
 8008642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008646:	e172      	b.n	800892e <UART_SetConfig+0x7ae>
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a5b      	ldr	r2, [pc, #364]	; (80087bc <UART_SetConfig+0x63c>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d130      	bne.n	80086b4 <UART_SetConfig+0x534>
 8008652:	4b58      	ldr	r3, [pc, #352]	; (80087b4 <UART_SetConfig+0x634>)
 8008654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008656:	f003 0307 	and.w	r3, r3, #7
 800865a:	2b05      	cmp	r3, #5
 800865c:	d826      	bhi.n	80086ac <UART_SetConfig+0x52c>
 800865e:	a201      	add	r2, pc, #4	; (adr r2, 8008664 <UART_SetConfig+0x4e4>)
 8008660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008664:	0800867d 	.word	0x0800867d
 8008668:	08008685 	.word	0x08008685
 800866c:	0800868d 	.word	0x0800868d
 8008670:	08008695 	.word	0x08008695
 8008674:	0800869d 	.word	0x0800869d
 8008678:	080086a5 	.word	0x080086a5
 800867c:	2300      	movs	r3, #0
 800867e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008682:	e154      	b.n	800892e <UART_SetConfig+0x7ae>
 8008684:	2304      	movs	r3, #4
 8008686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868a:	e150      	b.n	800892e <UART_SetConfig+0x7ae>
 800868c:	2308      	movs	r3, #8
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008692:	e14c      	b.n	800892e <UART_SetConfig+0x7ae>
 8008694:	2310      	movs	r3, #16
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869a:	e148      	b.n	800892e <UART_SetConfig+0x7ae>
 800869c:	2320      	movs	r3, #32
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a2:	e144      	b.n	800892e <UART_SetConfig+0x7ae>
 80086a4:	2340      	movs	r3, #64	; 0x40
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086aa:	e140      	b.n	800892e <UART_SetConfig+0x7ae>
 80086ac:	2380      	movs	r3, #128	; 0x80
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b2:	e13c      	b.n	800892e <UART_SetConfig+0x7ae>
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a41      	ldr	r2, [pc, #260]	; (80087c0 <UART_SetConfig+0x640>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	f040 8082 	bne.w	80087c4 <UART_SetConfig+0x644>
 80086c0:	4b3c      	ldr	r3, [pc, #240]	; (80087b4 <UART_SetConfig+0x634>)
 80086c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086c8:	2b28      	cmp	r3, #40	; 0x28
 80086ca:	d86d      	bhi.n	80087a8 <UART_SetConfig+0x628>
 80086cc:	a201      	add	r2, pc, #4	; (adr r2, 80086d4 <UART_SetConfig+0x554>)
 80086ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d2:	bf00      	nop
 80086d4:	08008779 	.word	0x08008779
 80086d8:	080087a9 	.word	0x080087a9
 80086dc:	080087a9 	.word	0x080087a9
 80086e0:	080087a9 	.word	0x080087a9
 80086e4:	080087a9 	.word	0x080087a9
 80086e8:	080087a9 	.word	0x080087a9
 80086ec:	080087a9 	.word	0x080087a9
 80086f0:	080087a9 	.word	0x080087a9
 80086f4:	08008781 	.word	0x08008781
 80086f8:	080087a9 	.word	0x080087a9
 80086fc:	080087a9 	.word	0x080087a9
 8008700:	080087a9 	.word	0x080087a9
 8008704:	080087a9 	.word	0x080087a9
 8008708:	080087a9 	.word	0x080087a9
 800870c:	080087a9 	.word	0x080087a9
 8008710:	080087a9 	.word	0x080087a9
 8008714:	08008789 	.word	0x08008789
 8008718:	080087a9 	.word	0x080087a9
 800871c:	080087a9 	.word	0x080087a9
 8008720:	080087a9 	.word	0x080087a9
 8008724:	080087a9 	.word	0x080087a9
 8008728:	080087a9 	.word	0x080087a9
 800872c:	080087a9 	.word	0x080087a9
 8008730:	080087a9 	.word	0x080087a9
 8008734:	08008791 	.word	0x08008791
 8008738:	080087a9 	.word	0x080087a9
 800873c:	080087a9 	.word	0x080087a9
 8008740:	080087a9 	.word	0x080087a9
 8008744:	080087a9 	.word	0x080087a9
 8008748:	080087a9 	.word	0x080087a9
 800874c:	080087a9 	.word	0x080087a9
 8008750:	080087a9 	.word	0x080087a9
 8008754:	08008799 	.word	0x08008799
 8008758:	080087a9 	.word	0x080087a9
 800875c:	080087a9 	.word	0x080087a9
 8008760:	080087a9 	.word	0x080087a9
 8008764:	080087a9 	.word	0x080087a9
 8008768:	080087a9 	.word	0x080087a9
 800876c:	080087a9 	.word	0x080087a9
 8008770:	080087a9 	.word	0x080087a9
 8008774:	080087a1 	.word	0x080087a1
 8008778:	2301      	movs	r3, #1
 800877a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800877e:	e0d6      	b.n	800892e <UART_SetConfig+0x7ae>
 8008780:	2304      	movs	r3, #4
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008786:	e0d2      	b.n	800892e <UART_SetConfig+0x7ae>
 8008788:	2308      	movs	r3, #8
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878e:	e0ce      	b.n	800892e <UART_SetConfig+0x7ae>
 8008790:	2310      	movs	r3, #16
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008796:	e0ca      	b.n	800892e <UART_SetConfig+0x7ae>
 8008798:	2320      	movs	r3, #32
 800879a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879e:	e0c6      	b.n	800892e <UART_SetConfig+0x7ae>
 80087a0:	2340      	movs	r3, #64	; 0x40
 80087a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a6:	e0c2      	b.n	800892e <UART_SetConfig+0x7ae>
 80087a8:	2380      	movs	r3, #128	; 0x80
 80087aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ae:	e0be      	b.n	800892e <UART_SetConfig+0x7ae>
 80087b0:	40011400 	.word	0x40011400
 80087b4:	58024400 	.word	0x58024400
 80087b8:	40007800 	.word	0x40007800
 80087bc:	40007c00 	.word	0x40007c00
 80087c0:	40011800 	.word	0x40011800
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4aad      	ldr	r2, [pc, #692]	; (8008a80 <UART_SetConfig+0x900>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d176      	bne.n	80088bc <UART_SetConfig+0x73c>
 80087ce:	4bad      	ldr	r3, [pc, #692]	; (8008a84 <UART_SetConfig+0x904>)
 80087d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087d6:	2b28      	cmp	r3, #40	; 0x28
 80087d8:	d86c      	bhi.n	80088b4 <UART_SetConfig+0x734>
 80087da:	a201      	add	r2, pc, #4	; (adr r2, 80087e0 <UART_SetConfig+0x660>)
 80087dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e0:	08008885 	.word	0x08008885
 80087e4:	080088b5 	.word	0x080088b5
 80087e8:	080088b5 	.word	0x080088b5
 80087ec:	080088b5 	.word	0x080088b5
 80087f0:	080088b5 	.word	0x080088b5
 80087f4:	080088b5 	.word	0x080088b5
 80087f8:	080088b5 	.word	0x080088b5
 80087fc:	080088b5 	.word	0x080088b5
 8008800:	0800888d 	.word	0x0800888d
 8008804:	080088b5 	.word	0x080088b5
 8008808:	080088b5 	.word	0x080088b5
 800880c:	080088b5 	.word	0x080088b5
 8008810:	080088b5 	.word	0x080088b5
 8008814:	080088b5 	.word	0x080088b5
 8008818:	080088b5 	.word	0x080088b5
 800881c:	080088b5 	.word	0x080088b5
 8008820:	08008895 	.word	0x08008895
 8008824:	080088b5 	.word	0x080088b5
 8008828:	080088b5 	.word	0x080088b5
 800882c:	080088b5 	.word	0x080088b5
 8008830:	080088b5 	.word	0x080088b5
 8008834:	080088b5 	.word	0x080088b5
 8008838:	080088b5 	.word	0x080088b5
 800883c:	080088b5 	.word	0x080088b5
 8008840:	0800889d 	.word	0x0800889d
 8008844:	080088b5 	.word	0x080088b5
 8008848:	080088b5 	.word	0x080088b5
 800884c:	080088b5 	.word	0x080088b5
 8008850:	080088b5 	.word	0x080088b5
 8008854:	080088b5 	.word	0x080088b5
 8008858:	080088b5 	.word	0x080088b5
 800885c:	080088b5 	.word	0x080088b5
 8008860:	080088a5 	.word	0x080088a5
 8008864:	080088b5 	.word	0x080088b5
 8008868:	080088b5 	.word	0x080088b5
 800886c:	080088b5 	.word	0x080088b5
 8008870:	080088b5 	.word	0x080088b5
 8008874:	080088b5 	.word	0x080088b5
 8008878:	080088b5 	.word	0x080088b5
 800887c:	080088b5 	.word	0x080088b5
 8008880:	080088ad 	.word	0x080088ad
 8008884:	2301      	movs	r3, #1
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888a:	e050      	b.n	800892e <UART_SetConfig+0x7ae>
 800888c:	2304      	movs	r3, #4
 800888e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008892:	e04c      	b.n	800892e <UART_SetConfig+0x7ae>
 8008894:	2308      	movs	r3, #8
 8008896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800889a:	e048      	b.n	800892e <UART_SetConfig+0x7ae>
 800889c:	2310      	movs	r3, #16
 800889e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088a2:	e044      	b.n	800892e <UART_SetConfig+0x7ae>
 80088a4:	2320      	movs	r3, #32
 80088a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088aa:	e040      	b.n	800892e <UART_SetConfig+0x7ae>
 80088ac:	2340      	movs	r3, #64	; 0x40
 80088ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088b2:	e03c      	b.n	800892e <UART_SetConfig+0x7ae>
 80088b4:	2380      	movs	r3, #128	; 0x80
 80088b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ba:	e038      	b.n	800892e <UART_SetConfig+0x7ae>
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a71      	ldr	r2, [pc, #452]	; (8008a88 <UART_SetConfig+0x908>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d130      	bne.n	8008928 <UART_SetConfig+0x7a8>
 80088c6:	4b6f      	ldr	r3, [pc, #444]	; (8008a84 <UART_SetConfig+0x904>)
 80088c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ca:	f003 0307 	and.w	r3, r3, #7
 80088ce:	2b05      	cmp	r3, #5
 80088d0:	d826      	bhi.n	8008920 <UART_SetConfig+0x7a0>
 80088d2:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <UART_SetConfig+0x758>)
 80088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d8:	080088f1 	.word	0x080088f1
 80088dc:	080088f9 	.word	0x080088f9
 80088e0:	08008901 	.word	0x08008901
 80088e4:	08008909 	.word	0x08008909
 80088e8:	08008911 	.word	0x08008911
 80088ec:	08008919 	.word	0x08008919
 80088f0:	2302      	movs	r3, #2
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088f6:	e01a      	b.n	800892e <UART_SetConfig+0x7ae>
 80088f8:	2304      	movs	r3, #4
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fe:	e016      	b.n	800892e <UART_SetConfig+0x7ae>
 8008900:	2308      	movs	r3, #8
 8008902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008906:	e012      	b.n	800892e <UART_SetConfig+0x7ae>
 8008908:	2310      	movs	r3, #16
 800890a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890e:	e00e      	b.n	800892e <UART_SetConfig+0x7ae>
 8008910:	2320      	movs	r3, #32
 8008912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008916:	e00a      	b.n	800892e <UART_SetConfig+0x7ae>
 8008918:	2340      	movs	r3, #64	; 0x40
 800891a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891e:	e006      	b.n	800892e <UART_SetConfig+0x7ae>
 8008920:	2380      	movs	r3, #128	; 0x80
 8008922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008926:	e002      	b.n	800892e <UART_SetConfig+0x7ae>
 8008928:	2380      	movs	r3, #128	; 0x80
 800892a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a55      	ldr	r2, [pc, #340]	; (8008a88 <UART_SetConfig+0x908>)
 8008934:	4293      	cmp	r3, r2
 8008936:	f040 80f8 	bne.w	8008b2a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800893a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800893e:	2b20      	cmp	r3, #32
 8008940:	dc46      	bgt.n	80089d0 <UART_SetConfig+0x850>
 8008942:	2b02      	cmp	r3, #2
 8008944:	db75      	blt.n	8008a32 <UART_SetConfig+0x8b2>
 8008946:	3b02      	subs	r3, #2
 8008948:	2b1e      	cmp	r3, #30
 800894a:	d872      	bhi.n	8008a32 <UART_SetConfig+0x8b2>
 800894c:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <UART_SetConfig+0x7d4>)
 800894e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008952:	bf00      	nop
 8008954:	080089d7 	.word	0x080089d7
 8008958:	08008a33 	.word	0x08008a33
 800895c:	080089df 	.word	0x080089df
 8008960:	08008a33 	.word	0x08008a33
 8008964:	08008a33 	.word	0x08008a33
 8008968:	08008a33 	.word	0x08008a33
 800896c:	080089ef 	.word	0x080089ef
 8008970:	08008a33 	.word	0x08008a33
 8008974:	08008a33 	.word	0x08008a33
 8008978:	08008a33 	.word	0x08008a33
 800897c:	08008a33 	.word	0x08008a33
 8008980:	08008a33 	.word	0x08008a33
 8008984:	08008a33 	.word	0x08008a33
 8008988:	08008a33 	.word	0x08008a33
 800898c:	080089ff 	.word	0x080089ff
 8008990:	08008a33 	.word	0x08008a33
 8008994:	08008a33 	.word	0x08008a33
 8008998:	08008a33 	.word	0x08008a33
 800899c:	08008a33 	.word	0x08008a33
 80089a0:	08008a33 	.word	0x08008a33
 80089a4:	08008a33 	.word	0x08008a33
 80089a8:	08008a33 	.word	0x08008a33
 80089ac:	08008a33 	.word	0x08008a33
 80089b0:	08008a33 	.word	0x08008a33
 80089b4:	08008a33 	.word	0x08008a33
 80089b8:	08008a33 	.word	0x08008a33
 80089bc:	08008a33 	.word	0x08008a33
 80089c0:	08008a33 	.word	0x08008a33
 80089c4:	08008a33 	.word	0x08008a33
 80089c8:	08008a33 	.word	0x08008a33
 80089cc:	08008a25 	.word	0x08008a25
 80089d0:	2b40      	cmp	r3, #64	; 0x40
 80089d2:	d02a      	beq.n	8008a2a <UART_SetConfig+0x8aa>
 80089d4:	e02d      	b.n	8008a32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80089d6:	f7fe f89d 	bl	8006b14 <HAL_RCCEx_GetD3PCLK1Freq>
 80089da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089dc:	e02f      	b.n	8008a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fe f8ac 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089ec:	e027      	b.n	8008a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089ee:	f107 0318 	add.w	r3, r7, #24
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fe f9f8 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089fc:	e01f      	b.n	8008a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089fe:	4b21      	ldr	r3, [pc, #132]	; (8008a84 <UART_SetConfig+0x904>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0320 	and.w	r3, r3, #32
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d009      	beq.n	8008a1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a0a:	4b1e      	ldr	r3, [pc, #120]	; (8008a84 <UART_SetConfig+0x904>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	08db      	lsrs	r3, r3, #3
 8008a10:	f003 0303 	and.w	r3, r3, #3
 8008a14:	4a1d      	ldr	r2, [pc, #116]	; (8008a8c <UART_SetConfig+0x90c>)
 8008a16:	fa22 f303 	lsr.w	r3, r2, r3
 8008a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a1c:	e00f      	b.n	8008a3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008a1e:	4b1b      	ldr	r3, [pc, #108]	; (8008a8c <UART_SetConfig+0x90c>)
 8008a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a22:	e00c      	b.n	8008a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a24:	4b1a      	ldr	r3, [pc, #104]	; (8008a90 <UART_SetConfig+0x910>)
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a28:	e009      	b.n	8008a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a30:	e005      	b.n	8008a3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008a3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 81ee 	beq.w	8008e22 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	4a12      	ldr	r2, [pc, #72]	; (8008a94 <UART_SetConfig+0x914>)
 8008a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a50:	461a      	mov	r2, r3
 8008a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a58:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	4413      	add	r3, r2
 8008a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d305      	bcc.n	8008a76 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d910      	bls.n	8008a98 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008a7c:	e1d1      	b.n	8008e22 <UART_SetConfig+0xca2>
 8008a7e:	bf00      	nop
 8008a80:	40011c00 	.word	0x40011c00
 8008a84:	58024400 	.word	0x58024400
 8008a88:	58000c00 	.word	0x58000c00
 8008a8c:	03d09000 	.word	0x03d09000
 8008a90:	003d0900 	.word	0x003d0900
 8008a94:	0800c230 	.word	0x0800c230
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	60bb      	str	r3, [r7, #8]
 8008a9e:	60fa      	str	r2, [r7, #12]
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	4ac0      	ldr	r2, [pc, #768]	; (8008da8 <UART_SetConfig+0xc28>)
 8008aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	2200      	movs	r2, #0
 8008aae:	603b      	str	r3, [r7, #0]
 8008ab0:	607a      	str	r2, [r7, #4]
 8008ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ab6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008aba:	f7f7 fc19 	bl	80002f0 <__aeabi_uldivmod>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4610      	mov	r0, r2
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	f04f 0200 	mov.w	r2, #0
 8008aca:	f04f 0300 	mov.w	r3, #0
 8008ace:	020b      	lsls	r3, r1, #8
 8008ad0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ad4:	0202      	lsls	r2, r0, #8
 8008ad6:	6979      	ldr	r1, [r7, #20]
 8008ad8:	6849      	ldr	r1, [r1, #4]
 8008ada:	0849      	lsrs	r1, r1, #1
 8008adc:	2000      	movs	r0, #0
 8008ade:	460c      	mov	r4, r1
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	eb12 0804 	adds.w	r8, r2, r4
 8008ae6:	eb43 0905 	adc.w	r9, r3, r5
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	469a      	mov	sl, r3
 8008af2:	4693      	mov	fp, r2
 8008af4:	4652      	mov	r2, sl
 8008af6:	465b      	mov	r3, fp
 8008af8:	4640      	mov	r0, r8
 8008afa:	4649      	mov	r1, r9
 8008afc:	f7f7 fbf8 	bl	80002f0 <__aeabi_uldivmod>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4613      	mov	r3, r2
 8008b06:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b0e:	d308      	bcc.n	8008b22 <UART_SetConfig+0x9a2>
 8008b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b16:	d204      	bcs.n	8008b22 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b1e:	60da      	str	r2, [r3, #12]
 8008b20:	e17f      	b.n	8008e22 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008b28:	e17b      	b.n	8008e22 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b32:	f040 80bd 	bne.w	8008cb0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008b36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b3a:	2b20      	cmp	r3, #32
 8008b3c:	dc48      	bgt.n	8008bd0 <UART_SetConfig+0xa50>
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	db7b      	blt.n	8008c3a <UART_SetConfig+0xaba>
 8008b42:	2b20      	cmp	r3, #32
 8008b44:	d879      	bhi.n	8008c3a <UART_SetConfig+0xaba>
 8008b46:	a201      	add	r2, pc, #4	; (adr r2, 8008b4c <UART_SetConfig+0x9cc>)
 8008b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4c:	08008bd7 	.word	0x08008bd7
 8008b50:	08008bdf 	.word	0x08008bdf
 8008b54:	08008c3b 	.word	0x08008c3b
 8008b58:	08008c3b 	.word	0x08008c3b
 8008b5c:	08008be7 	.word	0x08008be7
 8008b60:	08008c3b 	.word	0x08008c3b
 8008b64:	08008c3b 	.word	0x08008c3b
 8008b68:	08008c3b 	.word	0x08008c3b
 8008b6c:	08008bf7 	.word	0x08008bf7
 8008b70:	08008c3b 	.word	0x08008c3b
 8008b74:	08008c3b 	.word	0x08008c3b
 8008b78:	08008c3b 	.word	0x08008c3b
 8008b7c:	08008c3b 	.word	0x08008c3b
 8008b80:	08008c3b 	.word	0x08008c3b
 8008b84:	08008c3b 	.word	0x08008c3b
 8008b88:	08008c3b 	.word	0x08008c3b
 8008b8c:	08008c07 	.word	0x08008c07
 8008b90:	08008c3b 	.word	0x08008c3b
 8008b94:	08008c3b 	.word	0x08008c3b
 8008b98:	08008c3b 	.word	0x08008c3b
 8008b9c:	08008c3b 	.word	0x08008c3b
 8008ba0:	08008c3b 	.word	0x08008c3b
 8008ba4:	08008c3b 	.word	0x08008c3b
 8008ba8:	08008c3b 	.word	0x08008c3b
 8008bac:	08008c3b 	.word	0x08008c3b
 8008bb0:	08008c3b 	.word	0x08008c3b
 8008bb4:	08008c3b 	.word	0x08008c3b
 8008bb8:	08008c3b 	.word	0x08008c3b
 8008bbc:	08008c3b 	.word	0x08008c3b
 8008bc0:	08008c3b 	.word	0x08008c3b
 8008bc4:	08008c3b 	.word	0x08008c3b
 8008bc8:	08008c3b 	.word	0x08008c3b
 8008bcc:	08008c2d 	.word	0x08008c2d
 8008bd0:	2b40      	cmp	r3, #64	; 0x40
 8008bd2:	d02e      	beq.n	8008c32 <UART_SetConfig+0xab2>
 8008bd4:	e031      	b.n	8008c3a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bd6:	f7fc f899 	bl	8004d0c <HAL_RCC_GetPCLK1Freq>
 8008bda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008bdc:	e033      	b.n	8008c46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bde:	f7fc f8ab 	bl	8004d38 <HAL_RCC_GetPCLK2Freq>
 8008be2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008be4:	e02f      	b.n	8008c46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fd ffa8 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bf4:	e027      	b.n	8008c46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bf6:	f107 0318 	add.w	r3, r7, #24
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fe f8f4 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c04:	e01f      	b.n	8008c46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c06:	4b69      	ldr	r3, [pc, #420]	; (8008dac <UART_SetConfig+0xc2c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0320 	and.w	r3, r3, #32
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d009      	beq.n	8008c26 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c12:	4b66      	ldr	r3, [pc, #408]	; (8008dac <UART_SetConfig+0xc2c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	08db      	lsrs	r3, r3, #3
 8008c18:	f003 0303 	and.w	r3, r3, #3
 8008c1c:	4a64      	ldr	r2, [pc, #400]	; (8008db0 <UART_SetConfig+0xc30>)
 8008c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c24:	e00f      	b.n	8008c46 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008c26:	4b62      	ldr	r3, [pc, #392]	; (8008db0 <UART_SetConfig+0xc30>)
 8008c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c2a:	e00c      	b.n	8008c46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c2c:	4b61      	ldr	r3, [pc, #388]	; (8008db4 <UART_SetConfig+0xc34>)
 8008c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c30:	e009      	b.n	8008c46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c38:	e005      	b.n	8008c46 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008c44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 80ea 	beq.w	8008e22 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c52:	4a55      	ldr	r2, [pc, #340]	; (8008da8 <UART_SetConfig+0xc28>)
 8008c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c60:	005a      	lsls	r2, r3, #1
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	085b      	lsrs	r3, r3, #1
 8008c68:	441a      	add	r2, r3
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c76:	2b0f      	cmp	r3, #15
 8008c78:	d916      	bls.n	8008ca8 <UART_SetConfig+0xb28>
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c80:	d212      	bcs.n	8008ca8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	f023 030f 	bic.w	r3, r3, #15
 8008c8a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8e:	085b      	lsrs	r3, r3, #1
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	f003 0307 	and.w	r3, r3, #7
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008ca4:	60da      	str	r2, [r3, #12]
 8008ca6:	e0bc      	b.n	8008e22 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008cae:	e0b8      	b.n	8008e22 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cb0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008cb4:	2b20      	cmp	r3, #32
 8008cb6:	dc4b      	bgt.n	8008d50 <UART_SetConfig+0xbd0>
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f2c0 8087 	blt.w	8008dcc <UART_SetConfig+0xc4c>
 8008cbe:	2b20      	cmp	r3, #32
 8008cc0:	f200 8084 	bhi.w	8008dcc <UART_SetConfig+0xc4c>
 8008cc4:	a201      	add	r2, pc, #4	; (adr r2, 8008ccc <UART_SetConfig+0xb4c>)
 8008cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cca:	bf00      	nop
 8008ccc:	08008d57 	.word	0x08008d57
 8008cd0:	08008d5f 	.word	0x08008d5f
 8008cd4:	08008dcd 	.word	0x08008dcd
 8008cd8:	08008dcd 	.word	0x08008dcd
 8008cdc:	08008d67 	.word	0x08008d67
 8008ce0:	08008dcd 	.word	0x08008dcd
 8008ce4:	08008dcd 	.word	0x08008dcd
 8008ce8:	08008dcd 	.word	0x08008dcd
 8008cec:	08008d77 	.word	0x08008d77
 8008cf0:	08008dcd 	.word	0x08008dcd
 8008cf4:	08008dcd 	.word	0x08008dcd
 8008cf8:	08008dcd 	.word	0x08008dcd
 8008cfc:	08008dcd 	.word	0x08008dcd
 8008d00:	08008dcd 	.word	0x08008dcd
 8008d04:	08008dcd 	.word	0x08008dcd
 8008d08:	08008dcd 	.word	0x08008dcd
 8008d0c:	08008d87 	.word	0x08008d87
 8008d10:	08008dcd 	.word	0x08008dcd
 8008d14:	08008dcd 	.word	0x08008dcd
 8008d18:	08008dcd 	.word	0x08008dcd
 8008d1c:	08008dcd 	.word	0x08008dcd
 8008d20:	08008dcd 	.word	0x08008dcd
 8008d24:	08008dcd 	.word	0x08008dcd
 8008d28:	08008dcd 	.word	0x08008dcd
 8008d2c:	08008dcd 	.word	0x08008dcd
 8008d30:	08008dcd 	.word	0x08008dcd
 8008d34:	08008dcd 	.word	0x08008dcd
 8008d38:	08008dcd 	.word	0x08008dcd
 8008d3c:	08008dcd 	.word	0x08008dcd
 8008d40:	08008dcd 	.word	0x08008dcd
 8008d44:	08008dcd 	.word	0x08008dcd
 8008d48:	08008dcd 	.word	0x08008dcd
 8008d4c:	08008dbf 	.word	0x08008dbf
 8008d50:	2b40      	cmp	r3, #64	; 0x40
 8008d52:	d037      	beq.n	8008dc4 <UART_SetConfig+0xc44>
 8008d54:	e03a      	b.n	8008dcc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d56:	f7fb ffd9 	bl	8004d0c <HAL_RCC_GetPCLK1Freq>
 8008d5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008d5c:	e03c      	b.n	8008dd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d5e:	f7fb ffeb 	bl	8004d38 <HAL_RCC_GetPCLK2Freq>
 8008d62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008d64:	e038      	b.n	8008dd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fd fee8 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d74:	e030      	b.n	8008dd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d76:	f107 0318 	add.w	r3, r7, #24
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe f834 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d84:	e028      	b.n	8008dd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d86:	4b09      	ldr	r3, [pc, #36]	; (8008dac <UART_SetConfig+0xc2c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 0320 	and.w	r3, r3, #32
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d012      	beq.n	8008db8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d92:	4b06      	ldr	r3, [pc, #24]	; (8008dac <UART_SetConfig+0xc2c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	08db      	lsrs	r3, r3, #3
 8008d98:	f003 0303 	and.w	r3, r3, #3
 8008d9c:	4a04      	ldr	r2, [pc, #16]	; (8008db0 <UART_SetConfig+0xc30>)
 8008d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008da4:	e018      	b.n	8008dd8 <UART_SetConfig+0xc58>
 8008da6:	bf00      	nop
 8008da8:	0800c230 	.word	0x0800c230
 8008dac:	58024400 	.word	0x58024400
 8008db0:	03d09000 	.word	0x03d09000
 8008db4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008db8:	4b24      	ldr	r3, [pc, #144]	; (8008e4c <UART_SetConfig+0xccc>)
 8008dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dbc:	e00c      	b.n	8008dd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008dbe:	4b24      	ldr	r3, [pc, #144]	; (8008e50 <UART_SetConfig+0xcd0>)
 8008dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dc2:	e009      	b.n	8008dd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dca:	e005      	b.n	8008dd8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008dd6:	bf00      	nop
    }

    if (pclk != 0U)
 8008dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d021      	beq.n	8008e22 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de2:	4a1c      	ldr	r2, [pc, #112]	; (8008e54 <UART_SetConfig+0xcd4>)
 8008de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008de8:	461a      	mov	r2, r3
 8008dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dec:	fbb3 f2f2 	udiv	r2, r3, r2
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	085b      	lsrs	r3, r3, #1
 8008df6:	441a      	add	r2, r3
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e00:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e04:	2b0f      	cmp	r3, #15
 8008e06:	d909      	bls.n	8008e1c <UART_SetConfig+0xc9c>
 8008e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e0e:	d205      	bcs.n	8008e1c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	60da      	str	r2, [r3, #12]
 8008e1a:	e002      	b.n	8008e22 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	2200      	movs	r2, #0
 8008e36:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008e3e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3748      	adds	r7, #72	; 0x48
 8008e46:	46bd      	mov	sp, r7
 8008e48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e4c:	03d09000 	.word	0x03d09000
 8008e50:	003d0900 	.word	0x003d0900
 8008e54:	0800c230 	.word	0x0800c230

08008e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00a      	beq.n	8008e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00a      	beq.n	8008ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	430a      	orrs	r2, r1
 8008ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00a      	beq.n	8008ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eca:	f003 0308 	and.w	r3, r3, #8
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00a      	beq.n	8008ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	430a      	orrs	r2, r1
 8008ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eec:	f003 0310 	and.w	r3, r3, #16
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00a      	beq.n	8008f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	430a      	orrs	r2, r1
 8008f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0e:	f003 0320 	and.w	r3, r3, #32
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00a      	beq.n	8008f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d01a      	beq.n	8008f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f56:	d10a      	bne.n	8008f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	605a      	str	r2, [r3, #4]
  }
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b098      	sub	sp, #96	; 0x60
 8008fa0:	af02      	add	r7, sp, #8
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fac:	f7f8 feb2 	bl	8001d14 <HAL_GetTick>
 8008fb0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0308 	and.w	r3, r3, #8
 8008fbc:	2b08      	cmp	r3, #8
 8008fbe:	d12f      	bne.n	8009020 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f88e 	bl	80090f0 <UART_WaitOnFlagUntilTimeout>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d022      	beq.n	8009020 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe2:	e853 3f00 	ldrex	r3, [r3]
 8008fe6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fee:	653b      	str	r3, [r7, #80]	; 0x50
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8008ffa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009000:	e841 2300 	strex	r3, r2, [r1]
 8009004:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e6      	bne.n	8008fda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2220      	movs	r2, #32
 8009010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e063      	b.n	80090e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0304 	and.w	r3, r3, #4
 800902a:	2b04      	cmp	r3, #4
 800902c:	d149      	bne.n	80090c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800902e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009036:	2200      	movs	r2, #0
 8009038:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f857 	bl	80090f0 <UART_WaitOnFlagUntilTimeout>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d03c      	beq.n	80090c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009050:	e853 3f00 	ldrex	r3, [r3]
 8009054:	623b      	str	r3, [r7, #32]
   return(result);
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800905c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	461a      	mov	r2, r3
 8009064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009066:	633b      	str	r3, [r7, #48]	; 0x30
 8009068:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800906c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800906e:	e841 2300 	strex	r3, r2, [r1]
 8009072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1e6      	bne.n	8009048 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3308      	adds	r3, #8
 8009080:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	e853 3f00 	ldrex	r3, [r3]
 8009088:	60fb      	str	r3, [r7, #12]
   return(result);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f023 0301 	bic.w	r3, r3, #1
 8009090:	64bb      	str	r3, [r7, #72]	; 0x48
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3308      	adds	r3, #8
 8009098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800909a:	61fa      	str	r2, [r7, #28]
 800909c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909e:	69b9      	ldr	r1, [r7, #24]
 80090a0:	69fa      	ldr	r2, [r7, #28]
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	617b      	str	r3, [r7, #20]
   return(result);
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e5      	bne.n	800907a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2220      	movs	r2, #32
 80090b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090be:	2303      	movs	r3, #3
 80090c0:	e012      	b.n	80090e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2220      	movs	r2, #32
 80090c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2220      	movs	r2, #32
 80090ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3758      	adds	r7, #88	; 0x58
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	603b      	str	r3, [r7, #0]
 80090fc:	4613      	mov	r3, r2
 80090fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009100:	e049      	b.n	8009196 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009108:	d045      	beq.n	8009196 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800910a:	f7f8 fe03 	bl	8001d14 <HAL_GetTick>
 800910e:	4602      	mov	r2, r0
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	69ba      	ldr	r2, [r7, #24]
 8009116:	429a      	cmp	r2, r3
 8009118:	d302      	bcc.n	8009120 <UART_WaitOnFlagUntilTimeout+0x30>
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d101      	bne.n	8009124 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009120:	2303      	movs	r3, #3
 8009122:	e048      	b.n	80091b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0304 	and.w	r3, r3, #4
 800912e:	2b00      	cmp	r3, #0
 8009130:	d031      	beq.n	8009196 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	f003 0308 	and.w	r3, r3, #8
 800913c:	2b08      	cmp	r3, #8
 800913e:	d110      	bne.n	8009162 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2208      	movs	r2, #8
 8009146:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f000 f839 	bl	80091c0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2208      	movs	r2, #8
 8009152:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	e029      	b.n	80091b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	69db      	ldr	r3, [r3, #28]
 8009168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800916c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009170:	d111      	bne.n	8009196 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800917a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f000 f81f 	bl	80091c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2220      	movs	r2, #32
 8009186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e00f      	b.n	80091b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	69da      	ldr	r2, [r3, #28]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	4013      	ands	r3, r2
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	bf0c      	ite	eq
 80091a6:	2301      	moveq	r3, #1
 80091a8:	2300      	movne	r3, #0
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	461a      	mov	r2, r3
 80091ae:	79fb      	ldrb	r3, [r7, #7]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d0a6      	beq.n	8009102 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b095      	sub	sp, #84	; 0x54
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d0:	e853 3f00 	ldrex	r3, [r3]
 80091d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091e6:	643b      	str	r3, [r7, #64]	; 0x40
 80091e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091ee:	e841 2300 	strex	r3, r2, [r1]
 80091f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e6      	bne.n	80091c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	3308      	adds	r3, #8
 8009200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	e853 3f00 	ldrex	r3, [r3]
 8009208:	61fb      	str	r3, [r7, #28]
   return(result);
 800920a:	69fa      	ldr	r2, [r7, #28]
 800920c:	4b1e      	ldr	r3, [pc, #120]	; (8009288 <UART_EndRxTransfer+0xc8>)
 800920e:	4013      	ands	r3, r2
 8009210:	64bb      	str	r3, [r7, #72]	; 0x48
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3308      	adds	r3, #8
 8009218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800921a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800921c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009222:	e841 2300 	strex	r3, r2, [r1]
 8009226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1e5      	bne.n	80091fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009232:	2b01      	cmp	r3, #1
 8009234:	d118      	bne.n	8009268 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	e853 3f00 	ldrex	r3, [r3]
 8009242:	60bb      	str	r3, [r7, #8]
   return(result);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f023 0310 	bic.w	r3, r3, #16
 800924a:	647b      	str	r3, [r7, #68]	; 0x44
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	461a      	mov	r2, r3
 8009252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009254:	61bb      	str	r3, [r7, #24]
 8009256:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009258:	6979      	ldr	r1, [r7, #20]
 800925a:	69ba      	ldr	r2, [r7, #24]
 800925c:	e841 2300 	strex	r3, r2, [r1]
 8009260:	613b      	str	r3, [r7, #16]
   return(result);
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1e6      	bne.n	8009236 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2220      	movs	r2, #32
 800926c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800927c:	bf00      	nop
 800927e:	3754      	adds	r7, #84	; 0x54
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	effffffe 	.word	0xeffffffe

0800928c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800929a:	2b01      	cmp	r3, #1
 800929c:	d101      	bne.n	80092a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800929e:	2302      	movs	r3, #2
 80092a0:	e027      	b.n	80092f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2224      	movs	r2, #36	; 0x24
 80092ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f022 0201 	bic.w	r2, r2, #1
 80092c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80092d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2220      	movs	r2, #32
 80092e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800930e:	2b01      	cmp	r3, #1
 8009310:	d101      	bne.n	8009316 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009312:	2302      	movs	r3, #2
 8009314:	e02d      	b.n	8009372 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2224      	movs	r2, #36	; 0x24
 8009322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f022 0201 	bic.w	r2, r2, #1
 800933c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	430a      	orrs	r2, r1
 8009350:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f850 	bl	80093f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2220      	movs	r2, #32
 8009364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b084      	sub	sp, #16
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800938a:	2b01      	cmp	r3, #1
 800938c:	d101      	bne.n	8009392 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800938e:	2302      	movs	r3, #2
 8009390:	e02d      	b.n	80093ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2224      	movs	r2, #36	; 0x24
 800939e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f022 0201 	bic.w	r2, r2, #1
 80093b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	430a      	orrs	r2, r1
 80093cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f812 	bl	80093f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2220      	movs	r2, #32
 80093e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
	...

080093f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009404:	2b00      	cmp	r3, #0
 8009406:	d108      	bne.n	800941a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009418:	e031      	b.n	800947e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800941a:	2310      	movs	r3, #16
 800941c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800941e:	2310      	movs	r3, #16
 8009420:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	0e5b      	lsrs	r3, r3, #25
 800942a:	b2db      	uxtb	r3, r3
 800942c:	f003 0307 	and.w	r3, r3, #7
 8009430:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	0f5b      	lsrs	r3, r3, #29
 800943a:	b2db      	uxtb	r3, r3
 800943c:	f003 0307 	and.w	r3, r3, #7
 8009440:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009442:	7bbb      	ldrb	r3, [r7, #14]
 8009444:	7b3a      	ldrb	r2, [r7, #12]
 8009446:	4911      	ldr	r1, [pc, #68]	; (800948c <UARTEx_SetNbDataToProcess+0x94>)
 8009448:	5c8a      	ldrb	r2, [r1, r2]
 800944a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800944e:	7b3a      	ldrb	r2, [r7, #12]
 8009450:	490f      	ldr	r1, [pc, #60]	; (8009490 <UARTEx_SetNbDataToProcess+0x98>)
 8009452:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009454:	fb93 f3f2 	sdiv	r3, r3, r2
 8009458:	b29a      	uxth	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	7b7a      	ldrb	r2, [r7, #13]
 8009464:	4909      	ldr	r1, [pc, #36]	; (800948c <UARTEx_SetNbDataToProcess+0x94>)
 8009466:	5c8a      	ldrb	r2, [r1, r2]
 8009468:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800946c:	7b7a      	ldrb	r2, [r7, #13]
 800946e:	4908      	ldr	r1, [pc, #32]	; (8009490 <UARTEx_SetNbDataToProcess+0x98>)
 8009470:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009472:	fb93 f3f2 	sdiv	r3, r3, r2
 8009476:	b29a      	uxth	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800947e:	bf00      	nop
 8009480:	3714      	adds	r7, #20
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	0800c248 	.word	0x0800c248
 8009490:	0800c250 	.word	0x0800c250

08009494 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d121      	bne.n	80094ea <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	4b27      	ldr	r3, [pc, #156]	; (8009548 <FMC_SDRAM_Init+0xb4>)
 80094ac:	4013      	ands	r3, r2
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	6851      	ldr	r1, [r2, #4]
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	6892      	ldr	r2, [r2, #8]
 80094b6:	4311      	orrs	r1, r2
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	68d2      	ldr	r2, [r2, #12]
 80094bc:	4311      	orrs	r1, r2
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	6912      	ldr	r2, [r2, #16]
 80094c2:	4311      	orrs	r1, r2
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	6952      	ldr	r2, [r2, #20]
 80094c8:	4311      	orrs	r1, r2
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	6992      	ldr	r2, [r2, #24]
 80094ce:	4311      	orrs	r1, r2
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	69d2      	ldr	r2, [r2, #28]
 80094d4:	4311      	orrs	r1, r2
 80094d6:	683a      	ldr	r2, [r7, #0]
 80094d8:	6a12      	ldr	r2, [r2, #32]
 80094da:	4311      	orrs	r1, r2
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80094e0:	430a      	orrs	r2, r1
 80094e2:	431a      	orrs	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	601a      	str	r2, [r3, #0]
 80094e8:	e026      	b.n	8009538 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	69d9      	ldr	r1, [r3, #28]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	4319      	orrs	r1, r3
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	430b      	orrs	r3, r1
 8009502:	431a      	orrs	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	4b0e      	ldr	r3, [pc, #56]	; (8009548 <FMC_SDRAM_Init+0xb4>)
 800950e:	4013      	ands	r3, r2
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	6851      	ldr	r1, [r2, #4]
 8009514:	683a      	ldr	r2, [r7, #0]
 8009516:	6892      	ldr	r2, [r2, #8]
 8009518:	4311      	orrs	r1, r2
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	68d2      	ldr	r2, [r2, #12]
 800951e:	4311      	orrs	r1, r2
 8009520:	683a      	ldr	r2, [r7, #0]
 8009522:	6912      	ldr	r2, [r2, #16]
 8009524:	4311      	orrs	r1, r2
 8009526:	683a      	ldr	r2, [r7, #0]
 8009528:	6952      	ldr	r2, [r2, #20]
 800952a:	4311      	orrs	r1, r2
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	6992      	ldr	r2, [r2, #24]
 8009530:	430a      	orrs	r2, r1
 8009532:	431a      	orrs	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	ffff8000 	.word	0xffff8000

0800954c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d128      	bne.n	80095b0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	1e59      	subs	r1, r3, #1
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	3b01      	subs	r3, #1
 8009572:	011b      	lsls	r3, r3, #4
 8009574:	4319      	orrs	r1, r3
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	3b01      	subs	r3, #1
 800957c:	021b      	lsls	r3, r3, #8
 800957e:	4319      	orrs	r1, r3
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	3b01      	subs	r3, #1
 8009586:	031b      	lsls	r3, r3, #12
 8009588:	4319      	orrs	r1, r3
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	3b01      	subs	r3, #1
 8009590:	041b      	lsls	r3, r3, #16
 8009592:	4319      	orrs	r1, r3
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	695b      	ldr	r3, [r3, #20]
 8009598:	3b01      	subs	r3, #1
 800959a:	051b      	lsls	r3, r3, #20
 800959c:	4319      	orrs	r1, r3
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	3b01      	subs	r3, #1
 80095a4:	061b      	lsls	r3, r3, #24
 80095a6:	430b      	orrs	r3, r1
 80095a8:	431a      	orrs	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	609a      	str	r2, [r3, #8]
 80095ae:	e02d      	b.n	800960c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	689a      	ldr	r2, [r3, #8]
 80095b4:	4b19      	ldr	r3, [pc, #100]	; (800961c <FMC_SDRAM_Timing_Init+0xd0>)
 80095b6:	4013      	ands	r3, r2
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	68d2      	ldr	r2, [r2, #12]
 80095bc:	3a01      	subs	r2, #1
 80095be:	0311      	lsls	r1, r2, #12
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	6952      	ldr	r2, [r2, #20]
 80095c4:	3a01      	subs	r2, #1
 80095c6:	0512      	lsls	r2, r2, #20
 80095c8:	430a      	orrs	r2, r1
 80095ca:	431a      	orrs	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	1e59      	subs	r1, r3, #1
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	3b01      	subs	r3, #1
 80095e4:	011b      	lsls	r3, r3, #4
 80095e6:	4319      	orrs	r1, r3
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	3b01      	subs	r3, #1
 80095ee:	021b      	lsls	r3, r3, #8
 80095f0:	4319      	orrs	r1, r3
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	041b      	lsls	r3, r3, #16
 80095fa:	4319      	orrs	r1, r3
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	3b01      	subs	r3, #1
 8009602:	061b      	lsls	r3, r3, #24
 8009604:	430b      	orrs	r3, r1
 8009606:	431a      	orrs	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	ff0f0fff 	.word	0xff0f0fff

08009620 <__NVIC_SetPriority>:
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	4603      	mov	r3, r0
 8009628:	6039      	str	r1, [r7, #0]
 800962a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800962c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009630:	2b00      	cmp	r3, #0
 8009632:	db0a      	blt.n	800964a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	b2da      	uxtb	r2, r3
 8009638:	490c      	ldr	r1, [pc, #48]	; (800966c <__NVIC_SetPriority+0x4c>)
 800963a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800963e:	0112      	lsls	r2, r2, #4
 8009640:	b2d2      	uxtb	r2, r2
 8009642:	440b      	add	r3, r1
 8009644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009648:	e00a      	b.n	8009660 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	b2da      	uxtb	r2, r3
 800964e:	4908      	ldr	r1, [pc, #32]	; (8009670 <__NVIC_SetPriority+0x50>)
 8009650:	88fb      	ldrh	r3, [r7, #6]
 8009652:	f003 030f 	and.w	r3, r3, #15
 8009656:	3b04      	subs	r3, #4
 8009658:	0112      	lsls	r2, r2, #4
 800965a:	b2d2      	uxtb	r2, r2
 800965c:	440b      	add	r3, r1
 800965e:	761a      	strb	r2, [r3, #24]
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	e000e100 	.word	0xe000e100
 8009670:	e000ed00 	.word	0xe000ed00

08009674 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009674:	b580      	push	{r7, lr}
 8009676:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009678:	4b05      	ldr	r3, [pc, #20]	; (8009690 <SysTick_Handler+0x1c>)
 800967a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800967c:	f001 fcfe 	bl	800b07c <xTaskGetSchedulerState>
 8009680:	4603      	mov	r3, r0
 8009682:	2b01      	cmp	r3, #1
 8009684:	d001      	beq.n	800968a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009686:	f002 fae7 	bl	800bc58 <xPortSysTickHandler>
  }
}
 800968a:	bf00      	nop
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	e000e010 	.word	0xe000e010

08009694 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009694:	b580      	push	{r7, lr}
 8009696:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009698:	2100      	movs	r1, #0
 800969a:	f06f 0004 	mvn.w	r0, #4
 800969e:	f7ff ffbf 	bl	8009620 <__NVIC_SetPriority>
#endif
}
 80096a2:	bf00      	nop
 80096a4:	bd80      	pop	{r7, pc}
	...

080096a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096ae:	f3ef 8305 	mrs	r3, IPSR
 80096b2:	603b      	str	r3, [r7, #0]
  return(result);
 80096b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d003      	beq.n	80096c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80096ba:	f06f 0305 	mvn.w	r3, #5
 80096be:	607b      	str	r3, [r7, #4]
 80096c0:	e00c      	b.n	80096dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80096c2:	4b0a      	ldr	r3, [pc, #40]	; (80096ec <osKernelInitialize+0x44>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d105      	bne.n	80096d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80096ca:	4b08      	ldr	r3, [pc, #32]	; (80096ec <osKernelInitialize+0x44>)
 80096cc:	2201      	movs	r2, #1
 80096ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	607b      	str	r3, [r7, #4]
 80096d4:	e002      	b.n	80096dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80096d6:	f04f 33ff 	mov.w	r3, #4294967295
 80096da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80096dc:	687b      	ldr	r3, [r7, #4]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	370c      	adds	r7, #12
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	2403ffb4 	.word	0x2403ffb4

080096f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096f6:	f3ef 8305 	mrs	r3, IPSR
 80096fa:	603b      	str	r3, [r7, #0]
  return(result);
 80096fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009702:	f06f 0305 	mvn.w	r3, #5
 8009706:	607b      	str	r3, [r7, #4]
 8009708:	e010      	b.n	800972c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800970a:	4b0b      	ldr	r3, [pc, #44]	; (8009738 <osKernelStart+0x48>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d109      	bne.n	8009726 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009712:	f7ff ffbf 	bl	8009694 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009716:	4b08      	ldr	r3, [pc, #32]	; (8009738 <osKernelStart+0x48>)
 8009718:	2202      	movs	r2, #2
 800971a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800971c:	f001 f866 	bl	800a7ec <vTaskStartScheduler>
      stat = osOK;
 8009720:	2300      	movs	r3, #0
 8009722:	607b      	str	r3, [r7, #4]
 8009724:	e002      	b.n	800972c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009726:	f04f 33ff 	mov.w	r3, #4294967295
 800972a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800972c:	687b      	ldr	r3, [r7, #4]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	2403ffb4 	.word	0x2403ffb4

0800973c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800973c:	b580      	push	{r7, lr}
 800973e:	b08e      	sub	sp, #56	; 0x38
 8009740:	af04      	add	r7, sp, #16
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009748:	2300      	movs	r3, #0
 800974a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800974c:	f3ef 8305 	mrs	r3, IPSR
 8009750:	617b      	str	r3, [r7, #20]
  return(result);
 8009752:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009754:	2b00      	cmp	r3, #0
 8009756:	d17e      	bne.n	8009856 <osThreadNew+0x11a>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d07b      	beq.n	8009856 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800975e:	2380      	movs	r3, #128	; 0x80
 8009760:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009762:	2318      	movs	r3, #24
 8009764:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009766:	2300      	movs	r3, #0
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800976a:	f04f 33ff 	mov.w	r3, #4294967295
 800976e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d045      	beq.n	8009802 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d002      	beq.n	8009784 <osThreadNew+0x48>
        name = attr->name;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d002      	beq.n	8009792 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d008      	beq.n	80097aa <osThreadNew+0x6e>
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	2b38      	cmp	r3, #56	; 0x38
 800979c:	d805      	bhi.n	80097aa <osThreadNew+0x6e>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f003 0301 	and.w	r3, r3, #1
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <osThreadNew+0x72>
        return (NULL);
 80097aa:	2300      	movs	r3, #0
 80097ac:	e054      	b.n	8009858 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d003      	beq.n	80097be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	089b      	lsrs	r3, r3, #2
 80097bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00e      	beq.n	80097e4 <osThreadNew+0xa8>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	2b5b      	cmp	r3, #91	; 0x5b
 80097cc:	d90a      	bls.n	80097e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d006      	beq.n	80097e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d002      	beq.n	80097e4 <osThreadNew+0xa8>
        mem = 1;
 80097de:	2301      	movs	r3, #1
 80097e0:	61bb      	str	r3, [r7, #24]
 80097e2:	e010      	b.n	8009806 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10c      	bne.n	8009806 <osThreadNew+0xca>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d108      	bne.n	8009806 <osThreadNew+0xca>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d104      	bne.n	8009806 <osThreadNew+0xca>
          mem = 0;
 80097fc:	2300      	movs	r3, #0
 80097fe:	61bb      	str	r3, [r7, #24]
 8009800:	e001      	b.n	8009806 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009802:	2300      	movs	r3, #0
 8009804:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d110      	bne.n	800982e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009814:	9202      	str	r2, [sp, #8]
 8009816:	9301      	str	r3, [sp, #4]
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	6a3a      	ldr	r2, [r7, #32]
 8009820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f000 fe0c 	bl	800a440 <xTaskCreateStatic>
 8009828:	4603      	mov	r3, r0
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	e013      	b.n	8009856 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d110      	bne.n	8009856 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009834:	6a3b      	ldr	r3, [r7, #32]
 8009836:	b29a      	uxth	r2, r3
 8009838:	f107 0310 	add.w	r3, r7, #16
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f000 fe57 	bl	800a4fa <xTaskCreate>
 800984c:	4603      	mov	r3, r0
 800984e:	2b01      	cmp	r3, #1
 8009850:	d001      	beq.n	8009856 <osThreadNew+0x11a>
            hTask = NULL;
 8009852:	2300      	movs	r3, #0
 8009854:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009856:	693b      	ldr	r3, [r7, #16]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3728      	adds	r7, #40	; 0x28
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009868:	f3ef 8305 	mrs	r3, IPSR
 800986c:	60bb      	str	r3, [r7, #8]
  return(result);
 800986e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009870:	2b00      	cmp	r3, #0
 8009872:	d003      	beq.n	800987c <osDelay+0x1c>
    stat = osErrorISR;
 8009874:	f06f 0305 	mvn.w	r3, #5
 8009878:	60fb      	str	r3, [r7, #12]
 800987a:	e007      	b.n	800988c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800987c:	2300      	movs	r3, #0
 800987e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d002      	beq.n	800988c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 ff7c 	bl	800a784 <vTaskDelay>
    }
  }

  return (stat);
 800988c:	68fb      	ldr	r3, [r7, #12]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
	...

08009898 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4a07      	ldr	r2, [pc, #28]	; (80098c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80098a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	4a06      	ldr	r2, [pc, #24]	; (80098c8 <vApplicationGetIdleTaskMemory+0x30>)
 80098ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2280      	movs	r2, #128	; 0x80
 80098b4:	601a      	str	r2, [r3, #0]
}
 80098b6:	bf00      	nop
 80098b8:	3714      	adds	r7, #20
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	2403ffb8 	.word	0x2403ffb8
 80098c8:	24040014 	.word	0x24040014

080098cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4a07      	ldr	r2, [pc, #28]	; (80098f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80098dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	4a06      	ldr	r2, [pc, #24]	; (80098fc <vApplicationGetTimerTaskMemory+0x30>)
 80098e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098ea:	601a      	str	r2, [r3, #0]
}
 80098ec:	bf00      	nop
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	24040214 	.word	0x24040214
 80098fc:	24040270 	.word	0x24040270

08009900 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f103 0208 	add.w	r2, r3, #8
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f04f 32ff 	mov.w	r2, #4294967295
 8009918:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f103 0208 	add.w	r2, r3, #8
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f103 0208 	add.w	r2, r3, #8
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800994e:	bf00      	nop
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800995a:	b480      	push	{r7}
 800995c:	b085      	sub	sp, #20
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	689a      	ldr	r2, [r3, #8]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	683a      	ldr	r2, [r7, #0]
 800997e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	601a      	str	r2, [r3, #0]
}
 8009996:	bf00      	nop
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099a2:	b480      	push	{r7}
 80099a4:	b085      	sub	sp, #20
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b8:	d103      	bne.n	80099c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	60fb      	str	r3, [r7, #12]
 80099c0:	e00c      	b.n	80099dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3308      	adds	r3, #8
 80099c6:	60fb      	str	r3, [r7, #12]
 80099c8:	e002      	b.n	80099d0 <vListInsert+0x2e>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	60fb      	str	r3, [r7, #12]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d2f6      	bcs.n	80099ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	683a      	ldr	r2, [r7, #0]
 80099f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	1c5a      	adds	r2, r3, #1
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	601a      	str	r2, [r3, #0]
}
 8009a08:	bf00      	nop
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	6892      	ldr	r2, [r2, #8]
 8009a2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	6852      	ldr	r2, [r2, #4]
 8009a34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d103      	bne.n	8009a48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	1e5a      	subs	r2, r3, #1
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3714      	adds	r7, #20
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10a      	bne.n	8009a92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a80:	f383 8811 	msr	BASEPRI, r3
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a8e:	bf00      	nop
 8009a90:	e7fe      	b.n	8009a90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009a92:	f002 f84f 	bl	800bb34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a9e:	68f9      	ldr	r1, [r7, #12]
 8009aa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009aa2:	fb01 f303 	mul.w	r3, r1, r3
 8009aa6:	441a      	add	r2, r3
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	68f9      	ldr	r1, [r7, #12]
 8009ac6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ac8:	fb01 f303 	mul.w	r3, r1, r3
 8009acc:	441a      	add	r2, r3
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	22ff      	movs	r2, #255	; 0xff
 8009ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	22ff      	movs	r2, #255	; 0xff
 8009ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d114      	bne.n	8009b12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d01a      	beq.n	8009b26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	3310      	adds	r3, #16
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 f903 	bl	800ad00 <xTaskRemoveFromEventList>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d012      	beq.n	8009b26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b00:	4b0c      	ldr	r3, [pc, #48]	; (8009b34 <xQueueGenericReset+0xcc>)
 8009b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	e009      	b.n	8009b26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3310      	adds	r3, #16
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff fef2 	bl	8009900 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	3324      	adds	r3, #36	; 0x24
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7ff feed 	bl	8009900 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b26:	f002 f835 	bl	800bb94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b2a:	2301      	movs	r3, #1
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	e000ed04 	.word	0xe000ed04

08009b38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08e      	sub	sp, #56	; 0x38
 8009b3c:	af02      	add	r7, sp, #8
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
 8009b44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10a      	bne.n	8009b62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b50:	f383 8811 	msr	BASEPRI, r3
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b5e:	bf00      	nop
 8009b60:	e7fe      	b.n	8009b60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10a      	bne.n	8009b7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b7a:	bf00      	nop
 8009b7c:	e7fe      	b.n	8009b7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <xQueueGenericCreateStatic+0x52>
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <xQueueGenericCreateStatic+0x56>
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e000      	b.n	8009b90 <xQueueGenericCreateStatic+0x58>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10a      	bne.n	8009baa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	623b      	str	r3, [r7, #32]
}
 8009ba6:	bf00      	nop
 8009ba8:	e7fe      	b.n	8009ba8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d102      	bne.n	8009bb6 <xQueueGenericCreateStatic+0x7e>
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <xQueueGenericCreateStatic+0x82>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e000      	b.n	8009bbc <xQueueGenericCreateStatic+0x84>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10a      	bne.n	8009bd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	61fb      	str	r3, [r7, #28]
}
 8009bd2:	bf00      	nop
 8009bd4:	e7fe      	b.n	8009bd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009bd6:	2350      	movs	r3, #80	; 0x50
 8009bd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	2b50      	cmp	r3, #80	; 0x50
 8009bde:	d00a      	beq.n	8009bf6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	61bb      	str	r3, [r7, #24]
}
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009bf6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00d      	beq.n	8009c1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	4613      	mov	r3, r2
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	68b9      	ldr	r1, [r7, #8]
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f000 f805 	bl	8009c28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3730      	adds	r7, #48	; 0x30
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d103      	bne.n	8009c44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	e002      	b.n	8009c4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c56:	2101      	movs	r1, #1
 8009c58:	69b8      	ldr	r0, [r7, #24]
 8009c5a:	f7ff ff05 	bl	8009a68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	78fa      	ldrb	r2, [r7, #3]
 8009c62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009c66:	bf00      	nop
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
	...

08009c70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08e      	sub	sp, #56	; 0x38
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
 8009c7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10a      	bne.n	8009ca2 <xQueueGenericSend+0x32>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c9e:	bf00      	nop
 8009ca0:	e7fe      	b.n	8009ca0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d103      	bne.n	8009cb0 <xQueueGenericSend+0x40>
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d101      	bne.n	8009cb4 <xQueueGenericSend+0x44>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e000      	b.n	8009cb6 <xQueueGenericSend+0x46>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10a      	bne.n	8009cd0 <xQueueGenericSend+0x60>
	__asm volatile
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ccc:	bf00      	nop
 8009cce:	e7fe      	b.n	8009cce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d103      	bne.n	8009cde <xQueueGenericSend+0x6e>
 8009cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d101      	bne.n	8009ce2 <xQueueGenericSend+0x72>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e000      	b.n	8009ce4 <xQueueGenericSend+0x74>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10a      	bne.n	8009cfe <xQueueGenericSend+0x8e>
	__asm volatile
 8009ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	623b      	str	r3, [r7, #32]
}
 8009cfa:	bf00      	nop
 8009cfc:	e7fe      	b.n	8009cfc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cfe:	f001 f9bd 	bl	800b07c <xTaskGetSchedulerState>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d102      	bne.n	8009d0e <xQueueGenericSend+0x9e>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <xQueueGenericSend+0xa2>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e000      	b.n	8009d14 <xQueueGenericSend+0xa4>
 8009d12:	2300      	movs	r3, #0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <xQueueGenericSend+0xbe>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	61fb      	str	r3, [r7, #28]
}
 8009d2a:	bf00      	nop
 8009d2c:	e7fe      	b.n	8009d2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d2e:	f001 ff01 	bl	800bb34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d302      	bcc.n	8009d44 <xQueueGenericSend+0xd4>
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d129      	bne.n	8009d98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	68b9      	ldr	r1, [r7, #8]
 8009d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d4a:	f000 fa0b 	bl	800a164 <prvCopyDataToQueue>
 8009d4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d010      	beq.n	8009d7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5a:	3324      	adds	r3, #36	; 0x24
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 ffcf 	bl	800ad00 <xTaskRemoveFromEventList>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d013      	beq.n	8009d90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d68:	4b3f      	ldr	r3, [pc, #252]	; (8009e68 <xQueueGenericSend+0x1f8>)
 8009d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	e00a      	b.n	8009d90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d007      	beq.n	8009d90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d80:	4b39      	ldr	r3, [pc, #228]	; (8009e68 <xQueueGenericSend+0x1f8>)
 8009d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d86:	601a      	str	r2, [r3, #0]
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d90:	f001 ff00 	bl	800bb94 <vPortExitCritical>
				return pdPASS;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e063      	b.n	8009e60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d103      	bne.n	8009da6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d9e:	f001 fef9 	bl	800bb94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009da2:	2300      	movs	r3, #0
 8009da4:	e05c      	b.n	8009e60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d106      	bne.n	8009dba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009dac:	f107 0314 	add.w	r3, r7, #20
 8009db0:	4618      	mov	r0, r3
 8009db2:	f001 f809 	bl	800adc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009db6:	2301      	movs	r3, #1
 8009db8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dba:	f001 feeb 	bl	800bb94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009dbe:	f000 fd7b 	bl	800a8b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009dc2:	f001 feb7 	bl	800bb34 <vPortEnterCritical>
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dcc:	b25b      	sxtb	r3, r3
 8009dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd2:	d103      	bne.n	8009ddc <xQueueGenericSend+0x16c>
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009de2:	b25b      	sxtb	r3, r3
 8009de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de8:	d103      	bne.n	8009df2 <xQueueGenericSend+0x182>
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009df2:	f001 fecf 	bl	800bb94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009df6:	1d3a      	adds	r2, r7, #4
 8009df8:	f107 0314 	add.w	r3, r7, #20
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 fff8 	bl	800adf4 <xTaskCheckForTimeOut>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d124      	bne.n	8009e54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e0c:	f000 faa2 	bl	800a354 <prvIsQueueFull>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d018      	beq.n	8009e48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	3310      	adds	r3, #16
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 ff1e 	bl	800ac60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e26:	f000 fa2d 	bl	800a284 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e2a:	f000 fd53 	bl	800a8d4 <xTaskResumeAll>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f47f af7c 	bne.w	8009d2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e36:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <xQueueGenericSend+0x1f8>)
 8009e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	e772      	b.n	8009d2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e4a:	f000 fa1b 	bl	800a284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e4e:	f000 fd41 	bl	800a8d4 <xTaskResumeAll>
 8009e52:	e76c      	b.n	8009d2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e56:	f000 fa15 	bl	800a284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e5a:	f000 fd3b 	bl	800a8d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3738      	adds	r7, #56	; 0x38
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	e000ed04 	.word	0xe000ed04

08009e6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b090      	sub	sp, #64	; 0x40
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
 8009e78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10a      	bne.n	8009e9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e96:	bf00      	nop
 8009e98:	e7fe      	b.n	8009e98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d103      	bne.n	8009ea8 <xQueueGenericSendFromISR+0x3c>
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <xQueueGenericSendFromISR+0x40>
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e000      	b.n	8009eae <xQueueGenericSendFromISR+0x42>
 8009eac:	2300      	movs	r3, #0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10a      	bne.n	8009ec8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ec4:	bf00      	nop
 8009ec6:	e7fe      	b.n	8009ec6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	d103      	bne.n	8009ed6 <xQueueGenericSendFromISR+0x6a>
 8009ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d101      	bne.n	8009eda <xQueueGenericSendFromISR+0x6e>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e000      	b.n	8009edc <xQueueGenericSendFromISR+0x70>
 8009eda:	2300      	movs	r3, #0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10a      	bne.n	8009ef6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	623b      	str	r3, [r7, #32]
}
 8009ef2:	bf00      	nop
 8009ef4:	e7fe      	b.n	8009ef4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ef6:	f001 feff 	bl	800bcf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009efa:	f3ef 8211 	mrs	r2, BASEPRI
 8009efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	61fa      	str	r2, [r7, #28]
 8009f10:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d302      	bcc.n	8009f28 <xQueueGenericSendFromISR+0xbc>
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d12f      	bne.n	8009f88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	68b9      	ldr	r1, [r7, #8]
 8009f3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f3e:	f000 f911 	bl	800a164 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4a:	d112      	bne.n	8009f72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d016      	beq.n	8009f82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	3324      	adds	r3, #36	; 0x24
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f000 fed1 	bl	800ad00 <xTaskRemoveFromEventList>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00e      	beq.n	8009f82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00b      	beq.n	8009f82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	e007      	b.n	8009f82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f76:	3301      	adds	r3, #1
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	b25a      	sxtb	r2, r3
 8009f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f82:	2301      	movs	r3, #1
 8009f84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009f86:	e001      	b.n	8009f8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f8e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3740      	adds	r7, #64	; 0x40
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
	...

08009fa4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08c      	sub	sp, #48	; 0x30
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10a      	bne.n	8009fd4 <xQueueReceive+0x30>
	__asm volatile
 8009fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	623b      	str	r3, [r7, #32]
}
 8009fd0:	bf00      	nop
 8009fd2:	e7fe      	b.n	8009fd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d103      	bne.n	8009fe2 <xQueueReceive+0x3e>
 8009fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d101      	bne.n	8009fe6 <xQueueReceive+0x42>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e000      	b.n	8009fe8 <xQueueReceive+0x44>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <xQueueReceive+0x5e>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	61fb      	str	r3, [r7, #28]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a002:	f001 f83b 	bl	800b07c <xTaskGetSchedulerState>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d102      	bne.n	800a012 <xQueueReceive+0x6e>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d101      	bne.n	800a016 <xQueueReceive+0x72>
 800a012:	2301      	movs	r3, #1
 800a014:	e000      	b.n	800a018 <xQueueReceive+0x74>
 800a016:	2300      	movs	r3, #0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10a      	bne.n	800a032 <xQueueReceive+0x8e>
	__asm volatile
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	61bb      	str	r3, [r7, #24]
}
 800a02e:	bf00      	nop
 800a030:	e7fe      	b.n	800a030 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a032:	f001 fd7f 	bl	800bb34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d01f      	beq.n	800a082 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a042:	68b9      	ldr	r1, [r7, #8]
 800a044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a046:	f000 f8f7 	bl	800a238 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04c:	1e5a      	subs	r2, r3, #1
 800a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a050:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00f      	beq.n	800a07a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05c:	3310      	adds	r3, #16
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 fe4e 	bl	800ad00 <xTaskRemoveFromEventList>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d007      	beq.n	800a07a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a06a:	4b3d      	ldr	r3, [pc, #244]	; (800a160 <xQueueReceive+0x1bc>)
 800a06c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a070:	601a      	str	r2, [r3, #0]
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a07a:	f001 fd8b 	bl	800bb94 <vPortExitCritical>
				return pdPASS;
 800a07e:	2301      	movs	r3, #1
 800a080:	e069      	b.n	800a156 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d103      	bne.n	800a090 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a088:	f001 fd84 	bl	800bb94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a08c:	2300      	movs	r3, #0
 800a08e:	e062      	b.n	800a156 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a092:	2b00      	cmp	r3, #0
 800a094:	d106      	bne.n	800a0a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a096:	f107 0310 	add.w	r3, r7, #16
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 fe94 	bl	800adc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0a4:	f001 fd76 	bl	800bb94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0a8:	f000 fc06 	bl	800a8b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0ac:	f001 fd42 	bl	800bb34 <vPortEnterCritical>
 800a0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0b6:	b25b      	sxtb	r3, r3
 800a0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0bc:	d103      	bne.n	800a0c6 <xQueueReceive+0x122>
 800a0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0cc:	b25b      	sxtb	r3, r3
 800a0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d2:	d103      	bne.n	800a0dc <xQueueReceive+0x138>
 800a0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0dc:	f001 fd5a 	bl	800bb94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0e0:	1d3a      	adds	r2, r7, #4
 800a0e2:	f107 0310 	add.w	r3, r7, #16
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f000 fe83 	bl	800adf4 <xTaskCheckForTimeOut>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d123      	bne.n	800a13c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0f6:	f000 f917 	bl	800a328 <prvIsQueueEmpty>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d017      	beq.n	800a130 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a102:	3324      	adds	r3, #36	; 0x24
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	4611      	mov	r1, r2
 800a108:	4618      	mov	r0, r3
 800a10a:	f000 fda9 	bl	800ac60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a110:	f000 f8b8 	bl	800a284 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a114:	f000 fbde 	bl	800a8d4 <xTaskResumeAll>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d189      	bne.n	800a032 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a11e:	4b10      	ldr	r3, [pc, #64]	; (800a160 <xQueueReceive+0x1bc>)
 800a120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a124:	601a      	str	r2, [r3, #0]
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	e780      	b.n	800a032 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a132:	f000 f8a7 	bl	800a284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a136:	f000 fbcd 	bl	800a8d4 <xTaskResumeAll>
 800a13a:	e77a      	b.n	800a032 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a13c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a13e:	f000 f8a1 	bl	800a284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a142:	f000 fbc7 	bl	800a8d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a148:	f000 f8ee 	bl	800a328 <prvIsQueueEmpty>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f43f af6f 	beq.w	800a032 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a154:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a156:	4618      	mov	r0, r3
 800a158:	3730      	adds	r7, #48	; 0x30
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	e000ed04 	.word	0xe000ed04

0800a164 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b086      	sub	sp, #24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a170:	2300      	movs	r3, #0
 800a172:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a178:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10d      	bne.n	800a19e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d14d      	bne.n	800a226 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 ff92 	bl	800b0b8 <xTaskPriorityDisinherit>
 800a194:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	609a      	str	r2, [r3, #8]
 800a19c:	e043      	b.n	800a226 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d119      	bne.n	800a1d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6858      	ldr	r0, [r3, #4]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	68b9      	ldr	r1, [r7, #8]
 800a1b0:	f001 fff8 	bl	800c1a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	685a      	ldr	r2, [r3, #4]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1bc:	441a      	add	r2, r3
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d32b      	bcc.n	800a226 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	605a      	str	r2, [r3, #4]
 800a1d6:	e026      	b.n	800a226 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	68d8      	ldr	r0, [r3, #12]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	68b9      	ldr	r1, [r7, #8]
 800a1e4:	f001 ffde 	bl	800c1a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	68da      	ldr	r2, [r3, #12]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f0:	425b      	negs	r3, r3
 800a1f2:	441a      	add	r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	68da      	ldr	r2, [r3, #12]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	429a      	cmp	r2, r3
 800a202:	d207      	bcs.n	800a214 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	689a      	ldr	r2, [r3, #8]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20c:	425b      	negs	r3, r3
 800a20e:	441a      	add	r2, r3
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b02      	cmp	r3, #2
 800a218:	d105      	bne.n	800a226 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	3b01      	subs	r3, #1
 800a224:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	1c5a      	adds	r2, r3, #1
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a22e:	697b      	ldr	r3, [r7, #20]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a246:	2b00      	cmp	r3, #0
 800a248:	d018      	beq.n	800a27c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68da      	ldr	r2, [r3, #12]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a252:	441a      	add	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	68da      	ldr	r2, [r3, #12]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	429a      	cmp	r2, r3
 800a262:	d303      	bcc.n	800a26c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	68d9      	ldr	r1, [r3, #12]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a274:	461a      	mov	r2, r3
 800a276:	6838      	ldr	r0, [r7, #0]
 800a278:	f001 ff94 	bl	800c1a4 <memcpy>
	}
}
 800a27c:	bf00      	nop
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a28c:	f001 fc52 	bl	800bb34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a296:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a298:	e011      	b.n	800a2be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d012      	beq.n	800a2c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	3324      	adds	r3, #36	; 0x24
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 fd2a 	bl	800ad00 <xTaskRemoveFromEventList>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a2b2:	f000 fe01 	bl	800aeb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a2b6:	7bfb      	ldrb	r3, [r7, #15]
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	dce9      	bgt.n	800a29a <prvUnlockQueue+0x16>
 800a2c6:	e000      	b.n	800a2ca <prvUnlockQueue+0x46>
					break;
 800a2c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	22ff      	movs	r2, #255	; 0xff
 800a2ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a2d2:	f001 fc5f 	bl	800bb94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a2d6:	f001 fc2d 	bl	800bb34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2e2:	e011      	b.n	800a308 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d012      	beq.n	800a312 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	3310      	adds	r3, #16
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 fd05 	bl	800ad00 <xTaskRemoveFromEventList>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d001      	beq.n	800a300 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2fc:	f000 fddc 	bl	800aeb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a300:	7bbb      	ldrb	r3, [r7, #14]
 800a302:	3b01      	subs	r3, #1
 800a304:	b2db      	uxtb	r3, r3
 800a306:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	dce9      	bgt.n	800a2e4 <prvUnlockQueue+0x60>
 800a310:	e000      	b.n	800a314 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a312:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	22ff      	movs	r2, #255	; 0xff
 800a318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a31c:	f001 fc3a 	bl	800bb94 <vPortExitCritical>
}
 800a320:	bf00      	nop
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a330:	f001 fc00 	bl	800bb34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d102      	bne.n	800a342 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a33c:	2301      	movs	r3, #1
 800a33e:	60fb      	str	r3, [r7, #12]
 800a340:	e001      	b.n	800a346 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a342:	2300      	movs	r3, #0
 800a344:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a346:	f001 fc25 	bl	800bb94 <vPortExitCritical>

	return xReturn;
 800a34a:	68fb      	ldr	r3, [r7, #12]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a35c:	f001 fbea 	bl	800bb34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a368:	429a      	cmp	r2, r3
 800a36a:	d102      	bne.n	800a372 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a36c:	2301      	movs	r3, #1
 800a36e:	60fb      	str	r3, [r7, #12]
 800a370:	e001      	b.n	800a376 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a372:	2300      	movs	r3, #0
 800a374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a376:	f001 fc0d 	bl	800bb94 <vPortExitCritical>

	return xReturn;
 800a37a:	68fb      	ldr	r3, [r7, #12]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a38e:	2300      	movs	r3, #0
 800a390:	60fb      	str	r3, [r7, #12]
 800a392:	e014      	b.n	800a3be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a394:	4a0f      	ldr	r2, [pc, #60]	; (800a3d4 <vQueueAddToRegistry+0x50>)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10b      	bne.n	800a3b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a3a0:	490c      	ldr	r1, [pc, #48]	; (800a3d4 <vQueueAddToRegistry+0x50>)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a3aa:	4a0a      	ldr	r2, [pc, #40]	; (800a3d4 <vQueueAddToRegistry+0x50>)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	00db      	lsls	r3, r3, #3
 800a3b0:	4413      	add	r3, r2
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a3b6:	e006      	b.n	800a3c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	60fb      	str	r3, [r7, #12]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2b07      	cmp	r3, #7
 800a3c2:	d9e7      	bls.n	800a394 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a3c4:	bf00      	nop
 800a3c6:	bf00      	nop
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	24040670 	.word	0x24040670

0800a3d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a3e8:	f001 fba4 	bl	800bb34 <vPortEnterCritical>
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3f2:	b25b      	sxtb	r3, r3
 800a3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f8:	d103      	bne.n	800a402 <vQueueWaitForMessageRestricted+0x2a>
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a408:	b25b      	sxtb	r3, r3
 800a40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40e:	d103      	bne.n	800a418 <vQueueWaitForMessageRestricted+0x40>
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a418:	f001 fbbc 	bl	800bb94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a420:	2b00      	cmp	r3, #0
 800a422:	d106      	bne.n	800a432 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	3324      	adds	r3, #36	; 0x24
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	68b9      	ldr	r1, [r7, #8]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f000 fc3b 	bl	800aca8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a432:	6978      	ldr	r0, [r7, #20]
 800a434:	f7ff ff26 	bl	800a284 <prvUnlockQueue>
	}
 800a438:	bf00      	nop
 800a43a:	3718      	adds	r7, #24
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a440:	b580      	push	{r7, lr}
 800a442:	b08e      	sub	sp, #56	; 0x38
 800a444:	af04      	add	r7, sp, #16
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10a      	bne.n	800a46a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	623b      	str	r3, [r7, #32]
}
 800a466:	bf00      	nop
 800a468:	e7fe      	b.n	800a468 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10a      	bne.n	800a486 <xTaskCreateStatic+0x46>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	61fb      	str	r3, [r7, #28]
}
 800a482:	bf00      	nop
 800a484:	e7fe      	b.n	800a484 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a486:	235c      	movs	r3, #92	; 0x5c
 800a488:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	2b5c      	cmp	r3, #92	; 0x5c
 800a48e:	d00a      	beq.n	800a4a6 <xTaskCreateStatic+0x66>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	61bb      	str	r3, [r7, #24]
}
 800a4a2:	bf00      	nop
 800a4a4:	e7fe      	b.n	800a4a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a4a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d01e      	beq.n	800a4ec <xTaskCreateStatic+0xac>
 800a4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d01b      	beq.n	800a4ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c0:	2202      	movs	r2, #2
 800a4c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	9303      	str	r3, [sp, #12]
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	9302      	str	r3, [sp, #8]
 800a4ce:	f107 0314 	add.w	r3, r7, #20
 800a4d2:	9301      	str	r3, [sp, #4]
 800a4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	68b9      	ldr	r1, [r7, #8]
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f000 f850 	bl	800a584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4e6:	f000 f8dd 	bl	800a6a4 <prvAddNewTaskToReadyList>
 800a4ea:	e001      	b.n	800a4f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4f0:	697b      	ldr	r3, [r7, #20]
	}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3728      	adds	r7, #40	; 0x28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b08c      	sub	sp, #48	; 0x30
 800a4fe:	af04      	add	r7, sp, #16
 800a500:	60f8      	str	r0, [r7, #12]
 800a502:	60b9      	str	r1, [r7, #8]
 800a504:	603b      	str	r3, [r7, #0]
 800a506:	4613      	mov	r3, r2
 800a508:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a50a:	88fb      	ldrh	r3, [r7, #6]
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	4618      	mov	r0, r3
 800a510:	f001 fc32 	bl	800bd78 <pvPortMalloc>
 800a514:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00e      	beq.n	800a53a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a51c:	205c      	movs	r0, #92	; 0x5c
 800a51e:	f001 fc2b 	bl	800bd78 <pvPortMalloc>
 800a522:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d003      	beq.n	800a532 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	631a      	str	r2, [r3, #48]	; 0x30
 800a530:	e005      	b.n	800a53e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a532:	6978      	ldr	r0, [r7, #20]
 800a534:	f001 fcec 	bl	800bf10 <vPortFree>
 800a538:	e001      	b.n	800a53e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a53a:	2300      	movs	r3, #0
 800a53c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d017      	beq.n	800a574 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a54c:	88fa      	ldrh	r2, [r7, #6]
 800a54e:	2300      	movs	r3, #0
 800a550:	9303      	str	r3, [sp, #12]
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	9302      	str	r3, [sp, #8]
 800a556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a558:	9301      	str	r3, [sp, #4]
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	68b9      	ldr	r1, [r7, #8]
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f000 f80e 	bl	800a584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a568:	69f8      	ldr	r0, [r7, #28]
 800a56a:	f000 f89b 	bl	800a6a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a56e:	2301      	movs	r3, #1
 800a570:	61bb      	str	r3, [r7, #24]
 800a572:	e002      	b.n	800a57a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a574:	f04f 33ff 	mov.w	r3, #4294967295
 800a578:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a57a:	69bb      	ldr	r3, [r7, #24]
	}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3720      	adds	r7, #32
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b088      	sub	sp, #32
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
 800a590:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a594:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	461a      	mov	r2, r3
 800a59c:	21a5      	movs	r1, #165	; 0xa5
 800a59e:	f001 fdd5 	bl	800c14c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5a6:	6879      	ldr	r1, [r7, #4]
 800a5a8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a5ac:	440b      	add	r3, r1
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4413      	add	r3, r2
 800a5b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	f023 0307 	bic.w	r3, r3, #7
 800a5ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	f003 0307 	and.w	r3, r3, #7
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00a      	beq.n	800a5dc <prvInitialiseNewTask+0x58>
	__asm volatile
 800a5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	617b      	str	r3, [r7, #20]
}
 800a5d8:	bf00      	nop
 800a5da:	e7fe      	b.n	800a5da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d01f      	beq.n	800a622 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	61fb      	str	r3, [r7, #28]
 800a5e6:	e012      	b.n	800a60e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	7819      	ldrb	r1, [r3, #0]
 800a5f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	3334      	adds	r3, #52	; 0x34
 800a5f8:	460a      	mov	r2, r1
 800a5fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	4413      	add	r3, r2
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d006      	beq.n	800a616 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	3301      	adds	r3, #1
 800a60c:	61fb      	str	r3, [r7, #28]
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	2b0f      	cmp	r3, #15
 800a612:	d9e9      	bls.n	800a5e8 <prvInitialiseNewTask+0x64>
 800a614:	e000      	b.n	800a618 <prvInitialiseNewTask+0x94>
			{
				break;
 800a616:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a620:	e003      	b.n	800a62a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a624:	2200      	movs	r2, #0
 800a626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62c:	2b37      	cmp	r3, #55	; 0x37
 800a62e:	d901      	bls.n	800a634 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a630:	2337      	movs	r3, #55	; 0x37
 800a632:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a638:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a63e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a642:	2200      	movs	r2, #0
 800a644:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a648:	3304      	adds	r3, #4
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff f978 	bl	8009940 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	3318      	adds	r3, #24
 800a654:	4618      	mov	r0, r3
 800a656:	f7ff f973 	bl	8009940 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a65e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a662:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a66e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a672:	2200      	movs	r2, #0
 800a674:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a67e:	683a      	ldr	r2, [r7, #0]
 800a680:	68f9      	ldr	r1, [r7, #12]
 800a682:	69b8      	ldr	r0, [r7, #24]
 800a684:	f001 f928 	bl	800b8d8 <pxPortInitialiseStack>
 800a688:	4602      	mov	r2, r0
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a690:	2b00      	cmp	r3, #0
 800a692:	d002      	beq.n	800a69a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a698:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a69a:	bf00      	nop
 800a69c:	3720      	adds	r7, #32
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
	...

0800a6a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6ac:	f001 fa42 	bl	800bb34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6b0:	4b2d      	ldr	r3, [pc, #180]	; (800a768 <prvAddNewTaskToReadyList+0xc4>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	4a2c      	ldr	r2, [pc, #176]	; (800a768 <prvAddNewTaskToReadyList+0xc4>)
 800a6b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6ba:	4b2c      	ldr	r3, [pc, #176]	; (800a76c <prvAddNewTaskToReadyList+0xc8>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d109      	bne.n	800a6d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6c2:	4a2a      	ldr	r2, [pc, #168]	; (800a76c <prvAddNewTaskToReadyList+0xc8>)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6c8:	4b27      	ldr	r3, [pc, #156]	; (800a768 <prvAddNewTaskToReadyList+0xc4>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d110      	bne.n	800a6f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6d0:	f000 fc16 	bl	800af00 <prvInitialiseTaskLists>
 800a6d4:	e00d      	b.n	800a6f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6d6:	4b26      	ldr	r3, [pc, #152]	; (800a770 <prvAddNewTaskToReadyList+0xcc>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d109      	bne.n	800a6f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6de:	4b23      	ldr	r3, [pc, #140]	; (800a76c <prvAddNewTaskToReadyList+0xc8>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d802      	bhi.n	800a6f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a6ec:	4a1f      	ldr	r2, [pc, #124]	; (800a76c <prvAddNewTaskToReadyList+0xc8>)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a6f2:	4b20      	ldr	r3, [pc, #128]	; (800a774 <prvAddNewTaskToReadyList+0xd0>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	4a1e      	ldr	r2, [pc, #120]	; (800a774 <prvAddNewTaskToReadyList+0xd0>)
 800a6fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a6fc:	4b1d      	ldr	r3, [pc, #116]	; (800a774 <prvAddNewTaskToReadyList+0xd0>)
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a708:	4b1b      	ldr	r3, [pc, #108]	; (800a778 <prvAddNewTaskToReadyList+0xd4>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d903      	bls.n	800a718 <prvAddNewTaskToReadyList+0x74>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a714:	4a18      	ldr	r2, [pc, #96]	; (800a778 <prvAddNewTaskToReadyList+0xd4>)
 800a716:	6013      	str	r3, [r2, #0]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71c:	4613      	mov	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	4a15      	ldr	r2, [pc, #84]	; (800a77c <prvAddNewTaskToReadyList+0xd8>)
 800a726:	441a      	add	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	3304      	adds	r3, #4
 800a72c:	4619      	mov	r1, r3
 800a72e:	4610      	mov	r0, r2
 800a730:	f7ff f913 	bl	800995a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a734:	f001 fa2e 	bl	800bb94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a738:	4b0d      	ldr	r3, [pc, #52]	; (800a770 <prvAddNewTaskToReadyList+0xcc>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00e      	beq.n	800a75e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a740:	4b0a      	ldr	r3, [pc, #40]	; (800a76c <prvAddNewTaskToReadyList+0xc8>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d207      	bcs.n	800a75e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a74e:	4b0c      	ldr	r3, [pc, #48]	; (800a780 <prvAddNewTaskToReadyList+0xdc>)
 800a750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a754:	601a      	str	r2, [r3, #0]
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a75e:	bf00      	nop
 800a760:	3708      	adds	r7, #8
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	24040b84 	.word	0x24040b84
 800a76c:	240406b0 	.word	0x240406b0
 800a770:	24040b90 	.word	0x24040b90
 800a774:	24040ba0 	.word	0x24040ba0
 800a778:	24040b8c 	.word	0x24040b8c
 800a77c:	240406b4 	.word	0x240406b4
 800a780:	e000ed04 	.word	0xe000ed04

0800a784 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a78c:	2300      	movs	r3, #0
 800a78e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d017      	beq.n	800a7c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a796:	4b13      	ldr	r3, [pc, #76]	; (800a7e4 <vTaskDelay+0x60>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00a      	beq.n	800a7b4 <vTaskDelay+0x30>
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	60bb      	str	r3, [r7, #8]
}
 800a7b0:	bf00      	nop
 800a7b2:	e7fe      	b.n	800a7b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a7b4:	f000 f880 	bl	800a8b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fcea 	bl	800b194 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7c0:	f000 f888 	bl	800a8d4 <xTaskResumeAll>
 800a7c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d107      	bne.n	800a7dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a7cc:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <vTaskDelay+0x64>)
 800a7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7dc:	bf00      	nop
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	24040bac 	.word	0x24040bac
 800a7e8:	e000ed04 	.word	0xe000ed04

0800a7ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b08a      	sub	sp, #40	; 0x28
 800a7f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a7fa:	463a      	mov	r2, r7
 800a7fc:	1d39      	adds	r1, r7, #4
 800a7fe:	f107 0308 	add.w	r3, r7, #8
 800a802:	4618      	mov	r0, r3
 800a804:	f7ff f848 	bl	8009898 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	9202      	str	r2, [sp, #8]
 800a810:	9301      	str	r3, [sp, #4]
 800a812:	2300      	movs	r3, #0
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	2300      	movs	r3, #0
 800a818:	460a      	mov	r2, r1
 800a81a:	4921      	ldr	r1, [pc, #132]	; (800a8a0 <vTaskStartScheduler+0xb4>)
 800a81c:	4821      	ldr	r0, [pc, #132]	; (800a8a4 <vTaskStartScheduler+0xb8>)
 800a81e:	f7ff fe0f 	bl	800a440 <xTaskCreateStatic>
 800a822:	4603      	mov	r3, r0
 800a824:	4a20      	ldr	r2, [pc, #128]	; (800a8a8 <vTaskStartScheduler+0xbc>)
 800a826:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a828:	4b1f      	ldr	r3, [pc, #124]	; (800a8a8 <vTaskStartScheduler+0xbc>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a830:	2301      	movs	r3, #1
 800a832:	617b      	str	r3, [r7, #20]
 800a834:	e001      	b.n	800a83a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a836:	2300      	movs	r3, #0
 800a838:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d102      	bne.n	800a846 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a840:	f000 fcfc 	bl	800b23c <xTimerCreateTimerTask>
 800a844:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d116      	bne.n	800a87a <vTaskStartScheduler+0x8e>
	__asm volatile
 800a84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a850:	f383 8811 	msr	BASEPRI, r3
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	f3bf 8f4f 	dsb	sy
 800a85c:	613b      	str	r3, [r7, #16]
}
 800a85e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a860:	4b12      	ldr	r3, [pc, #72]	; (800a8ac <vTaskStartScheduler+0xc0>)
 800a862:	f04f 32ff 	mov.w	r2, #4294967295
 800a866:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a868:	4b11      	ldr	r3, [pc, #68]	; (800a8b0 <vTaskStartScheduler+0xc4>)
 800a86a:	2201      	movs	r2, #1
 800a86c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a86e:	4b11      	ldr	r3, [pc, #68]	; (800a8b4 <vTaskStartScheduler+0xc8>)
 800a870:	2200      	movs	r2, #0
 800a872:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a874:	f001 f8bc 	bl	800b9f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a878:	e00e      	b.n	800a898 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a880:	d10a      	bne.n	800a898 <vTaskStartScheduler+0xac>
	__asm volatile
 800a882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a886:	f383 8811 	msr	BASEPRI, r3
 800a88a:	f3bf 8f6f 	isb	sy
 800a88e:	f3bf 8f4f 	dsb	sy
 800a892:	60fb      	str	r3, [r7, #12]
}
 800a894:	bf00      	nop
 800a896:	e7fe      	b.n	800a896 <vTaskStartScheduler+0xaa>
}
 800a898:	bf00      	nop
 800a89a:	3718      	adds	r7, #24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	0800c1e4 	.word	0x0800c1e4
 800a8a4:	0800aed1 	.word	0x0800aed1
 800a8a8:	24040ba8 	.word	0x24040ba8
 800a8ac:	24040ba4 	.word	0x24040ba4
 800a8b0:	24040b90 	.word	0x24040b90
 800a8b4:	24040b88 	.word	0x24040b88

0800a8b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a8bc:	4b04      	ldr	r3, [pc, #16]	; (800a8d0 <vTaskSuspendAll+0x18>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	4a03      	ldr	r2, [pc, #12]	; (800a8d0 <vTaskSuspendAll+0x18>)
 800a8c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a8c6:	bf00      	nop
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	24040bac 	.word	0x24040bac

0800a8d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a8e2:	4b42      	ldr	r3, [pc, #264]	; (800a9ec <xTaskResumeAll+0x118>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10a      	bne.n	800a900 <xTaskResumeAll+0x2c>
	__asm volatile
 800a8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ee:	f383 8811 	msr	BASEPRI, r3
 800a8f2:	f3bf 8f6f 	isb	sy
 800a8f6:	f3bf 8f4f 	dsb	sy
 800a8fa:	603b      	str	r3, [r7, #0]
}
 800a8fc:	bf00      	nop
 800a8fe:	e7fe      	b.n	800a8fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a900:	f001 f918 	bl	800bb34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a904:	4b39      	ldr	r3, [pc, #228]	; (800a9ec <xTaskResumeAll+0x118>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	3b01      	subs	r3, #1
 800a90a:	4a38      	ldr	r2, [pc, #224]	; (800a9ec <xTaskResumeAll+0x118>)
 800a90c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a90e:	4b37      	ldr	r3, [pc, #220]	; (800a9ec <xTaskResumeAll+0x118>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d162      	bne.n	800a9dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a916:	4b36      	ldr	r3, [pc, #216]	; (800a9f0 <xTaskResumeAll+0x11c>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d05e      	beq.n	800a9dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a91e:	e02f      	b.n	800a980 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a920:	4b34      	ldr	r3, [pc, #208]	; (800a9f4 <xTaskResumeAll+0x120>)
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	3318      	adds	r3, #24
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7ff f871 	bl	8009a14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	3304      	adds	r3, #4
 800a936:	4618      	mov	r0, r3
 800a938:	f7ff f86c 	bl	8009a14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a940:	4b2d      	ldr	r3, [pc, #180]	; (800a9f8 <xTaskResumeAll+0x124>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	429a      	cmp	r2, r3
 800a946:	d903      	bls.n	800a950 <xTaskResumeAll+0x7c>
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a94c:	4a2a      	ldr	r2, [pc, #168]	; (800a9f8 <xTaskResumeAll+0x124>)
 800a94e:	6013      	str	r3, [r2, #0]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a954:	4613      	mov	r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4413      	add	r3, r2
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4a27      	ldr	r2, [pc, #156]	; (800a9fc <xTaskResumeAll+0x128>)
 800a95e:	441a      	add	r2, r3
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	3304      	adds	r3, #4
 800a964:	4619      	mov	r1, r3
 800a966:	4610      	mov	r0, r2
 800a968:	f7fe fff7 	bl	800995a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a970:	4b23      	ldr	r3, [pc, #140]	; (800aa00 <xTaskResumeAll+0x12c>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a976:	429a      	cmp	r2, r3
 800a978:	d302      	bcc.n	800a980 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a97a:	4b22      	ldr	r3, [pc, #136]	; (800aa04 <xTaskResumeAll+0x130>)
 800a97c:	2201      	movs	r2, #1
 800a97e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a980:	4b1c      	ldr	r3, [pc, #112]	; (800a9f4 <xTaskResumeAll+0x120>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1cb      	bne.n	800a920 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a98e:	f000 fb55 	bl	800b03c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a992:	4b1d      	ldr	r3, [pc, #116]	; (800aa08 <xTaskResumeAll+0x134>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d010      	beq.n	800a9c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a99e:	f000 f847 	bl	800aa30 <xTaskIncrementTick>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d002      	beq.n	800a9ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a9a8:	4b16      	ldr	r3, [pc, #88]	; (800aa04 <xTaskResumeAll+0x130>)
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1f1      	bne.n	800a99e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a9ba:	4b13      	ldr	r3, [pc, #76]	; (800aa08 <xTaskResumeAll+0x134>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9c0:	4b10      	ldr	r3, [pc, #64]	; (800aa04 <xTaskResumeAll+0x130>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d009      	beq.n	800a9dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9cc:	4b0f      	ldr	r3, [pc, #60]	; (800aa0c <xTaskResumeAll+0x138>)
 800a9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9dc:	f001 f8da 	bl	800bb94 <vPortExitCritical>

	return xAlreadyYielded;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	24040bac 	.word	0x24040bac
 800a9f0:	24040b84 	.word	0x24040b84
 800a9f4:	24040b44 	.word	0x24040b44
 800a9f8:	24040b8c 	.word	0x24040b8c
 800a9fc:	240406b4 	.word	0x240406b4
 800aa00:	240406b0 	.word	0x240406b0
 800aa04:	24040b98 	.word	0x24040b98
 800aa08:	24040b94 	.word	0x24040b94
 800aa0c:	e000ed04 	.word	0xe000ed04

0800aa10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa16:	4b05      	ldr	r3, [pc, #20]	; (800aa2c <xTaskGetTickCount+0x1c>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa1c:	687b      	ldr	r3, [r7, #4]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	24040b88 	.word	0x24040b88

0800aa30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b086      	sub	sp, #24
 800aa34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa36:	2300      	movs	r3, #0
 800aa38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa3a:	4b4f      	ldr	r3, [pc, #316]	; (800ab78 <xTaskIncrementTick+0x148>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f040 808f 	bne.w	800ab62 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa44:	4b4d      	ldr	r3, [pc, #308]	; (800ab7c <xTaskIncrementTick+0x14c>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa4c:	4a4b      	ldr	r2, [pc, #300]	; (800ab7c <xTaskIncrementTick+0x14c>)
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d120      	bne.n	800aa9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa58:	4b49      	ldr	r3, [pc, #292]	; (800ab80 <xTaskIncrementTick+0x150>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00a      	beq.n	800aa78 <xTaskIncrementTick+0x48>
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	603b      	str	r3, [r7, #0]
}
 800aa74:	bf00      	nop
 800aa76:	e7fe      	b.n	800aa76 <xTaskIncrementTick+0x46>
 800aa78:	4b41      	ldr	r3, [pc, #260]	; (800ab80 <xTaskIncrementTick+0x150>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	60fb      	str	r3, [r7, #12]
 800aa7e:	4b41      	ldr	r3, [pc, #260]	; (800ab84 <xTaskIncrementTick+0x154>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a3f      	ldr	r2, [pc, #252]	; (800ab80 <xTaskIncrementTick+0x150>)
 800aa84:	6013      	str	r3, [r2, #0]
 800aa86:	4a3f      	ldr	r2, [pc, #252]	; (800ab84 <xTaskIncrementTick+0x154>)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6013      	str	r3, [r2, #0]
 800aa8c:	4b3e      	ldr	r3, [pc, #248]	; (800ab88 <xTaskIncrementTick+0x158>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3301      	adds	r3, #1
 800aa92:	4a3d      	ldr	r2, [pc, #244]	; (800ab88 <xTaskIncrementTick+0x158>)
 800aa94:	6013      	str	r3, [r2, #0]
 800aa96:	f000 fad1 	bl	800b03c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa9a:	4b3c      	ldr	r3, [pc, #240]	; (800ab8c <xTaskIncrementTick+0x15c>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d349      	bcc.n	800ab38 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aaa4:	4b36      	ldr	r3, [pc, #216]	; (800ab80 <xTaskIncrementTick+0x150>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d104      	bne.n	800aab8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaae:	4b37      	ldr	r3, [pc, #220]	; (800ab8c <xTaskIncrementTick+0x15c>)
 800aab0:	f04f 32ff 	mov.w	r2, #4294967295
 800aab4:	601a      	str	r2, [r3, #0]
					break;
 800aab6:	e03f      	b.n	800ab38 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aab8:	4b31      	ldr	r3, [pc, #196]	; (800ab80 <xTaskIncrementTick+0x150>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d203      	bcs.n	800aad8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aad0:	4a2e      	ldr	r2, [pc, #184]	; (800ab8c <xTaskIncrementTick+0x15c>)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aad6:	e02f      	b.n	800ab38 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	3304      	adds	r3, #4
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fe ff99 	bl	8009a14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d004      	beq.n	800aaf4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	3318      	adds	r3, #24
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fe ff90 	bl	8009a14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf8:	4b25      	ldr	r3, [pc, #148]	; (800ab90 <xTaskIncrementTick+0x160>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d903      	bls.n	800ab08 <xTaskIncrementTick+0xd8>
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab04:	4a22      	ldr	r2, [pc, #136]	; (800ab90 <xTaskIncrementTick+0x160>)
 800ab06:	6013      	str	r3, [r2, #0]
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	4413      	add	r3, r2
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4a1f      	ldr	r2, [pc, #124]	; (800ab94 <xTaskIncrementTick+0x164>)
 800ab16:	441a      	add	r2, r3
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	4610      	mov	r0, r2
 800ab20:	f7fe ff1b 	bl	800995a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab28:	4b1b      	ldr	r3, [pc, #108]	; (800ab98 <xTaskIncrementTick+0x168>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d3b8      	bcc.n	800aaa4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ab32:	2301      	movs	r3, #1
 800ab34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab36:	e7b5      	b.n	800aaa4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab38:	4b17      	ldr	r3, [pc, #92]	; (800ab98 <xTaskIncrementTick+0x168>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3e:	4915      	ldr	r1, [pc, #84]	; (800ab94 <xTaskIncrementTick+0x164>)
 800ab40:	4613      	mov	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	440b      	add	r3, r1
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d901      	bls.n	800ab54 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ab50:	2301      	movs	r3, #1
 800ab52:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab54:	4b11      	ldr	r3, [pc, #68]	; (800ab9c <xTaskIncrementTick+0x16c>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d007      	beq.n	800ab6c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	617b      	str	r3, [r7, #20]
 800ab60:	e004      	b.n	800ab6c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab62:	4b0f      	ldr	r3, [pc, #60]	; (800aba0 <xTaskIncrementTick+0x170>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3301      	adds	r3, #1
 800ab68:	4a0d      	ldr	r2, [pc, #52]	; (800aba0 <xTaskIncrementTick+0x170>)
 800ab6a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab6c:	697b      	ldr	r3, [r7, #20]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3718      	adds	r7, #24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	24040bac 	.word	0x24040bac
 800ab7c:	24040b88 	.word	0x24040b88
 800ab80:	24040b3c 	.word	0x24040b3c
 800ab84:	24040b40 	.word	0x24040b40
 800ab88:	24040b9c 	.word	0x24040b9c
 800ab8c:	24040ba4 	.word	0x24040ba4
 800ab90:	24040b8c 	.word	0x24040b8c
 800ab94:	240406b4 	.word	0x240406b4
 800ab98:	240406b0 	.word	0x240406b0
 800ab9c:	24040b98 	.word	0x24040b98
 800aba0:	24040b94 	.word	0x24040b94

0800aba4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aba4:	b480      	push	{r7}
 800aba6:	b085      	sub	sp, #20
 800aba8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abaa:	4b28      	ldr	r3, [pc, #160]	; (800ac4c <vTaskSwitchContext+0xa8>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abb2:	4b27      	ldr	r3, [pc, #156]	; (800ac50 <vTaskSwitchContext+0xac>)
 800abb4:	2201      	movs	r2, #1
 800abb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abb8:	e041      	b.n	800ac3e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800abba:	4b25      	ldr	r3, [pc, #148]	; (800ac50 <vTaskSwitchContext+0xac>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abc0:	4b24      	ldr	r3, [pc, #144]	; (800ac54 <vTaskSwitchContext+0xb0>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	60fb      	str	r3, [r7, #12]
 800abc6:	e010      	b.n	800abea <vTaskSwitchContext+0x46>
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10a      	bne.n	800abe4 <vTaskSwitchContext+0x40>
	__asm volatile
 800abce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd2:	f383 8811 	msr	BASEPRI, r3
 800abd6:	f3bf 8f6f 	isb	sy
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	607b      	str	r3, [r7, #4]
}
 800abe0:	bf00      	nop
 800abe2:	e7fe      	b.n	800abe2 <vTaskSwitchContext+0x3e>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	3b01      	subs	r3, #1
 800abe8:	60fb      	str	r3, [r7, #12]
 800abea:	491b      	ldr	r1, [pc, #108]	; (800ac58 <vTaskSwitchContext+0xb4>)
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	4613      	mov	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	440b      	add	r3, r1
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0e4      	beq.n	800abc8 <vTaskSwitchContext+0x24>
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	4613      	mov	r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	4413      	add	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	4a13      	ldr	r2, [pc, #76]	; (800ac58 <vTaskSwitchContext+0xb4>)
 800ac0a:	4413      	add	r3, r2
 800ac0c:	60bb      	str	r3, [r7, #8]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	685a      	ldr	r2, [r3, #4]
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	605a      	str	r2, [r3, #4]
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	685a      	ldr	r2, [r3, #4]
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	3308      	adds	r3, #8
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d104      	bne.n	800ac2e <vTaskSwitchContext+0x8a>
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	685a      	ldr	r2, [r3, #4]
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	605a      	str	r2, [r3, #4]
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	4a09      	ldr	r2, [pc, #36]	; (800ac5c <vTaskSwitchContext+0xb8>)
 800ac36:	6013      	str	r3, [r2, #0]
 800ac38:	4a06      	ldr	r2, [pc, #24]	; (800ac54 <vTaskSwitchContext+0xb0>)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6013      	str	r3, [r2, #0]
}
 800ac3e:	bf00      	nop
 800ac40:	3714      	adds	r7, #20
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	24040bac 	.word	0x24040bac
 800ac50:	24040b98 	.word	0x24040b98
 800ac54:	24040b8c 	.word	0x24040b8c
 800ac58:	240406b4 	.word	0x240406b4
 800ac5c:	240406b0 	.word	0x240406b0

0800ac60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10a      	bne.n	800ac86 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ac70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac74:	f383 8811 	msr	BASEPRI, r3
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	60fb      	str	r3, [r7, #12]
}
 800ac82:	bf00      	nop
 800ac84:	e7fe      	b.n	800ac84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac86:	4b07      	ldr	r3, [pc, #28]	; (800aca4 <vTaskPlaceOnEventList+0x44>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	3318      	adds	r3, #24
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f7fe fe87 	bl	80099a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac94:	2101      	movs	r1, #1
 800ac96:	6838      	ldr	r0, [r7, #0]
 800ac98:	f000 fa7c 	bl	800b194 <prvAddCurrentTaskToDelayedList>
}
 800ac9c:	bf00      	nop
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	240406b0 	.word	0x240406b0

0800aca8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10a      	bne.n	800acd0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	617b      	str	r3, [r7, #20]
}
 800accc:	bf00      	nop
 800acce:	e7fe      	b.n	800acce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acd0:	4b0a      	ldr	r3, [pc, #40]	; (800acfc <vTaskPlaceOnEventListRestricted+0x54>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	3318      	adds	r3, #24
 800acd6:	4619      	mov	r1, r3
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f7fe fe3e 	bl	800995a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d002      	beq.n	800acea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ace4:	f04f 33ff 	mov.w	r3, #4294967295
 800ace8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800acea:	6879      	ldr	r1, [r7, #4]
 800acec:	68b8      	ldr	r0, [r7, #8]
 800acee:	f000 fa51 	bl	800b194 <prvAddCurrentTaskToDelayedList>
	}
 800acf2:	bf00      	nop
 800acf4:	3718      	adds	r7, #24
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	240406b0 	.word	0x240406b0

0800ad00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10a      	bne.n	800ad2c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	60fb      	str	r3, [r7, #12]
}
 800ad28:	bf00      	nop
 800ad2a:	e7fe      	b.n	800ad2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	3318      	adds	r3, #24
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fe fe6f 	bl	8009a14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad36:	4b1e      	ldr	r3, [pc, #120]	; (800adb0 <xTaskRemoveFromEventList+0xb0>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d11d      	bne.n	800ad7a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	3304      	adds	r3, #4
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fe fe66 	bl	8009a14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad4c:	4b19      	ldr	r3, [pc, #100]	; (800adb4 <xTaskRemoveFromEventList+0xb4>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d903      	bls.n	800ad5c <xTaskRemoveFromEventList+0x5c>
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad58:	4a16      	ldr	r2, [pc, #88]	; (800adb4 <xTaskRemoveFromEventList+0xb4>)
 800ad5a:	6013      	str	r3, [r2, #0]
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad60:	4613      	mov	r3, r2
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4413      	add	r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4a13      	ldr	r2, [pc, #76]	; (800adb8 <xTaskRemoveFromEventList+0xb8>)
 800ad6a:	441a      	add	r2, r3
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	3304      	adds	r3, #4
 800ad70:	4619      	mov	r1, r3
 800ad72:	4610      	mov	r0, r2
 800ad74:	f7fe fdf1 	bl	800995a <vListInsertEnd>
 800ad78:	e005      	b.n	800ad86 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	3318      	adds	r3, #24
 800ad7e:	4619      	mov	r1, r3
 800ad80:	480e      	ldr	r0, [pc, #56]	; (800adbc <xTaskRemoveFromEventList+0xbc>)
 800ad82:	f7fe fdea 	bl	800995a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad8a:	4b0d      	ldr	r3, [pc, #52]	; (800adc0 <xTaskRemoveFromEventList+0xc0>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d905      	bls.n	800ada0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ad94:	2301      	movs	r3, #1
 800ad96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ad98:	4b0a      	ldr	r3, [pc, #40]	; (800adc4 <xTaskRemoveFromEventList+0xc4>)
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	601a      	str	r2, [r3, #0]
 800ad9e:	e001      	b.n	800ada4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ada0:	2300      	movs	r3, #0
 800ada2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ada4:	697b      	ldr	r3, [r7, #20]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3718      	adds	r7, #24
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	24040bac 	.word	0x24040bac
 800adb4:	24040b8c 	.word	0x24040b8c
 800adb8:	240406b4 	.word	0x240406b4
 800adbc:	24040b44 	.word	0x24040b44
 800adc0:	240406b0 	.word	0x240406b0
 800adc4:	24040b98 	.word	0x24040b98

0800adc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800add0:	4b06      	ldr	r3, [pc, #24]	; (800adec <vTaskInternalSetTimeOutState+0x24>)
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800add8:	4b05      	ldr	r3, [pc, #20]	; (800adf0 <vTaskInternalSetTimeOutState+0x28>)
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	605a      	str	r2, [r3, #4]
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr
 800adec:	24040b9c 	.word	0x24040b9c
 800adf0:	24040b88 	.word	0x24040b88

0800adf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b088      	sub	sp, #32
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d10a      	bne.n	800ae1a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	613b      	str	r3, [r7, #16]
}
 800ae16:	bf00      	nop
 800ae18:	e7fe      	b.n	800ae18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d10a      	bne.n	800ae36 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ae20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	60fb      	str	r3, [r7, #12]
}
 800ae32:	bf00      	nop
 800ae34:	e7fe      	b.n	800ae34 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ae36:	f000 fe7d 	bl	800bb34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae3a:	4b1d      	ldr	r3, [pc, #116]	; (800aeb0 <xTaskCheckForTimeOut+0xbc>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	69ba      	ldr	r2, [r7, #24]
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae52:	d102      	bne.n	800ae5a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae54:	2300      	movs	r3, #0
 800ae56:	61fb      	str	r3, [r7, #28]
 800ae58:	e023      	b.n	800aea2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	4b15      	ldr	r3, [pc, #84]	; (800aeb4 <xTaskCheckForTimeOut+0xc0>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d007      	beq.n	800ae76 <xTaskCheckForTimeOut+0x82>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	69ba      	ldr	r2, [r7, #24]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d302      	bcc.n	800ae76 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae70:	2301      	movs	r3, #1
 800ae72:	61fb      	str	r3, [r7, #28]
 800ae74:	e015      	b.n	800aea2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d20b      	bcs.n	800ae98 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	1ad2      	subs	r2, r2, r3
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7ff ff9b 	bl	800adc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ae92:	2300      	movs	r3, #0
 800ae94:	61fb      	str	r3, [r7, #28]
 800ae96:	e004      	b.n	800aea2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aea2:	f000 fe77 	bl	800bb94 <vPortExitCritical>

	return xReturn;
 800aea6:	69fb      	ldr	r3, [r7, #28]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3720      	adds	r7, #32
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	24040b88 	.word	0x24040b88
 800aeb4:	24040b9c 	.word	0x24040b9c

0800aeb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aeb8:	b480      	push	{r7}
 800aeba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aebc:	4b03      	ldr	r3, [pc, #12]	; (800aecc <vTaskMissedYield+0x14>)
 800aebe:	2201      	movs	r2, #1
 800aec0:	601a      	str	r2, [r3, #0]
}
 800aec2:	bf00      	nop
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr
 800aecc:	24040b98 	.word	0x24040b98

0800aed0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aed8:	f000 f852 	bl	800af80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aedc:	4b06      	ldr	r3, [pc, #24]	; (800aef8 <prvIdleTask+0x28>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d9f9      	bls.n	800aed8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aee4:	4b05      	ldr	r3, [pc, #20]	; (800aefc <prvIdleTask+0x2c>)
 800aee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeea:	601a      	str	r2, [r3, #0]
 800aeec:	f3bf 8f4f 	dsb	sy
 800aef0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aef4:	e7f0      	b.n	800aed8 <prvIdleTask+0x8>
 800aef6:	bf00      	nop
 800aef8:	240406b4 	.word	0x240406b4
 800aefc:	e000ed04 	.word	0xe000ed04

0800af00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af06:	2300      	movs	r3, #0
 800af08:	607b      	str	r3, [r7, #4]
 800af0a:	e00c      	b.n	800af26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	4613      	mov	r3, r2
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4413      	add	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	4a12      	ldr	r2, [pc, #72]	; (800af60 <prvInitialiseTaskLists+0x60>)
 800af18:	4413      	add	r3, r2
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fe fcf0 	bl	8009900 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	3301      	adds	r3, #1
 800af24:	607b      	str	r3, [r7, #4]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b37      	cmp	r3, #55	; 0x37
 800af2a:	d9ef      	bls.n	800af0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af2c:	480d      	ldr	r0, [pc, #52]	; (800af64 <prvInitialiseTaskLists+0x64>)
 800af2e:	f7fe fce7 	bl	8009900 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af32:	480d      	ldr	r0, [pc, #52]	; (800af68 <prvInitialiseTaskLists+0x68>)
 800af34:	f7fe fce4 	bl	8009900 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af38:	480c      	ldr	r0, [pc, #48]	; (800af6c <prvInitialiseTaskLists+0x6c>)
 800af3a:	f7fe fce1 	bl	8009900 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af3e:	480c      	ldr	r0, [pc, #48]	; (800af70 <prvInitialiseTaskLists+0x70>)
 800af40:	f7fe fcde 	bl	8009900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af44:	480b      	ldr	r0, [pc, #44]	; (800af74 <prvInitialiseTaskLists+0x74>)
 800af46:	f7fe fcdb 	bl	8009900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af4a:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <prvInitialiseTaskLists+0x78>)
 800af4c:	4a05      	ldr	r2, [pc, #20]	; (800af64 <prvInitialiseTaskLists+0x64>)
 800af4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af50:	4b0a      	ldr	r3, [pc, #40]	; (800af7c <prvInitialiseTaskLists+0x7c>)
 800af52:	4a05      	ldr	r2, [pc, #20]	; (800af68 <prvInitialiseTaskLists+0x68>)
 800af54:	601a      	str	r2, [r3, #0]
}
 800af56:	bf00      	nop
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	240406b4 	.word	0x240406b4
 800af64:	24040b14 	.word	0x24040b14
 800af68:	24040b28 	.word	0x24040b28
 800af6c:	24040b44 	.word	0x24040b44
 800af70:	24040b58 	.word	0x24040b58
 800af74:	24040b70 	.word	0x24040b70
 800af78:	24040b3c 	.word	0x24040b3c
 800af7c:	24040b40 	.word	0x24040b40

0800af80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af86:	e019      	b.n	800afbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800af88:	f000 fdd4 	bl	800bb34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af8c:	4b10      	ldr	r3, [pc, #64]	; (800afd0 <prvCheckTasksWaitingTermination+0x50>)
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	3304      	adds	r3, #4
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fe fd3b 	bl	8009a14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800af9e:	4b0d      	ldr	r3, [pc, #52]	; (800afd4 <prvCheckTasksWaitingTermination+0x54>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3b01      	subs	r3, #1
 800afa4:	4a0b      	ldr	r2, [pc, #44]	; (800afd4 <prvCheckTasksWaitingTermination+0x54>)
 800afa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800afa8:	4b0b      	ldr	r3, [pc, #44]	; (800afd8 <prvCheckTasksWaitingTermination+0x58>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	3b01      	subs	r3, #1
 800afae:	4a0a      	ldr	r2, [pc, #40]	; (800afd8 <prvCheckTasksWaitingTermination+0x58>)
 800afb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800afb2:	f000 fdef 	bl	800bb94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f810 	bl	800afdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afbc:	4b06      	ldr	r3, [pc, #24]	; (800afd8 <prvCheckTasksWaitingTermination+0x58>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1e1      	bne.n	800af88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800afc4:	bf00      	nop
 800afc6:	bf00      	nop
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	24040b58 	.word	0x24040b58
 800afd4:	24040b84 	.word	0x24040b84
 800afd8:	24040b6c 	.word	0x24040b6c

0800afdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800afea:	2b00      	cmp	r3, #0
 800afec:	d108      	bne.n	800b000 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff2:	4618      	mov	r0, r3
 800aff4:	f000 ff8c 	bl	800bf10 <vPortFree>
				vPortFree( pxTCB );
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 ff89 	bl	800bf10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800affe:	e018      	b.n	800b032 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b006:	2b01      	cmp	r3, #1
 800b008:	d103      	bne.n	800b012 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 ff80 	bl	800bf10 <vPortFree>
	}
 800b010:	e00f      	b.n	800b032 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d00a      	beq.n	800b032 <prvDeleteTCB+0x56>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	60fb      	str	r3, [r7, #12]
}
 800b02e:	bf00      	nop
 800b030:	e7fe      	b.n	800b030 <prvDeleteTCB+0x54>
	}
 800b032:	bf00      	nop
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
	...

0800b03c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b042:	4b0c      	ldr	r3, [pc, #48]	; (800b074 <prvResetNextTaskUnblockTime+0x38>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d104      	bne.n	800b056 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b04c:	4b0a      	ldr	r3, [pc, #40]	; (800b078 <prvResetNextTaskUnblockTime+0x3c>)
 800b04e:	f04f 32ff 	mov.w	r2, #4294967295
 800b052:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b054:	e008      	b.n	800b068 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b056:	4b07      	ldr	r3, [pc, #28]	; (800b074 <prvResetNextTaskUnblockTime+0x38>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	4a04      	ldr	r2, [pc, #16]	; (800b078 <prvResetNextTaskUnblockTime+0x3c>)
 800b066:	6013      	str	r3, [r2, #0]
}
 800b068:	bf00      	nop
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr
 800b074:	24040b3c 	.word	0x24040b3c
 800b078:	24040ba4 	.word	0x24040ba4

0800b07c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b082:	4b0b      	ldr	r3, [pc, #44]	; (800b0b0 <xTaskGetSchedulerState+0x34>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d102      	bne.n	800b090 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b08a:	2301      	movs	r3, #1
 800b08c:	607b      	str	r3, [r7, #4]
 800b08e:	e008      	b.n	800b0a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b090:	4b08      	ldr	r3, [pc, #32]	; (800b0b4 <xTaskGetSchedulerState+0x38>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d102      	bne.n	800b09e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b098:	2302      	movs	r3, #2
 800b09a:	607b      	str	r3, [r7, #4]
 800b09c:	e001      	b.n	800b0a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b0a2:	687b      	ldr	r3, [r7, #4]
	}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	24040b90 	.word	0x24040b90
 800b0b4:	24040bac 	.word	0x24040bac

0800b0b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d056      	beq.n	800b17c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0ce:	4b2e      	ldr	r3, [pc, #184]	; (800b188 <xTaskPriorityDisinherit+0xd0>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	693a      	ldr	r2, [r7, #16]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d00a      	beq.n	800b0ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0dc:	f383 8811 	msr	BASEPRI, r3
 800b0e0:	f3bf 8f6f 	isb	sy
 800b0e4:	f3bf 8f4f 	dsb	sy
 800b0e8:	60fb      	str	r3, [r7, #12]
}
 800b0ea:	bf00      	nop
 800b0ec:	e7fe      	b.n	800b0ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10a      	bne.n	800b10c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	60bb      	str	r3, [r7, #8]
}
 800b108:	bf00      	nop
 800b10a:	e7fe      	b.n	800b10a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b110:	1e5a      	subs	r2, r3, #1
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b11e:	429a      	cmp	r2, r3
 800b120:	d02c      	beq.n	800b17c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b126:	2b00      	cmp	r3, #0
 800b128:	d128      	bne.n	800b17c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	3304      	adds	r3, #4
 800b12e:	4618      	mov	r0, r3
 800b130:	f7fe fc70 	bl	8009a14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b140:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b14c:	4b0f      	ldr	r3, [pc, #60]	; (800b18c <xTaskPriorityDisinherit+0xd4>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	429a      	cmp	r2, r3
 800b152:	d903      	bls.n	800b15c <xTaskPriorityDisinherit+0xa4>
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b158:	4a0c      	ldr	r2, [pc, #48]	; (800b18c <xTaskPriorityDisinherit+0xd4>)
 800b15a:	6013      	str	r3, [r2, #0]
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b160:	4613      	mov	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4413      	add	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4a09      	ldr	r2, [pc, #36]	; (800b190 <xTaskPriorityDisinherit+0xd8>)
 800b16a:	441a      	add	r2, r3
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	3304      	adds	r3, #4
 800b170:	4619      	mov	r1, r3
 800b172:	4610      	mov	r0, r2
 800b174:	f7fe fbf1 	bl	800995a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b178:	2301      	movs	r3, #1
 800b17a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b17c:	697b      	ldr	r3, [r7, #20]
	}
 800b17e:	4618      	mov	r0, r3
 800b180:	3718      	adds	r7, #24
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	240406b0 	.word	0x240406b0
 800b18c:	24040b8c 	.word	0x24040b8c
 800b190:	240406b4 	.word	0x240406b4

0800b194 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b19e:	4b21      	ldr	r3, [pc, #132]	; (800b224 <prvAddCurrentTaskToDelayedList+0x90>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1a4:	4b20      	ldr	r3, [pc, #128]	; (800b228 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	3304      	adds	r3, #4
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fe fc32 	bl	8009a14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b6:	d10a      	bne.n	800b1ce <prvAddCurrentTaskToDelayedList+0x3a>
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d007      	beq.n	800b1ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1be:	4b1a      	ldr	r3, [pc, #104]	; (800b228 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	4819      	ldr	r0, [pc, #100]	; (800b22c <prvAddCurrentTaskToDelayedList+0x98>)
 800b1c8:	f7fe fbc7 	bl	800995a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b1cc:	e026      	b.n	800b21c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1d6:	4b14      	ldr	r3, [pc, #80]	; (800b228 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d209      	bcs.n	800b1fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1e6:	4b12      	ldr	r3, [pc, #72]	; (800b230 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	4b0f      	ldr	r3, [pc, #60]	; (800b228 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	f7fe fbd5 	bl	80099a2 <vListInsert>
}
 800b1f8:	e010      	b.n	800b21c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1fa:	4b0e      	ldr	r3, [pc, #56]	; (800b234 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	4b0a      	ldr	r3, [pc, #40]	; (800b228 <prvAddCurrentTaskToDelayedList+0x94>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3304      	adds	r3, #4
 800b204:	4619      	mov	r1, r3
 800b206:	4610      	mov	r0, r2
 800b208:	f7fe fbcb 	bl	80099a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b20c:	4b0a      	ldr	r3, [pc, #40]	; (800b238 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	429a      	cmp	r2, r3
 800b214:	d202      	bcs.n	800b21c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b216:	4a08      	ldr	r2, [pc, #32]	; (800b238 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	6013      	str	r3, [r2, #0]
}
 800b21c:	bf00      	nop
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	24040b88 	.word	0x24040b88
 800b228:	240406b0 	.word	0x240406b0
 800b22c:	24040b70 	.word	0x24040b70
 800b230:	24040b40 	.word	0x24040b40
 800b234:	24040b3c 	.word	0x24040b3c
 800b238:	24040ba4 	.word	0x24040ba4

0800b23c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b08a      	sub	sp, #40	; 0x28
 800b240:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b242:	2300      	movs	r3, #0
 800b244:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b246:	f000 fb07 	bl	800b858 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b24a:	4b1c      	ldr	r3, [pc, #112]	; (800b2bc <xTimerCreateTimerTask+0x80>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d021      	beq.n	800b296 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b252:	2300      	movs	r3, #0
 800b254:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b256:	2300      	movs	r3, #0
 800b258:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b25a:	1d3a      	adds	r2, r7, #4
 800b25c:	f107 0108 	add.w	r1, r7, #8
 800b260:	f107 030c 	add.w	r3, r7, #12
 800b264:	4618      	mov	r0, r3
 800b266:	f7fe fb31 	bl	80098cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b26a:	6879      	ldr	r1, [r7, #4]
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	9202      	str	r2, [sp, #8]
 800b272:	9301      	str	r3, [sp, #4]
 800b274:	2302      	movs	r3, #2
 800b276:	9300      	str	r3, [sp, #0]
 800b278:	2300      	movs	r3, #0
 800b27a:	460a      	mov	r2, r1
 800b27c:	4910      	ldr	r1, [pc, #64]	; (800b2c0 <xTimerCreateTimerTask+0x84>)
 800b27e:	4811      	ldr	r0, [pc, #68]	; (800b2c4 <xTimerCreateTimerTask+0x88>)
 800b280:	f7ff f8de 	bl	800a440 <xTaskCreateStatic>
 800b284:	4603      	mov	r3, r0
 800b286:	4a10      	ldr	r2, [pc, #64]	; (800b2c8 <xTimerCreateTimerTask+0x8c>)
 800b288:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b28a:	4b0f      	ldr	r3, [pc, #60]	; (800b2c8 <xTimerCreateTimerTask+0x8c>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b292:	2301      	movs	r3, #1
 800b294:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10a      	bne.n	800b2b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a0:	f383 8811 	msr	BASEPRI, r3
 800b2a4:	f3bf 8f6f 	isb	sy
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	613b      	str	r3, [r7, #16]
}
 800b2ae:	bf00      	nop
 800b2b0:	e7fe      	b.n	800b2b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b2b2:	697b      	ldr	r3, [r7, #20]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3718      	adds	r7, #24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	24040be0 	.word	0x24040be0
 800b2c0:	0800c1ec 	.word	0x0800c1ec
 800b2c4:	0800b401 	.word	0x0800b401
 800b2c8:	24040be4 	.word	0x24040be4

0800b2cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b08a      	sub	sp, #40	; 0x28
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
 800b2d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d10a      	bne.n	800b2fa <xTimerGenericCommand+0x2e>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	623b      	str	r3, [r7, #32]
}
 800b2f6:	bf00      	nop
 800b2f8:	e7fe      	b.n	800b2f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b2fa:	4b1a      	ldr	r3, [pc, #104]	; (800b364 <xTimerGenericCommand+0x98>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d02a      	beq.n	800b358 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	2b05      	cmp	r3, #5
 800b312:	dc18      	bgt.n	800b346 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b314:	f7ff feb2 	bl	800b07c <xTaskGetSchedulerState>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d109      	bne.n	800b332 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b31e:	4b11      	ldr	r3, [pc, #68]	; (800b364 <xTimerGenericCommand+0x98>)
 800b320:	6818      	ldr	r0, [r3, #0]
 800b322:	f107 0110 	add.w	r1, r7, #16
 800b326:	2300      	movs	r3, #0
 800b328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b32a:	f7fe fca1 	bl	8009c70 <xQueueGenericSend>
 800b32e:	6278      	str	r0, [r7, #36]	; 0x24
 800b330:	e012      	b.n	800b358 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b332:	4b0c      	ldr	r3, [pc, #48]	; (800b364 <xTimerGenericCommand+0x98>)
 800b334:	6818      	ldr	r0, [r3, #0]
 800b336:	f107 0110 	add.w	r1, r7, #16
 800b33a:	2300      	movs	r3, #0
 800b33c:	2200      	movs	r2, #0
 800b33e:	f7fe fc97 	bl	8009c70 <xQueueGenericSend>
 800b342:	6278      	str	r0, [r7, #36]	; 0x24
 800b344:	e008      	b.n	800b358 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b346:	4b07      	ldr	r3, [pc, #28]	; (800b364 <xTimerGenericCommand+0x98>)
 800b348:	6818      	ldr	r0, [r3, #0]
 800b34a:	f107 0110 	add.w	r1, r7, #16
 800b34e:	2300      	movs	r3, #0
 800b350:	683a      	ldr	r2, [r7, #0]
 800b352:	f7fe fd8b 	bl	8009e6c <xQueueGenericSendFromISR>
 800b356:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3728      	adds	r7, #40	; 0x28
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	24040be0 	.word	0x24040be0

0800b368 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b088      	sub	sp, #32
 800b36c:	af02      	add	r7, sp, #8
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b372:	4b22      	ldr	r3, [pc, #136]	; (800b3fc <prvProcessExpiredTimer+0x94>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	3304      	adds	r3, #4
 800b380:	4618      	mov	r0, r3
 800b382:	f7fe fb47 	bl	8009a14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b38c:	f003 0304 	and.w	r3, r3, #4
 800b390:	2b00      	cmp	r3, #0
 800b392:	d022      	beq.n	800b3da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	699a      	ldr	r2, [r3, #24]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	18d1      	adds	r1, r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	6978      	ldr	r0, [r7, #20]
 800b3a2:	f000 f8d1 	bl	800b548 <prvInsertTimerInActiveList>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d01f      	beq.n	800b3ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	6978      	ldr	r0, [r7, #20]
 800b3b8:	f7ff ff88 	bl	800b2cc <xTimerGenericCommand>
 800b3bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d113      	bne.n	800b3ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c8:	f383 8811 	msr	BASEPRI, r3
 800b3cc:	f3bf 8f6f 	isb	sy
 800b3d0:	f3bf 8f4f 	dsb	sy
 800b3d4:	60fb      	str	r3, [r7, #12]
}
 800b3d6:	bf00      	nop
 800b3d8:	e7fe      	b.n	800b3d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3e0:	f023 0301 	bic.w	r3, r3, #1
 800b3e4:	b2da      	uxtb	r2, r3
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	6a1b      	ldr	r3, [r3, #32]
 800b3f0:	6978      	ldr	r0, [r7, #20]
 800b3f2:	4798      	blx	r3
}
 800b3f4:	bf00      	nop
 800b3f6:	3718      	adds	r7, #24
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	24040bd8 	.word	0x24040bd8

0800b400 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b408:	f107 0308 	add.w	r3, r7, #8
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 f857 	bl	800b4c0 <prvGetNextExpireTime>
 800b412:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	4619      	mov	r1, r3
 800b418:	68f8      	ldr	r0, [r7, #12]
 800b41a:	f000 f803 	bl	800b424 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b41e:	f000 f8d5 	bl	800b5cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b422:	e7f1      	b.n	800b408 <prvTimerTask+0x8>

0800b424 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b42e:	f7ff fa43 	bl	800a8b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b432:	f107 0308 	add.w	r3, r7, #8
 800b436:	4618      	mov	r0, r3
 800b438:	f000 f866 	bl	800b508 <prvSampleTimeNow>
 800b43c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d130      	bne.n	800b4a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d10a      	bne.n	800b460 <prvProcessTimerOrBlockTask+0x3c>
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d806      	bhi.n	800b460 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b452:	f7ff fa3f 	bl	800a8d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b456:	68f9      	ldr	r1, [r7, #12]
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f7ff ff85 	bl	800b368 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b45e:	e024      	b.n	800b4aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d008      	beq.n	800b478 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b466:	4b13      	ldr	r3, [pc, #76]	; (800b4b4 <prvProcessTimerOrBlockTask+0x90>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d101      	bne.n	800b474 <prvProcessTimerOrBlockTask+0x50>
 800b470:	2301      	movs	r3, #1
 800b472:	e000      	b.n	800b476 <prvProcessTimerOrBlockTask+0x52>
 800b474:	2300      	movs	r3, #0
 800b476:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b478:	4b0f      	ldr	r3, [pc, #60]	; (800b4b8 <prvProcessTimerOrBlockTask+0x94>)
 800b47a:	6818      	ldr	r0, [r3, #0]
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	683a      	ldr	r2, [r7, #0]
 800b484:	4619      	mov	r1, r3
 800b486:	f7fe ffa7 	bl	800a3d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b48a:	f7ff fa23 	bl	800a8d4 <xTaskResumeAll>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10a      	bne.n	800b4aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b494:	4b09      	ldr	r3, [pc, #36]	; (800b4bc <prvProcessTimerOrBlockTask+0x98>)
 800b496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b49a:	601a      	str	r2, [r3, #0]
 800b49c:	f3bf 8f4f 	dsb	sy
 800b4a0:	f3bf 8f6f 	isb	sy
}
 800b4a4:	e001      	b.n	800b4aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b4a6:	f7ff fa15 	bl	800a8d4 <xTaskResumeAll>
}
 800b4aa:	bf00      	nop
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	24040bdc 	.word	0x24040bdc
 800b4b8:	24040be0 	.word	0x24040be0
 800b4bc:	e000ed04 	.word	0xe000ed04

0800b4c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b4c8:	4b0e      	ldr	r3, [pc, #56]	; (800b504 <prvGetNextExpireTime+0x44>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <prvGetNextExpireTime+0x16>
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	e000      	b.n	800b4d8 <prvGetNextExpireTime+0x18>
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d105      	bne.n	800b4f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b4e4:	4b07      	ldr	r3, [pc, #28]	; (800b504 <prvGetNextExpireTime+0x44>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	60fb      	str	r3, [r7, #12]
 800b4ee:	e001      	b.n	800b4f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	24040bd8 	.word	0x24040bd8

0800b508 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b510:	f7ff fa7e 	bl	800aa10 <xTaskGetTickCount>
 800b514:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b516:	4b0b      	ldr	r3, [pc, #44]	; (800b544 <prvSampleTimeNow+0x3c>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d205      	bcs.n	800b52c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b520:	f000 f936 	bl	800b790 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	e002      	b.n	800b532 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2200      	movs	r2, #0
 800b530:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b532:	4a04      	ldr	r2, [pc, #16]	; (800b544 <prvSampleTimeNow+0x3c>)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b538:	68fb      	ldr	r3, [r7, #12]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	24040be8 	.word	0x24040be8

0800b548 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b086      	sub	sp, #24
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
 800b554:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b556:	2300      	movs	r3, #0
 800b558:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b566:	68ba      	ldr	r2, [r7, #8]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d812      	bhi.n	800b594 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	1ad2      	subs	r2, r2, r3
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d302      	bcc.n	800b582 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b57c:	2301      	movs	r3, #1
 800b57e:	617b      	str	r3, [r7, #20]
 800b580:	e01b      	b.n	800b5ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b582:	4b10      	ldr	r3, [pc, #64]	; (800b5c4 <prvInsertTimerInActiveList+0x7c>)
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	3304      	adds	r3, #4
 800b58a:	4619      	mov	r1, r3
 800b58c:	4610      	mov	r0, r2
 800b58e:	f7fe fa08 	bl	80099a2 <vListInsert>
 800b592:	e012      	b.n	800b5ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d206      	bcs.n	800b5aa <prvInsertTimerInActiveList+0x62>
 800b59c:	68ba      	ldr	r2, [r7, #8]
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d302      	bcc.n	800b5aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	617b      	str	r3, [r7, #20]
 800b5a8:	e007      	b.n	800b5ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5aa:	4b07      	ldr	r3, [pc, #28]	; (800b5c8 <prvInsertTimerInActiveList+0x80>)
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	4610      	mov	r0, r2
 800b5b6:	f7fe f9f4 	bl	80099a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b5ba:	697b      	ldr	r3, [r7, #20]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3718      	adds	r7, #24
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	24040bdc 	.word	0x24040bdc
 800b5c8:	24040bd8 	.word	0x24040bd8

0800b5cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b08e      	sub	sp, #56	; 0x38
 800b5d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b5d2:	e0ca      	b.n	800b76a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	da18      	bge.n	800b60c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b5da:	1d3b      	adds	r3, r7, #4
 800b5dc:	3304      	adds	r3, #4
 800b5de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10a      	bne.n	800b5fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ea:	f383 8811 	msr	BASEPRI, r3
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	f3bf 8f4f 	dsb	sy
 800b5f6:	61fb      	str	r3, [r7, #28]
}
 800b5f8:	bf00      	nop
 800b5fa:	e7fe      	b.n	800b5fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b602:	6850      	ldr	r0, [r2, #4]
 800b604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b606:	6892      	ldr	r2, [r2, #8]
 800b608:	4611      	mov	r1, r2
 800b60a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f2c0 80ab 	blt.w	800b76a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61a:	695b      	ldr	r3, [r3, #20]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d004      	beq.n	800b62a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	3304      	adds	r3, #4
 800b624:	4618      	mov	r0, r3
 800b626:	f7fe f9f5 	bl	8009a14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b62a:	463b      	mov	r3, r7
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7ff ff6b 	bl	800b508 <prvSampleTimeNow>
 800b632:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2b09      	cmp	r3, #9
 800b638:	f200 8096 	bhi.w	800b768 <prvProcessReceivedCommands+0x19c>
 800b63c:	a201      	add	r2, pc, #4	; (adr r2, 800b644 <prvProcessReceivedCommands+0x78>)
 800b63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b642:	bf00      	nop
 800b644:	0800b66d 	.word	0x0800b66d
 800b648:	0800b66d 	.word	0x0800b66d
 800b64c:	0800b66d 	.word	0x0800b66d
 800b650:	0800b6e1 	.word	0x0800b6e1
 800b654:	0800b6f5 	.word	0x0800b6f5
 800b658:	0800b73f 	.word	0x0800b73f
 800b65c:	0800b66d 	.word	0x0800b66d
 800b660:	0800b66d 	.word	0x0800b66d
 800b664:	0800b6e1 	.word	0x0800b6e1
 800b668:	0800b6f5 	.word	0x0800b6f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b672:	f043 0301 	orr.w	r3, r3, #1
 800b676:	b2da      	uxtb	r2, r3
 800b678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b682:	699b      	ldr	r3, [r3, #24]
 800b684:	18d1      	adds	r1, r2, r3
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b68a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b68c:	f7ff ff5c 	bl	800b548 <prvInsertTimerInActiveList>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d069      	beq.n	800b76a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b698:	6a1b      	ldr	r3, [r3, #32]
 800b69a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b69c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6a4:	f003 0304 	and.w	r3, r3, #4
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d05e      	beq.n	800b76a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b6ac:	68ba      	ldr	r2, [r7, #8]
 800b6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	441a      	add	r2, r3
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6be:	f7ff fe05 	bl	800b2cc <xTimerGenericCommand>
 800b6c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b6c4:	6a3b      	ldr	r3, [r7, #32]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d14f      	bne.n	800b76a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ce:	f383 8811 	msr	BASEPRI, r3
 800b6d2:	f3bf 8f6f 	isb	sy
 800b6d6:	f3bf 8f4f 	dsb	sy
 800b6da:	61bb      	str	r3, [r7, #24]
}
 800b6dc:	bf00      	nop
 800b6de:	e7fe      	b.n	800b6de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6e6:	f023 0301 	bic.w	r3, r3, #1
 800b6ea:	b2da      	uxtb	r2, r3
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b6f2:	e03a      	b.n	800b76a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6fa:	f043 0301 	orr.w	r3, r3, #1
 800b6fe:	b2da      	uxtb	r2, r3
 800b700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b70a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b70e:	699b      	ldr	r3, [r3, #24]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d10a      	bne.n	800b72a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b718:	f383 8811 	msr	BASEPRI, r3
 800b71c:	f3bf 8f6f 	isb	sy
 800b720:	f3bf 8f4f 	dsb	sy
 800b724:	617b      	str	r3, [r7, #20]
}
 800b726:	bf00      	nop
 800b728:	e7fe      	b.n	800b728 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72c:	699a      	ldr	r2, [r3, #24]
 800b72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b730:	18d1      	adds	r1, r2, r3
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b738:	f7ff ff06 	bl	800b548 <prvInsertTimerInActiveList>
					break;
 800b73c:	e015      	b.n	800b76a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b744:	f003 0302 	and.w	r3, r3, #2
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d103      	bne.n	800b754 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b74c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b74e:	f000 fbdf 	bl	800bf10 <vPortFree>
 800b752:	e00a      	b.n	800b76a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b756:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b75a:	f023 0301 	bic.w	r3, r3, #1
 800b75e:	b2da      	uxtb	r2, r3
 800b760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b762:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b766:	e000      	b.n	800b76a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b768:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b76a:	4b08      	ldr	r3, [pc, #32]	; (800b78c <prvProcessReceivedCommands+0x1c0>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	1d39      	adds	r1, r7, #4
 800b770:	2200      	movs	r2, #0
 800b772:	4618      	mov	r0, r3
 800b774:	f7fe fc16 	bl	8009fa4 <xQueueReceive>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f47f af2a 	bne.w	800b5d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b780:	bf00      	nop
 800b782:	bf00      	nop
 800b784:	3730      	adds	r7, #48	; 0x30
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	24040be0 	.word	0x24040be0

0800b790 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b088      	sub	sp, #32
 800b794:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b796:	e048      	b.n	800b82a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b798:	4b2d      	ldr	r3, [pc, #180]	; (800b850 <prvSwitchTimerLists+0xc0>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7a2:	4b2b      	ldr	r3, [pc, #172]	; (800b850 <prvSwitchTimerLists+0xc0>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	3304      	adds	r3, #4
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fe f92f 	bl	8009a14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6a1b      	ldr	r3, [r3, #32]
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7c4:	f003 0304 	and.w	r3, r3, #4
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d02e      	beq.n	800b82a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	699b      	ldr	r3, [r3, #24]
 800b7d0:	693a      	ldr	r2, [r7, #16]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b7d6:	68ba      	ldr	r2, [r7, #8]
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d90e      	bls.n	800b7fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b7ea:	4b19      	ldr	r3, [pc, #100]	; (800b850 <prvSwitchTimerLists+0xc0>)
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	4610      	mov	r0, r2
 800b7f6:	f7fe f8d4 	bl	80099a2 <vListInsert>
 800b7fa:	e016      	b.n	800b82a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	2300      	movs	r3, #0
 800b802:	693a      	ldr	r2, [r7, #16]
 800b804:	2100      	movs	r1, #0
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f7ff fd60 	bl	800b2cc <xTimerGenericCommand>
 800b80c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d10a      	bne.n	800b82a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b818:	f383 8811 	msr	BASEPRI, r3
 800b81c:	f3bf 8f6f 	isb	sy
 800b820:	f3bf 8f4f 	dsb	sy
 800b824:	603b      	str	r3, [r7, #0]
}
 800b826:	bf00      	nop
 800b828:	e7fe      	b.n	800b828 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b82a:	4b09      	ldr	r3, [pc, #36]	; (800b850 <prvSwitchTimerLists+0xc0>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1b1      	bne.n	800b798 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b834:	4b06      	ldr	r3, [pc, #24]	; (800b850 <prvSwitchTimerLists+0xc0>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b83a:	4b06      	ldr	r3, [pc, #24]	; (800b854 <prvSwitchTimerLists+0xc4>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a04      	ldr	r2, [pc, #16]	; (800b850 <prvSwitchTimerLists+0xc0>)
 800b840:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b842:	4a04      	ldr	r2, [pc, #16]	; (800b854 <prvSwitchTimerLists+0xc4>)
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	6013      	str	r3, [r2, #0]
}
 800b848:	bf00      	nop
 800b84a:	3718      	adds	r7, #24
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	24040bd8 	.word	0x24040bd8
 800b854:	24040bdc 	.word	0x24040bdc

0800b858 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b85e:	f000 f969 	bl	800bb34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b862:	4b15      	ldr	r3, [pc, #84]	; (800b8b8 <prvCheckForValidListAndQueue+0x60>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d120      	bne.n	800b8ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b86a:	4814      	ldr	r0, [pc, #80]	; (800b8bc <prvCheckForValidListAndQueue+0x64>)
 800b86c:	f7fe f848 	bl	8009900 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b870:	4813      	ldr	r0, [pc, #76]	; (800b8c0 <prvCheckForValidListAndQueue+0x68>)
 800b872:	f7fe f845 	bl	8009900 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b876:	4b13      	ldr	r3, [pc, #76]	; (800b8c4 <prvCheckForValidListAndQueue+0x6c>)
 800b878:	4a10      	ldr	r2, [pc, #64]	; (800b8bc <prvCheckForValidListAndQueue+0x64>)
 800b87a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b87c:	4b12      	ldr	r3, [pc, #72]	; (800b8c8 <prvCheckForValidListAndQueue+0x70>)
 800b87e:	4a10      	ldr	r2, [pc, #64]	; (800b8c0 <prvCheckForValidListAndQueue+0x68>)
 800b880:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b882:	2300      	movs	r3, #0
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	4b11      	ldr	r3, [pc, #68]	; (800b8cc <prvCheckForValidListAndQueue+0x74>)
 800b888:	4a11      	ldr	r2, [pc, #68]	; (800b8d0 <prvCheckForValidListAndQueue+0x78>)
 800b88a:	2110      	movs	r1, #16
 800b88c:	200a      	movs	r0, #10
 800b88e:	f7fe f953 	bl	8009b38 <xQueueGenericCreateStatic>
 800b892:	4603      	mov	r3, r0
 800b894:	4a08      	ldr	r2, [pc, #32]	; (800b8b8 <prvCheckForValidListAndQueue+0x60>)
 800b896:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b898:	4b07      	ldr	r3, [pc, #28]	; (800b8b8 <prvCheckForValidListAndQueue+0x60>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d005      	beq.n	800b8ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b8a0:	4b05      	ldr	r3, [pc, #20]	; (800b8b8 <prvCheckForValidListAndQueue+0x60>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	490b      	ldr	r1, [pc, #44]	; (800b8d4 <prvCheckForValidListAndQueue+0x7c>)
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fe fd6c 	bl	800a384 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8ac:	f000 f972 	bl	800bb94 <vPortExitCritical>
}
 800b8b0:	bf00      	nop
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	24040be0 	.word	0x24040be0
 800b8bc:	24040bb0 	.word	0x24040bb0
 800b8c0:	24040bc4 	.word	0x24040bc4
 800b8c4:	24040bd8 	.word	0x24040bd8
 800b8c8:	24040bdc 	.word	0x24040bdc
 800b8cc:	24040c8c 	.word	0x24040c8c
 800b8d0:	24040bec 	.word	0x24040bec
 800b8d4:	0800c1f4 	.word	0x0800c1f4

0800b8d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	3b04      	subs	r3, #4
 800b8e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b8f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	3b04      	subs	r3, #4
 800b8f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	f023 0201 	bic.w	r2, r3, #1
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	3b04      	subs	r3, #4
 800b906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b908:	4a0c      	ldr	r2, [pc, #48]	; (800b93c <pxPortInitialiseStack+0x64>)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	3b14      	subs	r3, #20
 800b912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	3b04      	subs	r3, #4
 800b91e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f06f 0202 	mvn.w	r2, #2
 800b926:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	3b20      	subs	r3, #32
 800b92c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b92e:	68fb      	ldr	r3, [r7, #12]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	0800b941 	.word	0x0800b941

0800b940 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b946:	2300      	movs	r3, #0
 800b948:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b94a:	4b12      	ldr	r3, [pc, #72]	; (800b994 <prvTaskExitError+0x54>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b952:	d00a      	beq.n	800b96a <prvTaskExitError+0x2a>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	60fb      	str	r3, [r7, #12]
}
 800b966:	bf00      	nop
 800b968:	e7fe      	b.n	800b968 <prvTaskExitError+0x28>
	__asm volatile
 800b96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96e:	f383 8811 	msr	BASEPRI, r3
 800b972:	f3bf 8f6f 	isb	sy
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	60bb      	str	r3, [r7, #8]
}
 800b97c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b97e:	bf00      	nop
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d0fc      	beq.n	800b980 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b986:	bf00      	nop
 800b988:	bf00      	nop
 800b98a:	3714      	adds	r7, #20
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr
 800b994:	24000010 	.word	0x24000010
	...

0800b9a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b9a0:	4b07      	ldr	r3, [pc, #28]	; (800b9c0 <pxCurrentTCBConst2>)
 800b9a2:	6819      	ldr	r1, [r3, #0]
 800b9a4:	6808      	ldr	r0, [r1, #0]
 800b9a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9aa:	f380 8809 	msr	PSP, r0
 800b9ae:	f3bf 8f6f 	isb	sy
 800b9b2:	f04f 0000 	mov.w	r0, #0
 800b9b6:	f380 8811 	msr	BASEPRI, r0
 800b9ba:	4770      	bx	lr
 800b9bc:	f3af 8000 	nop.w

0800b9c0 <pxCurrentTCBConst2>:
 800b9c0:	240406b0 	.word	0x240406b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b9c4:	bf00      	nop
 800b9c6:	bf00      	nop

0800b9c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b9c8:	4808      	ldr	r0, [pc, #32]	; (800b9ec <prvPortStartFirstTask+0x24>)
 800b9ca:	6800      	ldr	r0, [r0, #0]
 800b9cc:	6800      	ldr	r0, [r0, #0]
 800b9ce:	f380 8808 	msr	MSP, r0
 800b9d2:	f04f 0000 	mov.w	r0, #0
 800b9d6:	f380 8814 	msr	CONTROL, r0
 800b9da:	b662      	cpsie	i
 800b9dc:	b661      	cpsie	f
 800b9de:	f3bf 8f4f 	dsb	sy
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	df00      	svc	0
 800b9e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b9ea:	bf00      	nop
 800b9ec:	e000ed08 	.word	0xe000ed08

0800b9f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b9f6:	4b46      	ldr	r3, [pc, #280]	; (800bb10 <xPortStartScheduler+0x120>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a46      	ldr	r2, [pc, #280]	; (800bb14 <xPortStartScheduler+0x124>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d10a      	bne.n	800ba16 <xPortStartScheduler+0x26>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	613b      	str	r3, [r7, #16]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba16:	4b3e      	ldr	r3, [pc, #248]	; (800bb10 <xPortStartScheduler+0x120>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a3f      	ldr	r2, [pc, #252]	; (800bb18 <xPortStartScheduler+0x128>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d10a      	bne.n	800ba36 <xPortStartScheduler+0x46>
	__asm volatile
 800ba20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	60fb      	str	r3, [r7, #12]
}
 800ba32:	bf00      	nop
 800ba34:	e7fe      	b.n	800ba34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba36:	4b39      	ldr	r3, [pc, #228]	; (800bb1c <xPortStartScheduler+0x12c>)
 800ba38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	22ff      	movs	r2, #255	; 0xff
 800ba46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba50:	78fb      	ldrb	r3, [r7, #3]
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ba58:	b2da      	uxtb	r2, r3
 800ba5a:	4b31      	ldr	r3, [pc, #196]	; (800bb20 <xPortStartScheduler+0x130>)
 800ba5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba5e:	4b31      	ldr	r3, [pc, #196]	; (800bb24 <xPortStartScheduler+0x134>)
 800ba60:	2207      	movs	r2, #7
 800ba62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba64:	e009      	b.n	800ba7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ba66:	4b2f      	ldr	r3, [pc, #188]	; (800bb24 <xPortStartScheduler+0x134>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	4a2d      	ldr	r2, [pc, #180]	; (800bb24 <xPortStartScheduler+0x134>)
 800ba6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba70:	78fb      	ldrb	r3, [r7, #3]
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	005b      	lsls	r3, r3, #1
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba7a:	78fb      	ldrb	r3, [r7, #3]
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba82:	2b80      	cmp	r3, #128	; 0x80
 800ba84:	d0ef      	beq.n	800ba66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ba86:	4b27      	ldr	r3, [pc, #156]	; (800bb24 <xPortStartScheduler+0x134>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f1c3 0307 	rsb	r3, r3, #7
 800ba8e:	2b04      	cmp	r3, #4
 800ba90:	d00a      	beq.n	800baa8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ba92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba96:	f383 8811 	msr	BASEPRI, r3
 800ba9a:	f3bf 8f6f 	isb	sy
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	60bb      	str	r3, [r7, #8]
}
 800baa4:	bf00      	nop
 800baa6:	e7fe      	b.n	800baa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800baa8:	4b1e      	ldr	r3, [pc, #120]	; (800bb24 <xPortStartScheduler+0x134>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	021b      	lsls	r3, r3, #8
 800baae:	4a1d      	ldr	r2, [pc, #116]	; (800bb24 <xPortStartScheduler+0x134>)
 800bab0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bab2:	4b1c      	ldr	r3, [pc, #112]	; (800bb24 <xPortStartScheduler+0x134>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800baba:	4a1a      	ldr	r2, [pc, #104]	; (800bb24 <xPortStartScheduler+0x134>)
 800babc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	b2da      	uxtb	r2, r3
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bac6:	4b18      	ldr	r3, [pc, #96]	; (800bb28 <xPortStartScheduler+0x138>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a17      	ldr	r2, [pc, #92]	; (800bb28 <xPortStartScheduler+0x138>)
 800bacc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bad2:	4b15      	ldr	r3, [pc, #84]	; (800bb28 <xPortStartScheduler+0x138>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a14      	ldr	r2, [pc, #80]	; (800bb28 <xPortStartScheduler+0x138>)
 800bad8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800badc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bade:	f000 f8dd 	bl	800bc9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bae2:	4b12      	ldr	r3, [pc, #72]	; (800bb2c <xPortStartScheduler+0x13c>)
 800bae4:	2200      	movs	r2, #0
 800bae6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bae8:	f000 f8fc 	bl	800bce4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800baec:	4b10      	ldr	r3, [pc, #64]	; (800bb30 <xPortStartScheduler+0x140>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a0f      	ldr	r2, [pc, #60]	; (800bb30 <xPortStartScheduler+0x140>)
 800baf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800baf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800baf8:	f7ff ff66 	bl	800b9c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bafc:	f7ff f852 	bl	800aba4 <vTaskSwitchContext>
	prvTaskExitError();
 800bb00:	f7ff ff1e 	bl	800b940 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3718      	adds	r7, #24
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	e000ed00 	.word	0xe000ed00
 800bb14:	410fc271 	.word	0x410fc271
 800bb18:	410fc270 	.word	0x410fc270
 800bb1c:	e000e400 	.word	0xe000e400
 800bb20:	24040cdc 	.word	0x24040cdc
 800bb24:	24040ce0 	.word	0x24040ce0
 800bb28:	e000ed20 	.word	0xe000ed20
 800bb2c:	24000010 	.word	0x24000010
 800bb30:	e000ef34 	.word	0xe000ef34

0800bb34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
	__asm volatile
 800bb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	607b      	str	r3, [r7, #4]
}
 800bb4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb4e:	4b0f      	ldr	r3, [pc, #60]	; (800bb8c <vPortEnterCritical+0x58>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	3301      	adds	r3, #1
 800bb54:	4a0d      	ldr	r2, [pc, #52]	; (800bb8c <vPortEnterCritical+0x58>)
 800bb56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb58:	4b0c      	ldr	r3, [pc, #48]	; (800bb8c <vPortEnterCritical+0x58>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d10f      	bne.n	800bb80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb60:	4b0b      	ldr	r3, [pc, #44]	; (800bb90 <vPortEnterCritical+0x5c>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00a      	beq.n	800bb80 <vPortEnterCritical+0x4c>
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	603b      	str	r3, [r7, #0]
}
 800bb7c:	bf00      	nop
 800bb7e:	e7fe      	b.n	800bb7e <vPortEnterCritical+0x4a>
	}
}
 800bb80:	bf00      	nop
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr
 800bb8c:	24000010 	.word	0x24000010
 800bb90:	e000ed04 	.word	0xe000ed04

0800bb94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bb9a:	4b12      	ldr	r3, [pc, #72]	; (800bbe4 <vPortExitCritical+0x50>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10a      	bne.n	800bbb8 <vPortExitCritical+0x24>
	__asm volatile
 800bba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	607b      	str	r3, [r7, #4]
}
 800bbb4:	bf00      	nop
 800bbb6:	e7fe      	b.n	800bbb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bbb8:	4b0a      	ldr	r3, [pc, #40]	; (800bbe4 <vPortExitCritical+0x50>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	4a09      	ldr	r2, [pc, #36]	; (800bbe4 <vPortExitCritical+0x50>)
 800bbc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bbc2:	4b08      	ldr	r3, [pc, #32]	; (800bbe4 <vPortExitCritical+0x50>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d105      	bne.n	800bbd6 <vPortExitCritical+0x42>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	f383 8811 	msr	BASEPRI, r3
}
 800bbd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bbd6:	bf00      	nop
 800bbd8:	370c      	adds	r7, #12
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	24000010 	.word	0x24000010
	...

0800bbf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bbf0:	f3ef 8009 	mrs	r0, PSP
 800bbf4:	f3bf 8f6f 	isb	sy
 800bbf8:	4b15      	ldr	r3, [pc, #84]	; (800bc50 <pxCurrentTCBConst>)
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	f01e 0f10 	tst.w	lr, #16
 800bc00:	bf08      	it	eq
 800bc02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0a:	6010      	str	r0, [r2, #0]
 800bc0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bc14:	f380 8811 	msr	BASEPRI, r0
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	f7fe ffc0 	bl	800aba4 <vTaskSwitchContext>
 800bc24:	f04f 0000 	mov.w	r0, #0
 800bc28:	f380 8811 	msr	BASEPRI, r0
 800bc2c:	bc09      	pop	{r0, r3}
 800bc2e:	6819      	ldr	r1, [r3, #0]
 800bc30:	6808      	ldr	r0, [r1, #0]
 800bc32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc36:	f01e 0f10 	tst.w	lr, #16
 800bc3a:	bf08      	it	eq
 800bc3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc40:	f380 8809 	msr	PSP, r0
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	f3af 8000 	nop.w

0800bc50 <pxCurrentTCBConst>:
 800bc50:	240406b0 	.word	0x240406b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc54:	bf00      	nop
 800bc56:	bf00      	nop

0800bc58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc62:	f383 8811 	msr	BASEPRI, r3
 800bc66:	f3bf 8f6f 	isb	sy
 800bc6a:	f3bf 8f4f 	dsb	sy
 800bc6e:	607b      	str	r3, [r7, #4]
}
 800bc70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bc72:	f7fe fedd 	bl	800aa30 <xTaskIncrementTick>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d003      	beq.n	800bc84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc7c:	4b06      	ldr	r3, [pc, #24]	; (800bc98 <xPortSysTickHandler+0x40>)
 800bc7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc82:	601a      	str	r2, [r3, #0]
 800bc84:	2300      	movs	r3, #0
 800bc86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	f383 8811 	msr	BASEPRI, r3
}
 800bc8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bc90:	bf00      	nop
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	e000ed04 	.word	0xe000ed04

0800bc9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bca0:	4b0b      	ldr	r3, [pc, #44]	; (800bcd0 <vPortSetupTimerInterrupt+0x34>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bca6:	4b0b      	ldr	r3, [pc, #44]	; (800bcd4 <vPortSetupTimerInterrupt+0x38>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bcac:	4b0a      	ldr	r3, [pc, #40]	; (800bcd8 <vPortSetupTimerInterrupt+0x3c>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a0a      	ldr	r2, [pc, #40]	; (800bcdc <vPortSetupTimerInterrupt+0x40>)
 800bcb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bcb6:	099b      	lsrs	r3, r3, #6
 800bcb8:	4a09      	ldr	r2, [pc, #36]	; (800bce0 <vPortSetupTimerInterrupt+0x44>)
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bcbe:	4b04      	ldr	r3, [pc, #16]	; (800bcd0 <vPortSetupTimerInterrupt+0x34>)
 800bcc0:	2207      	movs	r2, #7
 800bcc2:	601a      	str	r2, [r3, #0]
}
 800bcc4:	bf00      	nop
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	e000e010 	.word	0xe000e010
 800bcd4:	e000e018 	.word	0xe000e018
 800bcd8:	24000000 	.word	0x24000000
 800bcdc:	10624dd3 	.word	0x10624dd3
 800bce0:	e000e014 	.word	0xe000e014

0800bce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bce4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bcf4 <vPortEnableVFP+0x10>
 800bce8:	6801      	ldr	r1, [r0, #0]
 800bcea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bcee:	6001      	str	r1, [r0, #0]
 800bcf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bcf2:	bf00      	nop
 800bcf4:	e000ed88 	.word	0xe000ed88

0800bcf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bcfe:	f3ef 8305 	mrs	r3, IPSR
 800bd02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2b0f      	cmp	r3, #15
 800bd08:	d914      	bls.n	800bd34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd0a:	4a17      	ldr	r2, [pc, #92]	; (800bd68 <vPortValidateInterruptPriority+0x70>)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	4413      	add	r3, r2
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd14:	4b15      	ldr	r3, [pc, #84]	; (800bd6c <vPortValidateInterruptPriority+0x74>)
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	7afa      	ldrb	r2, [r7, #11]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d20a      	bcs.n	800bd34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	607b      	str	r3, [r7, #4]
}
 800bd30:	bf00      	nop
 800bd32:	e7fe      	b.n	800bd32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd34:	4b0e      	ldr	r3, [pc, #56]	; (800bd70 <vPortValidateInterruptPriority+0x78>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bd3c:	4b0d      	ldr	r3, [pc, #52]	; (800bd74 <vPortValidateInterruptPriority+0x7c>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d90a      	bls.n	800bd5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	603b      	str	r3, [r7, #0]
}
 800bd56:	bf00      	nop
 800bd58:	e7fe      	b.n	800bd58 <vPortValidateInterruptPriority+0x60>
	}
 800bd5a:	bf00      	nop
 800bd5c:	3714      	adds	r7, #20
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop
 800bd68:	e000e3f0 	.word	0xe000e3f0
 800bd6c:	24040cdc 	.word	0x24040cdc
 800bd70:	e000ed0c 	.word	0xe000ed0c
 800bd74:	24040ce0 	.word	0x24040ce0

0800bd78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b08a      	sub	sp, #40	; 0x28
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bd80:	2300      	movs	r3, #0
 800bd82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bd84:	f7fe fd98 	bl	800a8b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bd88:	4b5b      	ldr	r3, [pc, #364]	; (800bef8 <pvPortMalloc+0x180>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d101      	bne.n	800bd94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bd90:	f000 f920 	bl	800bfd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd94:	4b59      	ldr	r3, [pc, #356]	; (800befc <pvPortMalloc+0x184>)
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4013      	ands	r3, r2
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	f040 8093 	bne.w	800bec8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d01d      	beq.n	800bde4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bda8:	2208      	movs	r2, #8
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4413      	add	r3, r2
 800bdae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f003 0307 	and.w	r3, r3, #7
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d014      	beq.n	800bde4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f023 0307 	bic.w	r3, r3, #7
 800bdc0:	3308      	adds	r3, #8
 800bdc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f003 0307 	and.w	r3, r3, #7
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00a      	beq.n	800bde4 <pvPortMalloc+0x6c>
	__asm volatile
 800bdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd2:	f383 8811 	msr	BASEPRI, r3
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	617b      	str	r3, [r7, #20]
}
 800bde0:	bf00      	nop
 800bde2:	e7fe      	b.n	800bde2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d06e      	beq.n	800bec8 <pvPortMalloc+0x150>
 800bdea:	4b45      	ldr	r3, [pc, #276]	; (800bf00 <pvPortMalloc+0x188>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d869      	bhi.n	800bec8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bdf4:	4b43      	ldr	r3, [pc, #268]	; (800bf04 <pvPortMalloc+0x18c>)
 800bdf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bdf8:	4b42      	ldr	r3, [pc, #264]	; (800bf04 <pvPortMalloc+0x18c>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdfe:	e004      	b.n	800be0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800be00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	429a      	cmp	r2, r3
 800be12:	d903      	bls.n	800be1c <pvPortMalloc+0xa4>
 800be14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1f1      	bne.n	800be00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800be1c:	4b36      	ldr	r3, [pc, #216]	; (800bef8 <pvPortMalloc+0x180>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be22:	429a      	cmp	r2, r3
 800be24:	d050      	beq.n	800bec8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be26:	6a3b      	ldr	r3, [r7, #32]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	2208      	movs	r2, #8
 800be2c:	4413      	add	r3, r2
 800be2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	6a3b      	ldr	r3, [r7, #32]
 800be36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3a:	685a      	ldr	r2, [r3, #4]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	1ad2      	subs	r2, r2, r3
 800be40:	2308      	movs	r3, #8
 800be42:	005b      	lsls	r3, r3, #1
 800be44:	429a      	cmp	r2, r3
 800be46:	d91f      	bls.n	800be88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4413      	add	r3, r2
 800be4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	f003 0307 	and.w	r3, r3, #7
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00a      	beq.n	800be70 <pvPortMalloc+0xf8>
	__asm volatile
 800be5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5e:	f383 8811 	msr	BASEPRI, r3
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	613b      	str	r3, [r7, #16]
}
 800be6c:	bf00      	nop
 800be6e:	e7fe      	b.n	800be6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be72:	685a      	ldr	r2, [r3, #4]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	1ad2      	subs	r2, r2, r3
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800be7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800be82:	69b8      	ldr	r0, [r7, #24]
 800be84:	f000 f908 	bl	800c098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be88:	4b1d      	ldr	r3, [pc, #116]	; (800bf00 <pvPortMalloc+0x188>)
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	1ad3      	subs	r3, r2, r3
 800be92:	4a1b      	ldr	r2, [pc, #108]	; (800bf00 <pvPortMalloc+0x188>)
 800be94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be96:	4b1a      	ldr	r3, [pc, #104]	; (800bf00 <pvPortMalloc+0x188>)
 800be98:	681a      	ldr	r2, [r3, #0]
 800be9a:	4b1b      	ldr	r3, [pc, #108]	; (800bf08 <pvPortMalloc+0x190>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d203      	bcs.n	800beaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bea2:	4b17      	ldr	r3, [pc, #92]	; (800bf00 <pvPortMalloc+0x188>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a18      	ldr	r2, [pc, #96]	; (800bf08 <pvPortMalloc+0x190>)
 800bea8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800beaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beac:	685a      	ldr	r2, [r3, #4]
 800beae:	4b13      	ldr	r3, [pc, #76]	; (800befc <pvPortMalloc+0x184>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	431a      	orrs	r2, r3
 800beb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800beb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beba:	2200      	movs	r2, #0
 800bebc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bebe:	4b13      	ldr	r3, [pc, #76]	; (800bf0c <pvPortMalloc+0x194>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	3301      	adds	r3, #1
 800bec4:	4a11      	ldr	r2, [pc, #68]	; (800bf0c <pvPortMalloc+0x194>)
 800bec6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bec8:	f7fe fd04 	bl	800a8d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	f003 0307 	and.w	r3, r3, #7
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00a      	beq.n	800beec <pvPortMalloc+0x174>
	__asm volatile
 800bed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beda:	f383 8811 	msr	BASEPRI, r3
 800bede:	f3bf 8f6f 	isb	sy
 800bee2:	f3bf 8f4f 	dsb	sy
 800bee6:	60fb      	str	r3, [r7, #12]
}
 800bee8:	bf00      	nop
 800beea:	e7fe      	b.n	800beea <pvPortMalloc+0x172>
	return pvReturn;
 800beec:	69fb      	ldr	r3, [r7, #28]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3728      	adds	r7, #40	; 0x28
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	240448ec 	.word	0x240448ec
 800befc:	24044900 	.word	0x24044900
 800bf00:	240448f0 	.word	0x240448f0
 800bf04:	240448e4 	.word	0x240448e4
 800bf08:	240448f4 	.word	0x240448f4
 800bf0c:	240448f8 	.word	0x240448f8

0800bf10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b086      	sub	sp, #24
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d04d      	beq.n	800bfbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf22:	2308      	movs	r3, #8
 800bf24:	425b      	negs	r3, r3
 800bf26:	697a      	ldr	r2, [r7, #20]
 800bf28:	4413      	add	r3, r2
 800bf2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	685a      	ldr	r2, [r3, #4]
 800bf34:	4b24      	ldr	r3, [pc, #144]	; (800bfc8 <vPortFree+0xb8>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4013      	ands	r3, r2
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d10a      	bne.n	800bf54 <vPortFree+0x44>
	__asm volatile
 800bf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf42:	f383 8811 	msr	BASEPRI, r3
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	60fb      	str	r3, [r7, #12]
}
 800bf50:	bf00      	nop
 800bf52:	e7fe      	b.n	800bf52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00a      	beq.n	800bf72 <vPortFree+0x62>
	__asm volatile
 800bf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf60:	f383 8811 	msr	BASEPRI, r3
 800bf64:	f3bf 8f6f 	isb	sy
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	60bb      	str	r3, [r7, #8]
}
 800bf6e:	bf00      	nop
 800bf70:	e7fe      	b.n	800bf70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	685a      	ldr	r2, [r3, #4]
 800bf76:	4b14      	ldr	r3, [pc, #80]	; (800bfc8 <vPortFree+0xb8>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4013      	ands	r3, r2
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d01e      	beq.n	800bfbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d11a      	bne.n	800bfbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	685a      	ldr	r2, [r3, #4]
 800bf8c:	4b0e      	ldr	r3, [pc, #56]	; (800bfc8 <vPortFree+0xb8>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	43db      	mvns	r3, r3
 800bf92:	401a      	ands	r2, r3
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf98:	f7fe fc8e 	bl	800a8b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	685a      	ldr	r2, [r3, #4]
 800bfa0:	4b0a      	ldr	r3, [pc, #40]	; (800bfcc <vPortFree+0xbc>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	4a09      	ldr	r2, [pc, #36]	; (800bfcc <vPortFree+0xbc>)
 800bfa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bfaa:	6938      	ldr	r0, [r7, #16]
 800bfac:	f000 f874 	bl	800c098 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bfb0:	4b07      	ldr	r3, [pc, #28]	; (800bfd0 <vPortFree+0xc0>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	4a06      	ldr	r2, [pc, #24]	; (800bfd0 <vPortFree+0xc0>)
 800bfb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bfba:	f7fe fc8b 	bl	800a8d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bfbe:	bf00      	nop
 800bfc0:	3718      	adds	r7, #24
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	24044900 	.word	0x24044900
 800bfcc:	240448f0 	.word	0x240448f0
 800bfd0:	240448fc 	.word	0x240448fc

0800bfd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bfda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bfde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bfe0:	4b27      	ldr	r3, [pc, #156]	; (800c080 <prvHeapInit+0xac>)
 800bfe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f003 0307 	and.w	r3, r3, #7
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00c      	beq.n	800c008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	3307      	adds	r3, #7
 800bff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f023 0307 	bic.w	r3, r3, #7
 800bffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bffc:	68ba      	ldr	r2, [r7, #8]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	1ad3      	subs	r3, r2, r3
 800c002:	4a1f      	ldr	r2, [pc, #124]	; (800c080 <prvHeapInit+0xac>)
 800c004:	4413      	add	r3, r2
 800c006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c00c:	4a1d      	ldr	r2, [pc, #116]	; (800c084 <prvHeapInit+0xb0>)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c012:	4b1c      	ldr	r3, [pc, #112]	; (800c084 <prvHeapInit+0xb0>)
 800c014:	2200      	movs	r2, #0
 800c016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	4413      	add	r3, r2
 800c01e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c020:	2208      	movs	r2, #8
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	1a9b      	subs	r3, r3, r2
 800c026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f023 0307 	bic.w	r3, r3, #7
 800c02e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	4a15      	ldr	r2, [pc, #84]	; (800c088 <prvHeapInit+0xb4>)
 800c034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c036:	4b14      	ldr	r3, [pc, #80]	; (800c088 <prvHeapInit+0xb4>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2200      	movs	r2, #0
 800c03c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c03e:	4b12      	ldr	r3, [pc, #72]	; (800c088 <prvHeapInit+0xb4>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2200      	movs	r2, #0
 800c044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	1ad2      	subs	r2, r2, r3
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c054:	4b0c      	ldr	r3, [pc, #48]	; (800c088 <prvHeapInit+0xb4>)
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	4a0a      	ldr	r2, [pc, #40]	; (800c08c <prvHeapInit+0xb8>)
 800c062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	4a09      	ldr	r2, [pc, #36]	; (800c090 <prvHeapInit+0xbc>)
 800c06a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c06c:	4b09      	ldr	r3, [pc, #36]	; (800c094 <prvHeapInit+0xc0>)
 800c06e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c072:	601a      	str	r2, [r3, #0]
}
 800c074:	bf00      	nop
 800c076:	3714      	adds	r7, #20
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr
 800c080:	24040ce4 	.word	0x24040ce4
 800c084:	240448e4 	.word	0x240448e4
 800c088:	240448ec 	.word	0x240448ec
 800c08c:	240448f4 	.word	0x240448f4
 800c090:	240448f0 	.word	0x240448f0
 800c094:	24044900 	.word	0x24044900

0800c098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c098:	b480      	push	{r7}
 800c09a:	b085      	sub	sp, #20
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c0a0:	4b28      	ldr	r3, [pc, #160]	; (800c144 <prvInsertBlockIntoFreeList+0xac>)
 800c0a2:	60fb      	str	r3, [r7, #12]
 800c0a4:	e002      	b.n	800c0ac <prvInsertBlockIntoFreeList+0x14>
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	60fb      	str	r3, [r7, #12]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d8f7      	bhi.n	800c0a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	68ba      	ldr	r2, [r7, #8]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d108      	bne.n	800c0da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	685a      	ldr	r2, [r3, #4]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	441a      	add	r2, r3
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	441a      	add	r2, r3
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d118      	bne.n	800c120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	4b15      	ldr	r3, [pc, #84]	; (800c148 <prvInsertBlockIntoFreeList+0xb0>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d00d      	beq.n	800c116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	441a      	add	r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	601a      	str	r2, [r3, #0]
 800c114:	e008      	b.n	800c128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c116:	4b0c      	ldr	r3, [pc, #48]	; (800c148 <prvInsertBlockIntoFreeList+0xb0>)
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	601a      	str	r2, [r3, #0]
 800c11e:	e003      	b.n	800c128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d002      	beq.n	800c136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c136:	bf00      	nop
 800c138:	3714      	adds	r7, #20
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr
 800c142:	bf00      	nop
 800c144:	240448e4 	.word	0x240448e4
 800c148:	240448ec 	.word	0x240448ec

0800c14c <memset>:
 800c14c:	4402      	add	r2, r0
 800c14e:	4603      	mov	r3, r0
 800c150:	4293      	cmp	r3, r2
 800c152:	d100      	bne.n	800c156 <memset+0xa>
 800c154:	4770      	bx	lr
 800c156:	f803 1b01 	strb.w	r1, [r3], #1
 800c15a:	e7f9      	b.n	800c150 <memset+0x4>

0800c15c <__libc_init_array>:
 800c15c:	b570      	push	{r4, r5, r6, lr}
 800c15e:	4d0d      	ldr	r5, [pc, #52]	; (800c194 <__libc_init_array+0x38>)
 800c160:	4c0d      	ldr	r4, [pc, #52]	; (800c198 <__libc_init_array+0x3c>)
 800c162:	1b64      	subs	r4, r4, r5
 800c164:	10a4      	asrs	r4, r4, #2
 800c166:	2600      	movs	r6, #0
 800c168:	42a6      	cmp	r6, r4
 800c16a:	d109      	bne.n	800c180 <__libc_init_array+0x24>
 800c16c:	4d0b      	ldr	r5, [pc, #44]	; (800c19c <__libc_init_array+0x40>)
 800c16e:	4c0c      	ldr	r4, [pc, #48]	; (800c1a0 <__libc_init_array+0x44>)
 800c170:	f000 f826 	bl	800c1c0 <_init>
 800c174:	1b64      	subs	r4, r4, r5
 800c176:	10a4      	asrs	r4, r4, #2
 800c178:	2600      	movs	r6, #0
 800c17a:	42a6      	cmp	r6, r4
 800c17c:	d105      	bne.n	800c18a <__libc_init_array+0x2e>
 800c17e:	bd70      	pop	{r4, r5, r6, pc}
 800c180:	f855 3b04 	ldr.w	r3, [r5], #4
 800c184:	4798      	blx	r3
 800c186:	3601      	adds	r6, #1
 800c188:	e7ee      	b.n	800c168 <__libc_init_array+0xc>
 800c18a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c18e:	4798      	blx	r3
 800c190:	3601      	adds	r6, #1
 800c192:	e7f2      	b.n	800c17a <__libc_init_array+0x1e>
 800c194:	0800c260 	.word	0x0800c260
 800c198:	0800c260 	.word	0x0800c260
 800c19c:	0800c260 	.word	0x0800c260
 800c1a0:	0800c264 	.word	0x0800c264

0800c1a4 <memcpy>:
 800c1a4:	440a      	add	r2, r1
 800c1a6:	4291      	cmp	r1, r2
 800c1a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c1ac:	d100      	bne.n	800c1b0 <memcpy+0xc>
 800c1ae:	4770      	bx	lr
 800c1b0:	b510      	push	{r4, lr}
 800c1b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1ba:	4291      	cmp	r1, r2
 800c1bc:	d1f9      	bne.n	800c1b2 <memcpy+0xe>
 800c1be:	bd10      	pop	{r4, pc}

0800c1c0 <_init>:
 800c1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c2:	bf00      	nop
 800c1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1c6:	bc08      	pop	{r3}
 800c1c8:	469e      	mov	lr, r3
 800c1ca:	4770      	bx	lr

0800c1cc <_fini>:
 800c1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ce:	bf00      	nop
 800c1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1d2:	bc08      	pop	{r3}
 800c1d4:	469e      	mov	lr, r3
 800c1d6:	4770      	bx	lr
